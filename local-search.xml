<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>电脑商城10</title>
    <link href="/2023/05/08/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E10/"/>
    <url>/2023/05/08/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E10/</url>
    
    <content type="html"><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="1-Spring-AOP"><a href="#1-Spring-AOP" class="headerlink" title="1 Spring AOP"></a>1 Spring AOP</h3><p>AOP：面向切面（Aspect）编程。AOP并不是Spring框架的特性，只是Spring很好的支持了AOP。</p><p>如果需要在处理每个业务时，都执行特定的代码，则可以假设在整个数据处理流程中存在某个切面，切面中可以定义某些方法，当处理流程执行到切面时，就会自动执行切面中的方法。最终实现的效果就是：只需要定义好切面方法，配置好切面的位置（连接点），在不需要修改原有数据处理流程的代码的基础之上，就可以使得若干个流程都执行相同的代码。</p><h3 id="2-切面方法"><a href="#2-切面方法" class="headerlink" title="2 切面方法"></a>2 切面方法</h3><p>1.切面方法的访问权限是public。</p><p>2.切面方法的返回值类型可以是void或Object，如果使用的注解是@Around时，必须使用Object作为返回值类型，并返回连接点方法的返回值；如果使用的注解是@Before或@After等其他注解时，则自行决定。</p><p>3.切面方法的名称可以自定义。</p><p>4.切面方法的参数列表中可以添加ProceedingJoinPoint接口类型的对象，该对象表示连接点，也可以理解调用切面所在位置对应的方法的对象，如果使用的注解是@Around时，必须添加该参数，反之则不是必须添加。</p><h3 id="3-统计业务方法执行时长"><a href="#3-统计业务方法执行时长" class="headerlink" title="3 统计业务方法执行时长"></a>3 统计业务方法执行时长</h3><p>1.在使用Spring AOP编程时，需要先在pom.xml文件中添加两个关于AOP的依赖aspectjweaver和aspectjtools。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在com.cy.store.aop包下创建TimerAspect切面类，在类之前添加@Aspect和@Component注解修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.aop;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimerAspect</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3.在类中添加切面方法around(ProceedingJoinPoint pjp)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-comment">// 记录起始时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-comment">// 执行连接点方法，即切面所在位置对应的方法。本项目中表示执行注册或执行登录等</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> pjp.proceed();<br>    <span class="hljs-comment">// 记录结束时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-comment">// 计算耗时</span><br>    System.err.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (end - start) + <span class="hljs-string">&quot;ms.&quot;</span>);<br>    <span class="hljs-comment">// 返回连接点方法的返回值</span><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.最后需要在方法之前添加@Around注解，以配置连接点，即哪些方法需要应用该切面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;execution(* com.cy.store.service.impl.*.*(..))&quot;)</span><br></code></pre></td></tr></table></figure><p>5.启动项目，在前端浏览器访问任意一个功能模块进行功能的测试。</p><p><img src="1.png" alt="电脑商城10"></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>电脑商城</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>项目练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城09</title>
    <link href="/2023/05/08/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E09/"/>
    <url>/2023/05/08/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E09/</url>
    
    <content type="html"><![CDATA[<h2 id="创建订单"><a href="#创建订单" class="headerlink" title="创建订单"></a>创建订单</h2><h3 id="1-订单-创建数据表"><a href="#1-订单-创建数据表" class="headerlink" title="1 订单-创建数据表"></a>1 订单-创建数据表</h3><p>1.使用use命令先选中store数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USE store;<br></code></pre></td></tr></table></figure><p>2.在store数据库中创建t_order和t_order_item数据表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE t_order (<br>oid INT AUTO_INCREMENT COMMENT &#x27;订单id&#x27;,<br>uid INT NOT NULL COMMENT &#x27;用户id&#x27;,<br>recv_name VARCHAR(20) NOT NULL COMMENT &#x27;收货人姓名&#x27;,<br>recv_phone VARCHAR(20) COMMENT &#x27;收货人电话&#x27;,<br>recv_province VARCHAR(15) COMMENT &#x27;收货人所在省&#x27;,<br>recv_city VARCHAR(15) COMMENT &#x27;收货人所在市&#x27;,<br>recv_area VARCHAR(15) COMMENT &#x27;收货人所在区&#x27;,<br>recv_address VARCHAR(50) COMMENT &#x27;收货详细地址&#x27;,<br>total_price BIGINT COMMENT &#x27;总价&#x27;,<br>status INT COMMENT &#x27;状态：0-未支付，1-已支付，2-已取消，3-已关闭，4-已完成&#x27;,<br>order_time DATETIME COMMENT &#x27;下单时间&#x27;,<br>pay_time DATETIME COMMENT &#x27;支付时间&#x27;,<br>created_user VARCHAR(20) COMMENT &#x27;创建人&#x27;,<br>created_time DATETIME COMMENT &#x27;创建时间&#x27;,<br>modified_user VARCHAR(20) COMMENT &#x27;修改人&#x27;,<br>modified_time DATETIME COMMENT &#x27;修改时间&#x27;,<br>PRIMARY KEY (oid)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br><br>CREATE TABLE t_order_item (<br>id INT AUTO_INCREMENT COMMENT &#x27;订单中的商品记录的id&#x27;,<br>oid INT NOT NULL COMMENT &#x27;所归属的订单的id&#x27;,<br>pid INT NOT NULL COMMENT &#x27;商品的id&#x27;,<br>title VARCHAR(100) NOT NULL COMMENT &#x27;商品标题&#x27;,<br>image VARCHAR(500) COMMENT &#x27;商品图片&#x27;,<br>price BIGINT COMMENT &#x27;商品价格&#x27;,<br>num INT COMMENT &#x27;购买数量&#x27;,<br>created_user VARCHAR(20) COMMENT &#x27;创建人&#x27;,<br>created_time DATETIME COMMENT &#x27;创建时间&#x27;,<br>modified_user VARCHAR(20) COMMENT &#x27;修改人&#x27;,<br>modified_time DATETIME COMMENT &#x27;修改时间&#x27;,<br>PRIMARY KEY (id)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><h3 id="2-订单-创建实体类"><a href="#2-订单-创建实体类" class="headerlink" title="2 订单-创建实体类"></a>2 订单-创建实体类</h3><p>1.在com.cy.store.entity包下创建Order实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.entity;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/** 订单数据的实体类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer oid;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> String recvName;<br>    <span class="hljs-keyword">private</span> String recvPhone;<br>    <span class="hljs-keyword">private</span> String recvProvince;<br>    <span class="hljs-keyword">private</span> String recvCity;<br>    <span class="hljs-keyword">private</span> String recvArea;<br>    <span class="hljs-keyword">private</span> String recvAddress;<br>    <span class="hljs-keyword">private</span> Long totalPrice;<br>    <span class="hljs-keyword">private</span> Integer status;<br>    <span class="hljs-keyword">private</span> Date orderTime;<br>    <span class="hljs-keyword">private</span> Date payTime;<br><br><span class="hljs-comment">// Generate: Getter and Setter、Generate hashCode() and equals()、toString()</span><br>&#125;    <br></code></pre></td></tr></table></figure><p>2.在com.cy.store.entity包下创建OrderItem实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.entity;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/** 订单中的商品数据 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> Integer oid;<br>    <span class="hljs-keyword">private</span> Integer pid;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String image;<br>    <span class="hljs-keyword">private</span> Long price;<br>    <span class="hljs-keyword">private</span> Integer num;<br><br><span class="hljs-comment">// Generate: Getter and Setter、Generate hashCode() and equals()、toString()</span><br>&#125;    <br></code></pre></td></tr></table></figure><h3 id="3-订单-持久层"><a href="#3-订单-持久层" class="headerlink" title="3 订单-持久层"></a>3 订单-持久层</h3><h4 id="3-1-规划需要执行的SQL语句"><a href="#3-1-规划需要执行的SQL语句" class="headerlink" title="3.1 规划需要执行的SQL语句"></a>3.1 规划需要执行的SQL语句</h4><p>1.插入订单数据的SQL语句大致是。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO t_order (<br>uid,<br>recv_name,<br>recv_phone,<br>recv_province,<br>recv_city,<br>recv_area,<br>recv_address,<br>total_price,<br>status,<br>order_time,<br>pay_time,<br>created_user,<br>created_time,<br>modified_user,<br>modified_time <br>)<br>VALUES (<br>#对应字段的值列表<br>)<br></code></pre></td></tr></table></figure><p>2.插入订单商品数据的SQL语句大致是。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO t_order_item ( <br>oid, <br>pid, <br>title, <br>image, <br>price, <br>num, <br>created_user, <br>created_time, <br>modified_user, <br>modified_time <br>)<br>VALUES ( <br>#对应字段的值列表<br>)<br></code></pre></td></tr></table></figure><h4 id="3-2-接口与抽象方法"><a href="#3-2-接口与抽象方法" class="headerlink" title="3.2 接口与抽象方法"></a>3.2 接口与抽象方法</h4><p>在com.cy.store.mapper包下创建OrderMapper接口并在接口中添加抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.mapper;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Order;<br><span class="hljs-keyword">import</span> com.cy.store.entity.OrderItem;<br><br><span class="hljs-comment">/** 处理订单及订单商品数据的持久层接口 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入订单数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> order 订单数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">insertOrder</span><span class="hljs-params">(Order order)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入订单商品数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderItem 订单商品数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">insertOrderItem</span><span class="hljs-params">(OrderItem orderItem)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-配置SQL映射"><a href="#3-3-配置SQL映射" class="headerlink" title="3.3 配置SQL映射"></a>3.3 配置SQL映射</h4><p>1.在main\resources\mapper文件夹下创建OrderMapper.xml文件，并添加抽象方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.cy.store.mapper.OrderMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 插入订单数据：Integer insertOrder(Order order) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertOrder&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;oid&quot;</span>&gt;</span><br>        INSERT INTO t_order (<br>            uid, recv_name, recv_phone, recv_province, recv_city, recv_area, recv_address,<br>            total_price,status, order_time, pay_time, created_user, created_time, modified_user,<br>            modified_time<br>        ) VALUES (<br>            #&#123;uid&#125;, #&#123;recvName&#125;, #&#123;recvPhone&#125;, #&#123;recvProvince&#125;, #&#123;recvCity&#125;, #&#123;recvArea&#125;,<br>            #&#123;recvAddress&#125;, #&#123;totalPrice&#125;, #&#123;status&#125;, #&#123;orderTime&#125;, #&#123;payTime&#125;, #&#123;createdUser&#125;,<br>            #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;<br>        )<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 插入订单商品数据：Integer insertOrderItem(OrderItem orderItem) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertOrderItem&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        INSERT INTO t_order_item (<br>            oid, pid, title, image, price, num, created_user,<br>            created_time, modified_user, modified_time<br>        ) VALUES (<br>            #&#123;oid&#125;, #&#123;pid&#125;, #&#123;title&#125;, #&#123;image&#125;, #&#123;price&#125;, #&#123;num&#125;, #&#123;createdUser&#125;,<br>            #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;<br>        )<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在com.cy.store.mapper包下创建OrderMapperTests测试类，并添加测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.mapper;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Order;<br><span class="hljs-keyword">import</span> com.cy.store.entity.OrderItem;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderMapperTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setUid(<span class="hljs-number">31</span>);<br>        order.setRecvName(<span class="hljs-string">&quot;小王&quot;</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> orderMapper.insertOrder(order);<br>        System.out.println(<span class="hljs-string">&quot;rows=&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertOrderItem</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">OrderItem</span> <span class="hljs-variable">orderItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>();<br>        orderItem.setOid(<span class="hljs-number">1</span>);<br>        orderItem.setPid(<span class="hljs-number">2</span>);<br>        orderItem.setTitle(<span class="hljs-string">&quot;高档铅笔&quot;</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> orderMapper.insertOrderItem(orderItem);<br>        System.out.println(<span class="hljs-string">&quot;rows=&quot;</span> + rows);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-订单-业务层"><a href="#4-订单-业务层" class="headerlink" title="4 订单-业务层"></a>4 订单-业务层</h3><h4 id="4-1-规划异常"><a href="#4-1-规划异常" class="headerlink" title="4.1 规划异常"></a>4.1 规划异常</h4><blockquote><p><strong>说明</strong>：无异常。</p></blockquote><h4 id="4-2-接口与抽象方法"><a href="#4-2-接口与抽象方法" class="headerlink" title="4.2 接口与抽象方法"></a>4.2 接口与抽象方法</h4><p>1.由于处理过程中还需要涉及收货地址数据的处理，所以需要先在IAddressService接口中添加getByAid()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据收货地址数据的id，查询收货地址详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> aid 收货地址id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 归属的用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 匹配的收货地址详情</span><br><span class="hljs-comment"> */</span><br>Address <span class="hljs-title function_">getByAid</span><span class="hljs-params">(Integer aid, Integer uid)</span>;<br></code></pre></td></tr></table></figure><p>2.在AddressServiceImpl类中实现接口中的getByAid()抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Address <span class="hljs-title function_">getByAid</span><span class="hljs-params">(Integer aid, Integer uid)</span> &#123;<br>    <span class="hljs-comment">// 根据收货地址数据id，查询收货地址详情</span><br>    <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> addressMapper.findByAid(aid);<br><br>    <span class="hljs-keyword">if</span> (address == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressNotFoundException</span>(<span class="hljs-string">&quot;尝试访问的收货地址数据不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!address.getUid().equals(uid)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedException</span>(<span class="hljs-string">&quot;非法访问&quot;</span>);<br>    &#125;<br>    address.setProvinceCode(<span class="hljs-literal">null</span>);<br>    address.setCityCode(<span class="hljs-literal">null</span>);<br>    address.setAreaCode(<span class="hljs-literal">null</span>);<br>    address.setCreatedUser(<span class="hljs-literal">null</span>);<br>    address.setCreatedTime(<span class="hljs-literal">null</span>);<br>    address.setModifiedUser(<span class="hljs-literal">null</span>);<br>    address.setModifiedTime(<span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">return</span> address;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在com.cy.store.service包下创建IOrderService业务层接口并添加抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Order;<br><br><span class="hljs-comment">/** 处理订单和订单数据的业务层接口 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IOrderService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建订单</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> aid 收货地址的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cids 即将购买的商品数据在购物车表中的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> uid 当前登录的用户的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 当前登录的用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功创建的订单数据</span><br><span class="hljs-comment">     */</span><br>    Order <span class="hljs-title function_">create</span><span class="hljs-params">(Integer aid, Integer[] cids, Integer uid, String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-实现抽象方法"><a href="#4-3-实现抽象方法" class="headerlink" title="4.3 实现抽象方法"></a>4.3 实现抽象方法</h4><p>1.在com.cy.store.service.impl包下创建OrderServiceImpl业务层实现类并实现IOrderService接口；在类定义之前添加@Service注解，在类中添加OrderMapper订单持久层对象、IAddressService处理收货地址对象、ICartService购物车数据对象，并都添加@Autowired注解进行修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.impl;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Address;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Order;<br><span class="hljs-keyword">import</span> com.cy.store.entity.OrderItem;<br><span class="hljs-keyword">import</span> com.cy.store.mapper.OrderMapper;<br><span class="hljs-keyword">import</span> com.cy.store.service.IAddressService;<br><span class="hljs-keyword">import</span> com.cy.store.service.ICartService;<br><span class="hljs-keyword">import</span> com.cy.store.service.IOrderService;<br><span class="hljs-keyword">import</span> com.cy.store.service.ex.InsertException;<br><span class="hljs-keyword">import</span> com.cy.store.vo.CartVO;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/** 处理订单和订单数据的业务层实现类 */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IOrderService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IAddressService addressService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ICartService cartService;<br><br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.在OrderServiceImpl类中重写父接口中的create()抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">create</span><span class="hljs-params">(Integer aid, Integer[] cids, Integer uid, String username)</span> &#123;<br>    <span class="hljs-comment">// 创建当前时间对象</span><br><br>    <span class="hljs-comment">// 根据cids查询所勾选的购物车列表中的数据</span><br><br>    <span class="hljs-comment">// 计算这些商品的总价</span><br><br>    <span class="hljs-comment">// 创建订单数据对象</span><br>    <span class="hljs-comment">// 补全数据：uid</span><br>    <span class="hljs-comment">// 查询收货地址数据</span><br>    <span class="hljs-comment">// 补全数据：收货地址相关的6项</span><br>    <span class="hljs-comment">// 补全数据：totalPrice</span><br>    <span class="hljs-comment">// 补全数据：status</span><br>    <span class="hljs-comment">// 补全数据：下单时间</span><br>    <span class="hljs-comment">// 补全数据：日志</span><br>    <span class="hljs-comment">// 插入订单数据</span><br><br>    <span class="hljs-comment">// 遍历carts，循环插入订单商品数据</span><br>    <span class="hljs-comment">// 创建订单商品数据</span><br>    <span class="hljs-comment">// 补全数据：oid(order.getOid())</span><br>    <span class="hljs-comment">// 补全数据：pid, title, image, price, num</span><br>    <span class="hljs-comment">// 补全数据：4项日志</span><br>    <span class="hljs-comment">// 插入订单商品数据</span><br><br>    <span class="hljs-comment">// 返回</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3.OrderServiceImpl类中的create()方法具体逻辑代码实现见下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">create</span><span class="hljs-params">(Integer aid, Integer[] cids, Integer uid, String username)</span> &#123;<br>    <span class="hljs-comment">// 创建当前时间对象</span><br>    <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br>    <span class="hljs-comment">// 根据cids查询所勾选的购物车列表中的数据</span><br>    List&lt;CartVO&gt; carts = cartService.getVOByCids(uid, cids);<br><br>    <span class="hljs-comment">// 计算这些商品的总价</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">totalPrice</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (CartVO cart : carts) &#123;<br>        totalPrice += cart.getRealPrice() * cart.getNum();<br>    &#125;<br><br>    <span class="hljs-comment">// 创建订单数据对象</span><br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>    <span class="hljs-comment">// 补全数据：uid</span><br>    order.setUid(uid);<br>    <span class="hljs-comment">// 查询收货地址数据</span><br>    <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> addressService.getByAid(aid, uid);<br>    <span class="hljs-comment">// 补全数据：收货地址相关的6项</span><br>    order.setRecvName(address.getName());<br>    order.setRecvPhone(address.getPhone());<br>    order.setRecvProvince(address.getProvinceName());<br>    order.setRecvCity(address.getCityName());<br>    order.setRecvArea(address.getAreaName());<br>    order.setRecvAddress(address.getAddress());<br>    <span class="hljs-comment">// 补全数据：totalPrice</span><br>    order.setTotalPrice(totalPrice);<br>    <span class="hljs-comment">// 补全数据：status</span><br>    order.setStatus(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 补全数据：下单时间</span><br>    order.setOrderTime(now);<br>    <span class="hljs-comment">// 补全数据：日志</span><br>    order.setCreatedUser(username);<br>    order.setCreatedTime(now);<br>    order.setModifiedUser(username);<br>    order.setModifiedTime(now);<br>    <span class="hljs-comment">// 插入订单数据</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows1</span> <span class="hljs-operator">=</span> orderMapper.insertOrder(order);<br>    <span class="hljs-keyword">if</span> (rows1 != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertException</span>(<span class="hljs-string">&quot;插入订单数据时出现未知错误，请联系系统管理员&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历carts，循环插入订单商品数据</span><br>    <span class="hljs-keyword">for</span> (CartVO cart : carts) &#123;<br>        <span class="hljs-comment">// 创建订单商品数据</span><br>        <span class="hljs-type">OrderItem</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>();<br>        <span class="hljs-comment">// 补全数据：setOid(order.getOid())</span><br>        item.setOid(order.getOid());<br>        <span class="hljs-comment">// 补全数据：pid, title, image, price, num</span><br>        item.setPid(cart.getPid());<br>        item.setTitle(cart.getTitle());<br>        item.setImage(cart.getImage());<br>        item.setPrice(cart.getRealPrice());<br>        item.setNum(cart.getNum());<br>        <span class="hljs-comment">// 补全数据：4项日志</span><br>        item.setCreatedUser(username);<br>        item.setCreatedTime(now);<br>        item.setModifiedUser(username);<br>        item.setModifiedTime(now);<br>        <span class="hljs-comment">// 插入订单商品数据</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">rows2</span> <span class="hljs-operator">=</span> orderMapper.insertOrderItem(item);<br>        <span class="hljs-keyword">if</span> (rows2 != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertException</span>(<span class="hljs-string">&quot;插入订单商品数据时出现未知错误，请联系系统管理员&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回</span><br>    <span class="hljs-keyword">return</span> order;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在com.cy.store.service测试包下创建OrderServiceTests测试类，并添加create()方法进行功能测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Order;<br><span class="hljs-keyword">import</span> com.cy.store.service.ex.ServiceException;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IOrderService orderService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">aid</span> <span class="hljs-operator">=</span> <span class="hljs-number">21</span>;<br>            Integer[] cids = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;订单管理员&quot;</span>;<br>            <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderService.create(aid, cids, uid, username);<br>            System.out.println(order);<br>        &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>            System.out.println(e.getClass().getSimpleName());<br>            System.out.println(e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-订单-控制器层"><a href="#5-订单-控制器层" class="headerlink" title="5 订单-控制器层"></a>5 订单-控制器层</h3><h4 id="5-1-处理异常"><a href="#5-1-处理异常" class="headerlink" title="5.1 处理异常"></a>5.1 处理异常</h4><blockquote><p><strong>说明</strong>：无异常。</p></blockquote><h4 id="5-2-设计请求"><a href="#5-2-设计请求" class="headerlink" title="5.2 设计请求"></a>5.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/orders/create请求参数：Integer aid, Integer[] cids, HttpSession session请求类型：POST响应结果：JsonResult&lt;Order&gt;</code></pre><h4 id="5-3-处理请求"><a href="#5-3-处理请求" class="headerlink" title="5.3 处理请求"></a>5.3 处理请求</h4><p>1.在com.cy.store.controller包下创建OrderController类，并继承自BaseController类；并在类前添加@RequestMapping(“orders”)注解和@RestController注解；在类中声明IOrderService业务对象，然后添加@Autowired注解修饰；最后在类中添加处理请求的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.controller;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Order;<br><span class="hljs-keyword">import</span> com.cy.store.service.IOrderService;<br><span class="hljs-keyword">import</span> com.cy.store.util.JsonResult;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;orders&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IOrderService orderService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;create&quot;)</span><br>    <span class="hljs-keyword">public</span> JsonResult&lt;Order&gt; <span class="hljs-title function_">create</span><span class="hljs-params">(Integer aid, Integer[] cids, HttpSession session)</span> &#123;<br>        <span class="hljs-comment">// 从Session中取出uid和username</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromSession(session);<br>        <span class="hljs-comment">// 调用业务对象执行业务</span><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> orderService.create(aid, cids, uid, username);<br>        <span class="hljs-comment">// 返回成功与数据</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Order&gt;(OK, data);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.完成后启动项目，先登录再访问<a href="http://localhost:8080/orders/create?aid=21&amp;cids=4&amp;cids=5&amp;cids=6&amp;cids=7%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/orders/create?aid=21&amp;cids=4&amp;cids=5&amp;cids=6&amp;cids=7进行测试。</a></p><p><img src="1.png" alt="电脑商城09"></p><h3 id="6-订单-前端页面"><a href="#6-订单-前端页面" class="headerlink" title="6 订单-前端页面"></a>6 订单-前端页面</h3><p>1.在orderConfirm.xml页面中的body标签内的script标签内添加“在线支付”按钮的点击时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#btn-create-order&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/orders/create&quot;</span>,<br>        <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#form-create-order&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;创建订单成功！&quot;</span>);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json.<span class="hljs-property">data</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;创建订单失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;您的登录信息已经过期，请重新登录！HTTP响应码：&quot;</span> + xhr.<span class="hljs-property">status</span>);<br>            location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;login.html&quot;</span>;<br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>2.完成后启动项目，先登录再访问<a href="http://localhost:8080/web/cart.html%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%8B%BE%E9%80%89%E8%B4%AD%E8%BD%A6%E4%B8%AD%E7%9A%84%E5%95%86%E5%93%81%EF%BC%8C%E5%86%8D%E7%82%B9%E5%87%BB%E2%80%9C%E7%BB%93%E7%AE%97%E2%80%9D%E6%8C%89%E9%92%AE%EF%BC%8C%E6%9C%80%E5%90%8E%E5%9C%A8%E8%AE%A2%E5%8D%95%E7%A1%AE%E8%AE%A4%E9%A1%B5%E4%B8%AD%E7%82%B9%E5%87%BB%E2%80%9C%E5%9C%A8%E7%BA%BF%E6%94%AF%E4%BB%98%E2%80%9D%E6%8C%89%E9%92%AE%E8%BF%9B%E8%A1%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/cart.html页面，勾选购车中的商品，再点击“结算”按钮，最后在订单确认页中点击“在线支付”按钮进行功能的测试。</a></p><p><img src="2.png" alt="电脑商城09"></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>电脑商城</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>项目练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城08</title>
    <link href="/2023/05/08/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E08/"/>
    <url>/2023/05/08/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E08/</url>
    
    <content type="html"><![CDATA[<h2 id="加入购物车"><a href="#加入购物车" class="headerlink" title="加入购物车"></a>加入购物车</h2><h3 id="1-购物车-创建数据表"><a href="#1-购物车-创建数据表" class="headerlink" title="1 购物车-创建数据表"></a>1 购物车-创建数据表</h3><p>1.使用use命令先选中store数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USE store;<br></code></pre></td></tr></table></figure><p>2.在store数据库中创建t_cart用户数据表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE t_cart (<br>cid INT AUTO_INCREMENT COMMENT &#x27;购物车数据id&#x27;,<br>uid INT NOT NULL COMMENT &#x27;用户id&#x27;,<br>pid INT NOT NULL COMMENT &#x27;商品id&#x27;,<br>price BIGINT COMMENT &#x27;加入时商品单价&#x27;,<br>num INT COMMENT &#x27;商品数量&#x27;,<br>created_user VARCHAR(20) COMMENT &#x27;创建人&#x27;,<br>created_time DATETIME COMMENT &#x27;创建时间&#x27;,<br>modified_user VARCHAR(20) COMMENT &#x27;修改人&#x27;,<br>modified_time DATETIME COMMENT &#x27;修改时间&#x27;,<br>PRIMARY KEY (cid)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><h3 id="2-购物车-创建实体类"><a href="#2-购物车-创建实体类" class="headerlink" title="2 购物车-创建实体类"></a>2 购物车-创建实体类</h3><p>在com.cy.store.entity包下创建购物车的Cart实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.entity;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/** 购物车数据的实体类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cart</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer cid;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> Integer pid;<br>    <span class="hljs-keyword">private</span> Long price;<br>    <span class="hljs-keyword">private</span> Integer num;<br><br>    <span class="hljs-comment">// Generate: Getter and Setter、Generate hashCode() and equals()、toString()</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-购物车-添加购物车-持久层"><a href="#3-购物车-添加购物车-持久层" class="headerlink" title="3 购物车-添加购物车-持久层"></a>3 购物车-添加购物车-持久层</h3><h4 id="3-1-规划需要执行的SQL语句"><a href="#3-1-规划需要执行的SQL语句" class="headerlink" title="3.1 规划需要执行的SQL语句"></a>3.1 规划需要执行的SQL语句</h4><p>向购物车表中插入商品数据的SQL语句大致是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into t_cart (除了cid以外的字段列表) values (匹配的值列表);<br></code></pre></td></tr></table></figure><p>如果用户曾经将某个商品加入到购物车过，则点击“加入购物车”按钮只会对购物车中相同商品数量做递增操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update t_cart set num=? where cid=?<br></code></pre></td></tr></table></figure><p>关于判断“到底应该插入数据，还是修改数量”，可以通过“查询某用户是否已经添加某商品到购物车”来完成。如果查询到某结果，就表示该用户已经将该商品加入到购物车了，如果查询结果为null，则表示该用户没有添加过该商品。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t_cart where uid=? and pid=?<br></code></pre></td></tr></table></figure><h4 id="3-2-接口与抽象方法"><a href="#3-2-接口与抽象方法" class="headerlink" title="3.2 接口与抽象方法"></a>3.2 接口与抽象方法</h4><p>在com.cy.store.mapper包下创建CartMapper接口，并添加抽象相关的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.mapper;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Cart;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/** 处理购物车数据的持久层接口 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CartMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入购物车数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cart 购物车数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">insert</span><span class="hljs-params">(Cart cart)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改购物车数据中商品的数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cid 购物车数据的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> num 新的数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> modifiedUser 修改执行人</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> modifiedTime 修改时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">updateNumByCid</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(&quot;cid&quot;)</span> Integer cid,</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(&quot;num&quot;)</span> Integer num,</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(&quot;modifiedUser&quot;)</span> String modifiedUser,</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(&quot;modifiedTime&quot;)</span> Date modifiedTime)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户id和商品id查询购物车中的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> uid 用户id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pid 商品id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 匹配的购物车数据，如果该用户的购物车中并没有该商品，则返回null</span><br><span class="hljs-comment">     */</span><br>    Cart <span class="hljs-title function_">findByUidAndPid</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(&quot;uid&quot;)</span> Integer uid,</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(&quot;pid&quot;)</span> Integer pid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-配置SQL映射"><a href="#3-3-配置SQL映射" class="headerlink" title="3.3 配置SQL映射"></a>3.3 配置SQL映射</h4><p>1.在resources.mapper文件夹下创建CartMapper.xml文件，并在文件中配置以上三个方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.cy.store.mapper.CartMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CartEntityMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.cy.store.entity.Cart&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cid&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdUser&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdTime&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedUser&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedTime&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 插入购物车数据：Integer insert(Cart cart) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;cid&quot;</span>&gt;</span><br>        INSERT INTO t_cart (uid, pid, price, num, created_user, created_time, modified_user, modified_time)<br>        VALUES (#&#123;uid&#125;, #&#123;pid&#125;, #&#123;price&#125;, #&#123;num&#125;, #&#123;createdUser&#125;, #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 修改购物车数据中商品的数量：</span><br><span class="hljs-comment">         Integer updateNumByCid(</span><br><span class="hljs-comment">            @Param(&quot;cid&quot;) Integer cid,</span><br><span class="hljs-comment">            @Param(&quot;num&quot;) Integer num,</span><br><span class="hljs-comment">            @Param(&quot;modifiedUser&quot;) String modifiedUser,</span><br><span class="hljs-comment">            @Param(&quot;modifiedTime&quot;) Date modifiedTime) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateNumByCid&quot;</span>&gt;</span><br>        UPDATE<br>            t_cart<br>        SET<br>            num=#&#123;num&#125;,<br>            modified_user=#&#123;modifiedUser&#125;,<br>            modified_time=#&#123;modifiedTime&#125;<br>        WHERE<br>            cid=#&#123;cid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据用户id和商品id查询购物车中的数据：</span><br><span class="hljs-comment">         Cart findByUidAndPid(</span><br><span class="hljs-comment">            @Param(&quot;uid&quot;) Integer uid,</span><br><span class="hljs-comment">            @Param(&quot;pid&quot;) Integer pid) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUidAndPid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;CartEntityMap&quot;</span>&gt;</span><br>        SELECT<br>            *<br>        FROM<br>            t_cart<br>        WHERE<br>            uid=#&#123;uid&#125; AND pid=#&#123;pid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在com.cy.store.mapper包下创建CartMapperTests测试类，并添加测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.mapper;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Cart;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Product;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartMapperTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CartMapper cartMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Cart</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cart</span>();<br>        cart.setUid(<span class="hljs-number">1</span>);<br>        cart.setPid(<span class="hljs-number">2</span>);<br>        cart.setNum(<span class="hljs-number">3</span>);<br>        cart.setPrice(<span class="hljs-number">4L</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> cartMapper.insert(cart);<br>        System.out.println(<span class="hljs-string">&quot;rows=&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateNumByCid</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">cid</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">modifiedUser</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;购物车管理员&quot;</span>;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">modifiedTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> cartMapper.updateNumByCid(cid, num, modifiedUser, modifiedTime);<br>        System.out.println(<span class="hljs-string">&quot;rows=&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByUidAndPid</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-type">Cart</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> cartMapper.findByUidAndPid(uid, pid);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-购物车-添加购物车-业务层"><a href="#4-购物车-添加购物车-业务层" class="headerlink" title="4 购物车-添加购物车-业务层"></a>4 购物车-添加购物车-业务层</h3><h4 id="4-1-规划异常"><a href="#4-1-规划异常" class="headerlink" title="4.1 规划异常"></a>4.1 规划异常</h4><p>在插入数据时，可能抛出InsertException异常；在修改数据时，可能抛出UpdateException异常。如果不限制购物车中的记录的数量，则没有其它异常。</p><h4 id="4-2-接口与抽象方法"><a href="#4-2-接口与抽象方法" class="headerlink" title="4.2 接口与抽象方法"></a>4.2 接口与抽象方法</h4><p>在com.cy.store.service包下创建ICartService接口，并添加抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service;<br><br><span class="hljs-comment">/** 处理商品数据的业务层接口 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICartService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将商品添加到购物车</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> uid 当前登录用户的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pid 商品的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> amount 增加的数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 当前登录的用户名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToCart</span><span class="hljs-params">(Integer uid, Integer pid, Integer amount, String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-实现抽象方法"><a href="#4-3-实现抽象方法" class="headerlink" title="4.3 实现抽象方法"></a>4.3 实现抽象方法</h4><p>1.创建com.cy.store.service.impl.CartServiceImpl类，并实现ICartService接口，并在类的定义前添加@Service注解。在类中声明CartMapper持久层对象和IProductService处理商品数据的业务对象，并都添加@Autowired注修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.impl;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Cart;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Product;<br><span class="hljs-keyword">import</span> com.cy.store.mapper.CartMapper;<br><span class="hljs-keyword">import</span> com.cy.store.service.ICartService;<br><span class="hljs-keyword">import</span> com.cy.store.service.IProductService;<br><span class="hljs-keyword">import</span> com.cy.store.service.ex.InsertException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/** 处理购物车数据的业务层实现类 */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICartService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CartMapper cartMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IProductService productService;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在CartServiceImpl类中实现业务层ICartService接口中定义的抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToCart</span><span class="hljs-params">(Integer uid, Integer pid, Integer amount, String username)</span> &#123;<br>    <span class="hljs-comment">// 根据参数pid和uid查询购物车中的数据</span><br>    <span class="hljs-comment">// 判断查询结果是否为null</span><br>    <span class="hljs-comment">// 是：表示该用户并未将该商品添加到购物车</span><br>    <span class="hljs-comment">// -- 创建Cart对象</span><br>    <span class="hljs-comment">// -- 封装数据：uid,pid,amount</span><br>    <span class="hljs-comment">// -- 调用productService.findById(pid)查询商品数据，得到商品价格</span><br>    <span class="hljs-comment">// -- 封装数据：price</span><br>    <span class="hljs-comment">// -- 封装数据：4个日志</span><br>    <span class="hljs-comment">// -- 调用insert(cart)执行将数据插入到数据表中</span><br>    <span class="hljs-comment">// 否：表示该用户的购物车中已有该商品</span><br>    <span class="hljs-comment">// -- 从查询结果中获取购物车数据的id</span><br>    <span class="hljs-comment">// -- 从查询结果中取出原数量，与参数amount相加，得到新的数量</span><br>    <span class="hljs-comment">// -- 执行更新数量</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3.addToCart(Integer uid, Integer pid, Integer amount, String username)方法的代码具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToCart</span><span class="hljs-params">(Integer uid, Integer pid, Integer amount, String username)</span> &#123;<br>    <span class="hljs-comment">// 根据参数pid和uid查询购物车中的数据</span><br>    <span class="hljs-type">Cart</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> cartMapper.findByUidAndPid(uid, pid);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">cid</span> <span class="hljs-operator">=</span> result.getCid();<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-comment">// 判断查询结果是否为null</span><br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 是：表示该用户并未将该商品添加到购物车</span><br>        <span class="hljs-comment">// 创建Cart对象</span><br>        <span class="hljs-type">Cart</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cart</span>();<br>        <span class="hljs-comment">// 封装数据：uid,pid,amount</span><br>        cart.setUid(uid);<br>        cart.setPid(pid);<br>        cart.setNum(amount);<br>        <span class="hljs-comment">// 调用productService.findById(pid)查询商品数据，得到商品价格</span><br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productService.findById(pid);<br>        <span class="hljs-comment">// 封装数据：price</span><br>        cart.setPrice(product.getPrice());<br>        <span class="hljs-comment">// 封装数据：4个日志</span><br>        cart.setCreatedUser(username);<br>        cart.setCreatedTime(now);<br>        cart.setModifiedUser(username);<br>        cart.setModifiedTime(now);<br>        <span class="hljs-comment">// 调用insert(cart)执行将数据插入到数据表中</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> cartMapper.insert(cart);<br>        <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertException</span>(<span class="hljs-string">&quot;插入商品数据时出现未知错误，请联系系统管理员&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 否：表示该用户的购物车中已有该商品</span><br>        <span class="hljs-comment">// 从查询结果中获取购物车数据的id</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">cid</span> <span class="hljs-operator">=</span> result.getCid();<br>        <span class="hljs-comment">// 从查询结果中取出原数量，与参数amount相加，得到新的数量</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> result.getNum() + amount;<br>        <span class="hljs-comment">// 执行更新数量</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> cartMapper.updateNumByCid(cid, num, username, now);<br>        <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertException</span>(<span class="hljs-string">&quot;修改商品数量时出现未知错误，请联系系统管理员&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在com.cy.store.service包下创建测试类CartServiceTests类，并编写测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Product;<br><span class="hljs-keyword">import</span> com.cy.store.service.ex.ServiceException;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartServiceTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ICartService cartService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToCart</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000007</span>;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">amount</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Tom&quot;</span>;<br>            cartService.addToCart(uid, pid, amount, username);<br>            System.out.println(<span class="hljs-string">&quot;OK.&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>            System.out.println(e.getClass().getSimpleName());<br>            System.out.println(e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-购物车-添加购物车-控制器"><a href="#5-购物车-添加购物车-控制器" class="headerlink" title="5 购物车-添加购物车-控制器"></a>5 购物车-添加购物车-控制器</h3><h4 id="5-1-处理异常"><a href="#5-1-处理异常" class="headerlink" title="5.1 处理异常"></a>5.1 处理异常</h4><blockquote><p><strong>说明</strong>：无异常。</p></blockquote><h4 id="5-2-设计请求"><a href="#5-2-设计请求" class="headerlink" title="5.2 设计请求"></a>5.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/carts/add_to_cart请求参数：Integer pid, Integer amount, HttpSession session请求类型：POST响应结果：JsonResult&lt;Void&gt;</code></pre><h4 id="5-3-处理请求"><a href="#5-3-处理请求" class="headerlink" title="5.3 处理请求"></a>5.3 处理请求</h4><p>1.在com.cy.store.controller包下创建CartController类并继承自BaseController类，添加@RequestMapping(“carts”)和@RestController注解；在类中声明ICartService业务对象，并使用@Autowired注解修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.controller;<br><span class="hljs-keyword">import</span> com.cy.store.service.ICartService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;carts&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ICartService cartService;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.在CartController类中添加处理请求的addToCart()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;add_to_cart&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">addToCart</span><span class="hljs-params">(Integer pid, Integer amount, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">// 从Session中获取uid和username</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromSession(session);<br>    <span class="hljs-comment">// 调用业务对象执行添加到购物车</span><br>    cartService.addToCart(uid, pid, amount, username);<br>    <span class="hljs-comment">// 返回成功</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Void&gt;(OK);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，先登录再访问<a href="http://localhost:8080/carts/add_to_cart?pid=10000017&amp;amount=3%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/carts/add_to_cart?pid=10000017&amp;amount=3进行测试。</a></p><h3 id="6-购物车-添加购物车-前端页面"><a href="#6-购物车-添加购物车-前端页面" class="headerlink" title="6 购物车-添加购物车-前端页面"></a>6 购物车-添加购物车-前端页面</h3><p>1.在product.html页面中的body标签内的script标签里为“加入购物车”按钮添加点击事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#btn-add-to-cart&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/carts/add_to_cart&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">data</span>: &#123;<br>            <span class="hljs-string">&quot;pid&quot;</span>: id,<br>            <span class="hljs-string">&quot;amount&quot;</span>: $(<span class="hljs-string">&quot;#num&quot;</span>).<span class="hljs-title function_">val</span>()<br>        &#125;,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;增加成功！&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;增加失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;您的登录信息已经过期，请重新登录！HTTP响应码：&quot;</span> + xhr.<span class="hljs-property">status</span>);<br>            location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;login.html&quot;</span>;<br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>$.ajax函数中参数data提交请参数的方式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> <span class="hljs-number">1</span>.适用于参数较多，且都在同一个表单中<br>data: $(<span class="hljs-string">&quot;#form表单id属性值&quot;</span>).serialize()<br><span class="hljs-regexp">//</span> <span class="hljs-number">2</span>.仅适用于上传文件<br>data: new FormData($(<span class="hljs-string">&quot;##form表单id属性值&quot;</span>)[<span class="hljs-number">0</span>])<br><span class="hljs-regexp">//</span> <span class="hljs-number">3</span>.参数拼接形式提交<br>data: <span class="hljs-string">&quot;pid=10000005&amp;amount=3&quot;</span><br><span class="hljs-regexp">//</span> <span class="hljs-number">4</span>.使用JSON格式提交参数<br>data: &#123;<br><span class="hljs-string">&quot;pid&quot;</span>: <span class="hljs-number">10000005</span>,<br><span class="hljs-string">&quot;amount&quot;</span>: <span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>2.完成后启动项目，先登录再访问<a href="http://localhost:8080/web/index.html%E9%A1%B5%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/index.html页面进行测试。</a></p><p><img src="1.png" alt="电脑商城08"></p><h2 id="显示购物车列表"><a href="#显示购物车列表" class="headerlink" title="显示购物车列表"></a>显示购物车列表</h2><h3 id="1-购物车-显示列表-持久层"><a href="#1-购物车-显示列表-持久层" class="headerlink" title="1 购物车-显示列表-持久层"></a>1 购物车-显示列表-持久层</h3><h4 id="1-1-规划需要执行的SQL语句"><a href="#1-1-规划需要执行的SQL语句" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>显示某用户的购物车列表数据的SQL语句大致是。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>cid,<br>uid,<br>pid,<br>t_cart.price,<br>t_cart.num,<br>t_product.title,<br>t_product.price AS realPrice,<br>t_product.image<br>FROM<br>t_cart<br>LEFT JOIN t_product ON t_cart.pid = t_product.id <br>WHERE<br>uid = #&#123;uid&#125;<br>ORDER BY<br>t_cart.created_time DESC<br></code></pre></td></tr></table></figure><h4 id="1-2-接口与抽象方法"><a href="#1-2-接口与抽象方法" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>1.由于涉及多表关联查询，必然没有哪个实体类可以封装此次的查询结果，因此需要创建VO类。创建com.cy.store.vo.CartVO类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.vo;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/** 购物车数据的Value Object类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer cid;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> Integer pid;<br>    <span class="hljs-keyword">private</span> Long price;<br>    <span class="hljs-keyword">private</span> Integer num;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> Long realPrice;<br>    <span class="hljs-keyword">private</span> String image;<br>    <br>    <span class="hljs-comment">// Generate: Getter and Setter、Generate hashCode() and equals()、toString()</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.在CartMapper接口中添加抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询某用户的购物车数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 该用户的购物车数据的列表</span><br><span class="hljs-comment"> */</span><br>List&lt;CartVO&gt; <span class="hljs-title function_">findVOByUid</span><span class="hljs-params">(Integer uid)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3-配置SQL映射"><a href="#1-3-配置SQL映射" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在CartMapper.xml文件中添加findVOByUid()方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 查询某用户的购物车数据：List&lt;CartVO&gt; findVOByUid(Integer uid) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findVOByUid&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.cy.store.vo.CartVO&quot;</span>&gt;</span><br>    SELECT<br>        cid,<br>        uid,<br>        pid,<br>        t_cart.price,<br>        t_cart.num,<br>        t_product.title,<br>        t_product.price AS realPrice,<br>        t_product.image<br>    FROM<br>        t_cart<br>        LEFT JOIN t_product ON t_cart.pid = t_product.id <br>    WHERE<br>        uid = #&#123;uid&#125;<br>    ORDER BY<br>        t_cart.created_time DESC<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在CartMapperTests测试类中添加findVOByUid()方法的测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findVOByUid</span><span class="hljs-params">()</span> &#123;<br>    List&lt;CartVO&gt; list = cartMapper.findVOByUid(<span class="hljs-number">31</span>);<br>    System.out.println(list);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-购物车-显示列表-业务层"><a href="#2-购物车-显示列表-业务层" class="headerlink" title="2 购物车-显示列表-业务层"></a>2 购物车-显示列表-业务层</h3><h4 id="2-1-规划异常"><a href="#2-1-规划异常" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><blockquote><p><strong>说明</strong>：无异常。</p></blockquote><h4 id="2-2-接口与抽象方法"><a href="#2-2-接口与抽象方法" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在ICartService接口中添加findVOByUid()抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询某用户的购物车数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 该用户的购物车数据的列表</span><br><span class="hljs-comment"> */</span><br>List&lt;CartVO&gt; <span class="hljs-title function_">getVOByUid</span><span class="hljs-params">(Integer uid)</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-实现抽象方法"><a href="#2-3-实现抽象方法" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在CartServiceImpl类中重写业务接口中的抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;CartVO&gt; <span class="hljs-title function_">getVOByUid</span><span class="hljs-params">(Integer uid)</span> &#123;<br>    <span class="hljs-keyword">return</span> cartMapper.findVOByUid(uid);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在CartServiceTests测试类中添加getVOByUid()测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getVOByUid</span><span class="hljs-params">()</span> &#123;<br>    List&lt;CartVO&gt; list = cartService.getVOByUid(<span class="hljs-number">31</span>);<br>    System.out.println(<span class="hljs-string">&quot;count=&quot;</span> + list.size());<br>    <span class="hljs-keyword">for</span> (CartVO item : list) &#123;<br>        System.out.println(item);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-购物车-显示列表-控制器"><a href="#3-购物车-显示列表-控制器" class="headerlink" title="3 购物车-显示列表-控制器"></a>3 购物车-显示列表-控制器</h3><h4 id="3-1-处理异常"><a href="#3-1-处理异常" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><blockquote><p><strong>说明</strong>：无异常。</p></blockquote><h4 id="3-2-设计请求"><a href="#3-2-设计请求" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/carts/请求参数：HttpSession session请求类型：GET响应结果：JsonResult&lt;List&lt;CartVO&gt;&gt;</code></pre><h4 id="3-3-处理请求"><a href="#3-3-处理请求" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在CartController类中编写处理请求的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&#123;&quot;&quot;, &quot;/&quot;&#125;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;List&lt;CartVO&gt;&gt; <span class="hljs-title function_">getVOByUid</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>    <span class="hljs-comment">// 从Session中获取uid</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>    <span class="hljs-comment">// 调用业务对象执行查询数据</span><br>    List&lt;CartVO&gt; data = cartService.getVOByUid(uid);<br>    <span class="hljs-comment">// 返回成功与数据</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;List&lt;CartVO&gt;&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.完成后启动项目，先登录再访问<a href="http://localhost:8080/carts%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/carts请求进行测试。</a></p><h3 id="4-购物车-显示列表-前端页面"><a href="#4-购物车-显示列表-前端页面" class="headerlink" title="4 购物车-显示列表-前端页面"></a>4 购物车-显示列表-前端页面</h3><p>1.将cart.html页面的head头标签内引入的cart.js文件注释掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/cart.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span> --&gt;<br></code></pre></td></tr></table></figure><p>2.给form标签添加action=”orderConfirm.html”属性、tbody标签添加id=”cart-list”属性、结算按钮的类型改为type=”button”值。如果以上属性值已经添加过无需重复添加。</p><p>3.在cart.html页面body标签内的script标签中编写展示购物车列表的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">showCartList</span>();<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showCartList</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#cart-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/carts&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">let</span> list = json.<span class="hljs-property">data</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                <span class="hljs-keyword">let</span> tr = <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;input name=&quot;cids&quot; value=&quot;#&#123;cid&#125;&quot; type=&quot;checkbox&quot; class=&quot;ckitem&quot; /&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;td&gt;&lt;img src=&quot;..#&#123;image&#125;collect.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;td&gt;#&#123;title&#125;#&#123;msg&#125;&lt;/td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;td&gt;¥&lt;span id=&quot;price-#&#123;cid&#125;&quot;&gt;#&#123;realPrice&#125;&lt;/span&gt;&lt;/td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;input type=&quot;button&quot; value=&quot;-&quot; class=&quot;num-btn&quot; onclick=&quot;reduceNum(1)&quot; /&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;input id=&quot;num-#&#123;cid&#125;&quot; type=&quot;text&quot; size=&quot;2&quot; readonly=&quot;readonly&quot; class=&quot;num-text&quot; value=&quot;#&#123;num&#125;&quot;&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;input class=&quot;num-btn&quot; type=&quot;button&quot; value=&quot;+&quot; onclick=&quot;addNum(#&#123;cid&#125;)&quot; /&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;td&gt;¥&lt;span id=&quot;total-price-#&#123;cid&#125;&quot;&gt;#&#123;totalPrice&#125;&lt;/span&gt;&lt;/td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;input type=&quot;button&quot; onclick=&quot;delCartItem(this)&quot; class=&quot;cart-del btn btn-default btn-xs&quot; value=&quot;删除&quot; /&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>                tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;cid&#125;/g</span>, list[i].<span class="hljs-property">cid</span>);<br>                tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;title&#125;/g</span>, list[i].<span class="hljs-property">title</span>);<br>                tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;image&#125;/g</span>, list[i].<span class="hljs-property">image</span>);<br>                tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;realPrice&#125;/g</span>, list[i].<span class="hljs-property">realPrice</span>);<br>                tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;num&#125;/g</span>, list[i].<span class="hljs-property">num</span>);<br>                tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;totalPrice&#125;/g</span>, list[i].<span class="hljs-property">realPrice</span> * list[i].<span class="hljs-property">num</span>);<br><br>                <span class="hljs-keyword">if</span> (list[i].<span class="hljs-property">realPrice</span> &lt; list[i].<span class="hljs-property">price</span>) &#123;<br>                    tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;msg&#125;/g</span>, <span class="hljs-string">&quot;比加入时降价&quot;</span> + (list[i].<span class="hljs-property">price</span> - list[i].<span class="hljs-property">realPrice</span>) + <span class="hljs-string">&quot;元&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;msg&#125;/g</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                &#125;<br>                $(<span class="hljs-string">&quot;#cart-list&quot;</span>).<span class="hljs-title function_">append</span>(tr);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>4.完成后启动项目，先登录再访问<a href="http://localhost:8080/web/cart.html%E9%A1%B5%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/cart.html页面进行测试。</a></p><p><img src="2.png" alt="电脑商城08"></p><h2 id="增加商品数量"><a href="#增加商品数量" class="headerlink" title="增加商品数量"></a>增加商品数量</h2><h3 id="1-购物车-增加商品数量-持久层"><a href="#1-购物车-增加商品数量-持久层" class="headerlink" title="1 购物车-增加商品数量-持久层"></a>1 购物车-增加商品数量-持久层</h3><h4 id="1-1-规划需要执行的SQL语句-1"><a href="#1-1-规划需要执行的SQL语句-1" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>1.首先进行查询需要操作的购物车数据信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM t_cart WHERE cid=?<br></code></pre></td></tr></table></figure><p>2.然后计算出新的商品数量值，如果满足更新条件则执行更新操作。此SQL语句无需重复开发。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE t_cart SET num=?, modified_user=?, modified_time=? WHERE cid=?<br></code></pre></td></tr></table></figure><h4 id="1-2-接口与抽象方法-1"><a href="#1-2-接口与抽象方法-1" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>在CartMapper接口中添加抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据购物车数据id查询购物车数据详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cid 购物车数据id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 匹配的购物车数据详情，如果没有匹配的数据则返回null</span><br><span class="hljs-comment"> */</span><br>Cart <span class="hljs-title function_">findByCid</span><span class="hljs-params">(Integer cid)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3-配置SQL映射-1"><a href="#1-3-配置SQL映射-1" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在CartMapper文件中添加findByCid(Integer cid)方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 根据购物车数据id查询购物车数据详情：Cart findByCid(Integer cid) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByCid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;CartEntityMap&quot;</span>&gt;</span><br>    SELECT<br>   *<br>    FROM<br>    t_cart<br>    WHERE<br>    cid = #&#123;cid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在CartMapperTests测试类中添加findByCid()测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByCid</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">cid</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><span class="hljs-type">Cart</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> cartMapper.findByCid(cid);<br>System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-购物车-增加商品数量-业务层"><a href="#2-购物车-增加商品数量-业务层" class="headerlink" title="2 购物车-增加商品数量-业务层"></a>2 购物车-增加商品数量-业务层</h3><h4 id="2-1-规划异常-1"><a href="#2-1-规划异常-1" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>1.如果尝试访问的购物车数据不存在，则抛出CartNotFoundException异常。创建com.cy.store.service.ex.CartNotFoundException类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 购物车数据不存在的异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartNotFoundException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br><span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.如果尝试访问的数据并不是当前登录用户的数据，则抛出AccessDeniedException异常。此异常类无需再次创建。</p><p>3.最终执行更新操作时，可能会抛出UpdateException异常。此异常类无需再次创建。</p><h4 id="2-2-接口与抽象方法-1"><a href="#2-2-接口与抽象方法-1" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在业务层ICartService接口中添加addNum()抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将购物车中某商品的数量加1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cid 购物车数量的id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 当前登录的用户的id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 当前登录的用户名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 增加成功后新的数量</span><br><span class="hljs-comment"> */</span><br>Integer <span class="hljs-title function_">addNum</span><span class="hljs-params">(Integer cid, Integer uid, String username)</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-实现抽象方法-1"><a href="#2-3-实现抽象方法-1" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在CartServiceImpl类中，实现接口中的抽象方法并规划业务逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">addNum</span><span class="hljs-params">(Integer cid, Integer uid, String username)</span> &#123;<br><span class="hljs-comment">// 调用findByCid(cid)根据参数cid查询购物车数据</span><br><span class="hljs-comment">// 判断查询结果是否为null</span><br><span class="hljs-comment">// 是：抛出CartNotFoundException</span><br><br><span class="hljs-comment">// 判断查询结果中的uid与参数uid是否不一致</span><br><span class="hljs-comment">// 是：抛出AccessDeniedException</span><br><br><span class="hljs-comment">// 可选：检查商品的数量是否大于多少(适用于增加数量)或小于多少(适用于减少数量)</span><br><span class="hljs-comment">// 根据查询结果中的原数量增加1得到新的数量num</span><br><br><span class="hljs-comment">// 创建当前时间对象，作为modifiedTime</span><br><span class="hljs-comment">// 调用updateNumByCid(cid, num, modifiedUser, modifiedTime)执行修改数量</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.实现addNum()方法中的业务逻辑代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">addNum</span><span class="hljs-params">(Integer cid, Integer uid, String username)</span> &#123;<br>    <span class="hljs-comment">// 调用findByCid(cid)根据参数cid查询购物车数据</span><br>    <span class="hljs-type">Cart</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> cartMapper.findByCid(cid);<br>    <span class="hljs-comment">// 判断查询结果是否为null</span><br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 是：抛出CartNotFoundException</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CartNotFoundException</span>(<span class="hljs-string">&quot;尝试访问的购物车数据不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断查询结果中的uid与参数uid是否不一致</span><br>    <span class="hljs-keyword">if</span> (!result.getUid().equals(uid)) &#123;<br>        <span class="hljs-comment">// 是：抛出AccessDeniedException</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedException</span>(<span class="hljs-string">&quot;非法访问&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 可选：检查商品的数量是否大于多少(适用于增加数量)或小于多少(适用于减少数量)</span><br>    <span class="hljs-comment">// 根据查询结果中的原数量增加1得到新的数量num</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> result.getNum() + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 创建当前时间对象，作为modifiedTime</span><br>    <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-comment">// 调用updateNumByCid(cid, num, modifiedUser, modifiedTime)执行修改数量</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> cartMapper.updateNumByCid(cid, num, username, now);<br>    <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertException</span>(<span class="hljs-string">&quot;修改商品数量时出现未知错误，请联系系统管理员&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 返回新的数量</span><br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在CartServiceTests测试类中添加addNum()测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNum</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">cid</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;管理员&quot;</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> cartService.addNum(cid, uid, username);<br>        System.out.println(<span class="hljs-string">&quot;OK. New num=&quot;</span> + num);<br>    &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>        System.out.println(e.getClass().getSimpleName());<br>        System.out.println(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-购物车-增加商品数量-控制器"><a href="#3-购物车-增加商品数量-控制器" class="headerlink" title="3 购物车-增加商品数量-控制器"></a>3 购物车-增加商品数量-控制器</h3><h4 id="3-1-处理异常-1"><a href="#3-1-处理异常-1" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p>在BaseController类中添加CartNotFoundException异常类的统一管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> CartNotFoundException) &#123;<br>    result.setState(<span class="hljs-number">4007</span>);<br>&#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h4 id="3-2-设计请求-1"><a href="#3-2-设计请求-1" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/carts/&#123;cid&#125;/num/add请求参数：@PathVariable(&quot;cid&quot;) Integer cid, HttpSession session请求类型：POST响应结果：JsonResult&lt;Integer&gt;</code></pre><h4 id="3-3-处理请求-1"><a href="#3-3-处理请求-1" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在CartController类中添加处理请求的addNum()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;&#123;cid&#125;/num/add&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Integer&gt; <span class="hljs-title function_">addNum</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;cid&quot;)</span> Integer cid, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">// 从Session中获取uid和username</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromSession(session);<br>    <span class="hljs-comment">// 调用业务对象执行增加数量</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> cartService.addNum(cid, uid, username);<br>    <span class="hljs-comment">// 返回成功</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Integer&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.完成后启动项目，先登录再访问<a href="http://localhost:8080/carts/6/num/add%E9%A1%B5%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/carts/6/num/add页面进行测试。</a></p><p><img src="3.png" alt="电脑商城08"></p><h3 id="4-购物车-增加商品数量-前端页面"><a href="#4-购物车-增加商品数量-前端页面" class="headerlink" title="4 购物车-增加商品数量-前端页面"></a>4 购物车-增加商品数量-前端页面</h3><p>1.首先确定在showCartList()函数中动态拼接的增加购物车按钮是绑定了addNum()事件，如果已经添加无需重复添加。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;num-btn&quot;</span> type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;+&quot;</span> onclick=<span class="hljs-string">&quot;addNum(#&#123;cid&#125;)&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>2.在script标签中定义addNum()函数并编写增加购物车数量的逻辑代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addNum</span>(<span class="hljs-params">cid</span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/carts/&quot;</span> + cid + <span class="hljs-string">&quot;/num/add&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-comment">// showCartList();</span><br>                $(<span class="hljs-string">&quot;#num-&quot;</span> + cid).<span class="hljs-title function_">val</span>(json.<span class="hljs-property">data</span>);<br>                <span class="hljs-keyword">let</span> price = $(<span class="hljs-string">&quot;#price-&quot;</span> + cid).<span class="hljs-title function_">html</span>();<br>                <span class="hljs-keyword">let</span> totalPrice = price * json.<span class="hljs-property">data</span>;<br>                $(<span class="hljs-string">&quot;#total-price-&quot;</span> + cid).<span class="hljs-title function_">html</span>(totalPrice);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;增加商品数量失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;您的登录信息已经过期，请重新登录！HTTP响应码：&quot;</span> + xhr.<span class="hljs-property">status</span>);<br>            location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;login.html&quot;</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，先登录再访问<a href="http://localhost:8080/web/cart.html%E9%A1%B5%E9%9D%A2%E7%82%B9%E5%87%BB%E2%80%9C+%E2%80%9D%E6%8C%89%E9%92%AE%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/cart.html页面点击“+”按钮进行测试。</a></p><h2 id="显示勾选的购物车数据"><a href="#显示勾选的购物车数据" class="headerlink" title="显示勾选的购物车数据"></a>显示勾选的购物车数据</h2><h3 id="1-显示确认订单页-显示勾选的购物车数据-持久层"><a href="#1-显示确认订单页-显示勾选的购物车数据-持久层" class="headerlink" title="1 显示确认订单页-显示勾选的购物车数据-持久层"></a>1 显示确认订单页-显示勾选的购物车数据-持久层</h3><h4 id="1-1-规划需要执行的SQL语句-2"><a href="#1-1-规划需要执行的SQL语句-2" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>在“确认订单页”显示的商品信息，应来自前序页面（购物车列表）中勾选的数据，所以显示的信息其实是购物车中的数据。到底需要显示哪些取决于用户的勾选操作，当用户勾选了若干条购物车数据后，这些数据的id应传递到当前“确认订单页”中，该页面根据这些id获取需要显示的数据列表。</p><p>所以在持久层需要完成“根据若干个不确定的id值，查询购物车数据表，显示购物车中的数据信息”。则需要执行的SQL语句大致是。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>cid,<br>uid,<br>pid,<br>t_cart.price,<br>t_cart.num,<br>t_product.title,<br>t_product.price AS realPrice,<br>t_product.image<br>FROM<br>t_cart<br>LEFT JOIN t_product ON t_cart.pid = t_product.id <br>WHERE<br>cid IN (?, ?, ?)<br>ORDER BY<br>t_cart.created_time DESC<br></code></pre></td></tr></table></figure><h4 id="1-2-接口与抽象方法-2"><a href="#1-2-接口与抽象方法-2" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>在CartMapper接口中添加findVOByCids(Integer[] cids)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据若干个购物车数据id查询详情的列表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cids 若干个购物车数据id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 匹配的购物车数据详情的列表</span><br><span class="hljs-comment"> */</span><br>List&lt;CartVO&gt; <span class="hljs-title function_">findVOByCids</span><span class="hljs-params">(Integer[] cids)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3-配置SQL映射-2"><a href="#1-3-配置SQL映射-2" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在CartMapper.xml文件中添加SQL语句的映射配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 根据若干个购物车数据id查询详情的列表：List&lt;CartVO&gt; findVOByCids(Integer[] cids) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findVOByCids&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.cy.store.vo.CartVO&quot;</span>&gt;</span><br>    SELECT<br>        cid,<br>        uid,<br>        pid,<br>        t_cart.price,<br>        t_cart.num,<br>        t_product.title,<br>        t_product.price AS realPrice,<br>        t_product.image<br>    FROM<br>        t_cart<br>            LEFT JOIN t_product ON t_cart.pid = t_product.id<br>    WHERE<br>        cid IN (<br>            <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;array&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;cid&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>                #&#123;cid&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>        )<br>    ORDER BY<br>        t_cart.created_time DESC<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在CartMapperTests测试类中添加findVOByCids()测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findVOByCids</span><span class="hljs-params">()</span> &#123;<br>    Integer[] cids = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br>    List&lt;CartVO&gt; list = cartMapper.findVOByCids(cids);<br>    System.out.println(<span class="hljs-string">&quot;count=&quot;</span> + list.size());<br>    <span class="hljs-keyword">for</span> (CartVO item : list) &#123;<br>        System.out.println(item);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-显示确认订单页-显示勾选的购物车数据-业务层"><a href="#2-显示确认订单页-显示勾选的购物车数据-业务层" class="headerlink" title="2 显示确认订单页-显示勾选的购物车数据-业务层"></a>2 显示确认订单页-显示勾选的购物车数据-业务层</h3><h4 id="2-1-规划异常-2"><a href="#2-1-规划异常-2" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><blockquote><p><strong>说明</strong>：无异常。</p></blockquote><h4 id="2-2-接口与抽象方法-2"><a href="#2-2-接口与抽象方法-2" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在ICartService接口中添加getVOByCids()抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据若干个购物车数据id查询详情的列表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 当前登录的用户的id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cids 若干个购物车数据id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 匹配的购物车数据详情的列表</span><br><span class="hljs-comment"> */</span><br>List&lt;CartVO&gt; <span class="hljs-title function_">getVOByCids</span><span class="hljs-params">(Integer uid, Integer[] cids)</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-实现抽象方法-2"><a href="#2-3-实现抽象方法-2" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在CartServiceImpl类中重写业务接口中的抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;CartVO&gt; <span class="hljs-title function_">getVOByCids</span><span class="hljs-params">(Integer uid, Integer[] cids)</span> &#123;<br>    List&lt;CartVO&gt; list = cartMapper.findVOByCids(cids);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    for (CartVO cart : list) &#123;</span><br><span class="hljs-comment">if (!cart.getUid().equals(uid)) &#123;</span><br><span class="hljs-comment">list.remove(cart);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br>    Iterator&lt;CartVO&gt; it = list.iterator();<br>    <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>        <span class="hljs-type">CartVO</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> it.next();<br>        <span class="hljs-keyword">if</span> (!cart.getUid().equals(uid)) &#123;<br>            it.remove();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在CartServiceTests测试类中添加getVOByCids()测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getVOByCids</span><span class="hljs-params">()</span> &#123;<br>    Integer[] cids = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>;<br>    List&lt;CartVO&gt; list = cartService.getVOByCids(uid, cids);<br>    System.out.println(<span class="hljs-string">&quot;count=&quot;</span> + list.size());<br>    <span class="hljs-keyword">for</span> (CartVO item : list) &#123;<br>        System.out.println(item);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-显示确认订单页-显示勾选的购物车数据-控制器"><a href="#3-显示确认订单页-显示勾选的购物车数据-控制器" class="headerlink" title="3 显示确认订单页-显示勾选的购物车数据-控制器"></a>3 显示确认订单页-显示勾选的购物车数据-控制器</h3><h4 id="3-1-处理异常-2"><a href="#3-1-处理异常-2" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p><strong>说明</strong>：无异常。</p><h4 id="3-2-设计请求-2"><a href="#3-2-设计请求-2" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/carts/list请求参数：Integer[] cids, HttpSession session请求类型：GET响应结果：JsonResult&lt;List&lt;CartVO&gt;&gt;</code></pre><h4 id="3-3-处理请求-2"><a href="#3-3-处理请求-2" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在CartController类中添加处理请求的getVOByCids()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;list&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;List&lt;CartVO&gt;&gt; <span class="hljs-title function_">getVOByCids</span><span class="hljs-params">(Integer[] cids, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">// 从Session中获取uid</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>    <span class="hljs-comment">// 调用业务对象执行查询数据</span><br>    List&lt;CartVO&gt; data = cartService.getVOByCids(uid, cids);<br>    <span class="hljs-comment">// 返回成功与数据</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.完成后启动项目，先登录再访问<a href="http://localhost:8080/carts/list?cids=7&amp;cids=8&amp;cids=13&amp;cids=14&amp;cids=17%E5%9C%B0%E5%9D%80%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/carts/list?cids=7&amp;cids=8&amp;cids=13&amp;cids=14&amp;cids=17地址进行测试。</a></p><h3 id="4-显示确认订单页-前端页面"><a href="#4-显示确认订单页-前端页面" class="headerlink" title="4 显示确认订单页-前端页面"></a>4 显示确认订单页-前端页面</h3><h4 id="4-1-显示勾选的购物车数据-前端页面"><a href="#4-1-显示勾选的购物车数据-前端页面" class="headerlink" title="4.1 显示勾选的购物车数据-前端页面"></a>4.1 显示勾选的购物车数据-前端页面</h4><p>1.在orderConfirm.html页面的head标签里注释掉引入外部的orderConfirm.js文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/orderConfirm.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span> --&gt;<br></code></pre></td></tr></table></figure><p>2.在orderConfirm.html页面中检查必要控件的属性是否添加，如果已添加无需重复添加。</p><p>3.在orderConfirm.html页面中的body标签内的最后添加srcipt标签并在标签内部添加处理购物车“订单商品信息”列表展示的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// showAddressList();</span><br>    <span class="hljs-title function_">showCartList</span>();<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showCartList</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#cart-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/carts/list&quot;</span>,<br>        <span class="hljs-attr">data</span>: location.<span class="hljs-property">search</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>),<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">let</span> list = json.<span class="hljs-property">data</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;count=&quot;</span> + list.<span class="hljs-property">length</span>);<br>            <span class="hljs-keyword">let</span> allCount = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">let</span> allPrice = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[i].<span class="hljs-property">title</span>);<br>                <span class="hljs-keyword">let</span> tr = <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;td&gt;&lt;img src=&quot;..#&#123;image&#125;collect.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;td&gt;&lt;input type=&quot;hidden&quot; name=&quot;cids&quot; value=&quot;#&#123;cid&#125;&quot; /&gt;#&#123;title&#125;&lt;/td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;td&gt;¥&lt;span&gt;#&#123;realPrice&#125;&lt;/span&gt;&lt;/td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;td&gt;#&#123;num&#125;&lt;/td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;td&gt;¥&lt;span&gt;#&#123;totalPrice&#125;&lt;/span&gt;&lt;/td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br><br>                tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;cid&#125;/g</span>, list[i].<span class="hljs-property">cid</span>);<br>                tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;image&#125;/g</span>, list[i].<span class="hljs-property">image</span>);<br>                tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;title&#125;/g</span>, list[i].<span class="hljs-property">title</span>);<br>                tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;realPrice&#125;/g</span>, list[i].<span class="hljs-property">realPrice</span>);<br>                tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;num&#125;/g</span>, list[i].<span class="hljs-property">num</span>);<br>                tr = tr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;totalPrice&#125;/g</span>, list[i].<span class="hljs-property">realPrice</span> * list[i].<span class="hljs-property">num</span>);<br><br>                $(<span class="hljs-string">&quot;#cart-list&quot;</span>).<span class="hljs-title function_">append</span>(tr);<br><br>                allCount += list[i].<span class="hljs-property">num</span>;<br>                allPrice += list[i].<span class="hljs-property">realPrice</span> * list[i].<span class="hljs-property">num</span>;<br>            &#125;<br>            $(<span class="hljs-string">&quot;#all-count&quot;</span>).<span class="hljs-title function_">html</span>(allCount);<br>            $(<span class="hljs-string">&quot;#all-price&quot;</span>).<span class="hljs-title function_">html</span>(allPrice);<br>        &#125;<br>    &#125;);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>4.完成后启动项目，先登录再访问<a href="http://localhost:8080/web/cart.html%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%8B%BE%E9%80%89%E5%95%86%E5%93%81%E5%86%8D%E7%82%B9%E5%87%BB%E2%80%9C%E7%BB%93%E7%AE%97%E2%80%9D%E6%8C%89%E9%92%AE%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/cart.html页面，勾选商品再点击“结算”按钮进行测试。</a></p><h4 id="4-2-显示选择收货地址-前端页面"><a href="#4-2-显示选择收货地址-前端页面" class="headerlink" title="4.2 显示选择收货地址-前端页面"></a>4.2 显示选择收货地址-前端页面</h4><p>1.在orderConfirm.html页面中的body标签内的srcipt标签中添加获取收货地址列表方法的定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">showAddressList</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#address-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/addresses&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">let</span> list = json.<span class="hljs-property">data</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;count=&quot;</span> + list.<span class="hljs-property">length</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[i].<span class="hljs-property">name</span>);<br>                <span class="hljs-keyword">let</span> opt = <span class="hljs-string">&#x27;&lt;option value=&quot;#&#123;aid&#125;&quot;&gt;#&#123;name&#125; | #&#123;tag&#125; | #&#123;province&#125;#&#123;city&#125;#&#123;area&#125;#&#123;address&#125; | #&#123;phone&#125;&lt;/option&gt;&#x27;</span>;<br><br>                opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;aid&#125;/g</span>, list[i].<span class="hljs-property">aid</span>);<br>                opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;tag&#125;/g</span>, list[i].<span class="hljs-property">tag</span>);<br>                opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;name&#125;&quot;</span>, list[i].<span class="hljs-property">name</span>);<br>                opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;province&#125;&quot;</span>, list[i].<span class="hljs-property">provinceName</span>);<br>                opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;city&#125;&quot;</span>, list[i].<span class="hljs-property">cityName</span>);<br>                opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;area&#125;&quot;</span>, list[i].<span class="hljs-property">areaName</span>);<br>                opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;address&#125;&quot;</span>, list[i].<span class="hljs-property">address</span>);<br>                opt = opt.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;phone&#125;&quot;</span>, list[i].<span class="hljs-property">phone</span>);<br><br>                $(<span class="hljs-string">&quot;#address-list&quot;</span>).<span class="hljs-title function_">append</span>(opt);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在orderConfirm.html页面中的body标签内的srcipt标签中添加展示收货地址列表方法的调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">showAddressList</span>();<br>        <span class="hljs-title function_">showCartList</span>();<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，先登录再访问<a href="http://localhost:8080/web/orderConfirm.html%E9%A1%B5%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/orderConfirm.html页面进行测试。</a></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>电脑商城</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>项目练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城07</title>
    <link href="/2023/05/08/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E07/"/>
    <url>/2023/05/08/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E07/</url>
    
    <content type="html"><![CDATA[<h2 id="商品热销排行"><a href="#商品热销排行" class="headerlink" title="商品热销排行"></a>商品热销排行</h2><h3 id="1-商品-创建数据表"><a href="#1-商品-创建数据表" class="headerlink" title="1 商品-创建数据表"></a>1 商品-创建数据表</h3><p>1.使用use命令先选中store数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USE store;<br></code></pre></td></tr></table></figure><p>2.在store数据库中创建t_product数据表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE t_product (<br>  id int(20) NOT NULL COMMENT &#x27;商品id&#x27;,<br>  category_id int(20) DEFAULT NULL COMMENT &#x27;分类id&#x27;,<br>  item_type varchar(100) DEFAULT NULL COMMENT &#x27;商品系列&#x27;,<br>  title varchar(100) DEFAULT NULL COMMENT &#x27;商品标题&#x27;,<br>  sell_point varchar(150) DEFAULT NULL COMMENT &#x27;商品卖点&#x27;,<br>  price bigint(20) DEFAULT NULL COMMENT &#x27;商品单价&#x27;,<br>  num int(10) DEFAULT NULL COMMENT &#x27;库存数量&#x27;,<br>  image varchar(500) DEFAULT NULL COMMENT &#x27;图片路径&#x27;,<br>  status int(1) DEFAULT &#x27;1&#x27; COMMENT &#x27;商品状态  1：上架   2：下架   3：删除&#x27;,<br>  priority int(10) DEFAULT NULL COMMENT &#x27;显示优先级&#x27;,<br>  created_time datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;,<br>  modified_time datetime DEFAULT NULL COMMENT &#x27;最后修改时间&#x27;,<br>  created_user varchar(50) DEFAULT NULL COMMENT &#x27;创建人&#x27;,<br>  modified_user varchar(50) DEFAULT NULL COMMENT &#x27;最后修改人&#x27;,<br>  PRIMARY KEY (id)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><h3 id="2-商品-创建实体类"><a href="#2-商品-创建实体类" class="headerlink" title="2 商品-创建实体类"></a>2 商品-创建实体类</h3><p>创建com.cy.store.entity.Product类，并继承自BaseEntity类。在类中声明与数据表中对应的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.entity;<br><br><span class="hljs-comment">/** 商品数据的实体类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> Integer categoryId;<br>    <span class="hljs-keyword">private</span> String itemType;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String sellPoint;<br>    <span class="hljs-keyword">private</span> Long price;<br>    <span class="hljs-keyword">private</span> Integer num;<br>    <span class="hljs-keyword">private</span> String image;<br>    <span class="hljs-keyword">private</span> Integer status;<br>    <span class="hljs-keyword">private</span> Integer priority;<br><br>    <span class="hljs-comment">// Generate: Getter and Setter、Generate hashCode() and equals()、toString()</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-商品-热销排行-持久层"><a href="#3-商品-热销排行-持久层" class="headerlink" title="3 商品-热销排行-持久层"></a>3 商品-热销排行-持久层</h3><h4 id="3-1-规划需要执行的SQL语句"><a href="#3-1-规划需要执行的SQL语句" class="headerlink" title="3.1 规划需要执行的SQL语句"></a>3.1 规划需要执行的SQL语句</h4><p>查询热销商品列表的SQL语句大致是。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM t_product WHERE status=1 ORDER BY priority DESC LIMIT 0,4<br></code></pre></td></tr></table></figure><h4 id="3-2-接口与抽象方法"><a href="#3-2-接口与抽象方法" class="headerlink" title="3.2 接口与抽象方法"></a>3.2 接口与抽象方法</h4><p>在com.cy.store.mapper包下创建ProductMapper接口并在接口中添加查询热销商品findHotList()的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">package com.cy.store.mapper;<br>import com.cy.store.entity.Product;<br>import java.util.List;<br><br>/** 处理商品数据的持久层接口 */<br>public interface ProductMapper &#123;<br>    /**<br>     * 查询热销商品的前四名<br>     * @return 热销商品前四名的集合<br>     */<br>    List&lt;Product&gt; findHotList();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-配置SQL映射"><a href="#3-3-配置SQL映射" class="headerlink" title="3.3 配置SQL映射"></a>3.3 配置SQL映射</h4><p>1.在main\resources\mapper文件夹下创建ProductMapper.xml文件，并在文件中配置findHotList()方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.cy.store.mapper.ProductMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ProductEntityMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.cy.store.entity.Product&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;item_type&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;itemType&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sell_point&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sellPoint&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdUser&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdTime&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedUser&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedTime&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 查询热销商品的前四名：List&lt;Product&gt; findHostList() --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findHotList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ProductEntityMap&quot;</span>&gt;</span><br>        SELECT<br>            *<br>        FROM<br>            t_product<br>        WHERE<br>            status=1<br>        ORDER BY<br>            priority DESC<br>            LIMIT 0,4<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在com.cy.store.mapper包下创建ProductMapperTests测试类，并添加测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.mapper;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Product;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductMapperTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductMapper productMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findHotList</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Product&gt; list = productMapper.findHotList();<br>        System.out.println(<span class="hljs-string">&quot;count=&quot;</span> + list.size());<br>        <span class="hljs-keyword">for</span> (Product item : list) &#123;<br>            System.out.println(item);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-商品-热销排行-业务层"><a href="#4-商品-热销排行-业务层" class="headerlink" title="4 商品-热销排行-业务层"></a>4 商品-热销排行-业务层</h3><h4 id="4-1-规划异常"><a href="#4-1-规划异常" class="headerlink" title="4.1 规划异常"></a>4.1 规划异常</h4><blockquote><p><strong>说明</strong>：无异常。</p></blockquote><h4 id="4-2-接口与抽象方法"><a href="#4-2-接口与抽象方法" class="headerlink" title="4.2 接口与抽象方法"></a>4.2 接口与抽象方法</h4><p>创建com.cy.store.service.IProductService接口，并在接口中添加findHotList()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Product;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/** 处理商品数据的业务层接口 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IProductService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询热销商品的前四名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 热销商品前四名的集合</span><br><span class="hljs-comment">     */</span><br>    List&lt;Product&gt; <span class="hljs-title function_">findHotList</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-实现抽象方法"><a href="#4-3-实现抽象方法" class="headerlink" title="4.3 实现抽象方法"></a>4.3 实现抽象方法</h4><p>1.创建com.cy.store.service.impl.ProductServiceImpl类，并添加@Service注解；在类中声明持久层对象以及实现接口中的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.impl;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Product;<br><span class="hljs-keyword">import</span> com.cy.store.mapper.ProductMapper;<br><span class="hljs-keyword">import</span> com.cy.store.service.IProductService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/** 处理商品数据的业务层实现类 */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IProductService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductMapper productMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-title function_">findHotList</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Product&gt; list = productMapper.findHotList();<br>        <span class="hljs-keyword">for</span> (Product product : list) &#123;<br>            product.setPriority(<span class="hljs-literal">null</span>);<br>            product.setCreatedUser(<span class="hljs-literal">null</span>);<br>            product.setCreatedTime(<span class="hljs-literal">null</span>);<br>            product.setModifiedUser(<span class="hljs-literal">null</span>);<br>            product.setModifiedTime(<span class="hljs-literal">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在com.cy.store.service包下创建测试类ProductServiceTests，并编写测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Product;<br><span class="hljs-keyword">import</span> com.cy.store.service.ex.ServiceException;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductServiceTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IProductService productService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findHotList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            List&lt;Product&gt; list = productService.findHotList();<br>            System.out.println(<span class="hljs-string">&quot;count=&quot;</span> + list.size());<br>            <span class="hljs-keyword">for</span> (Product item : list) &#123;<br>                System.out.println(item);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>            System.out.println(e.getClass().getSimpleName());<br>            System.out.println(e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-商品-热销排行-控制器"><a href="#5-商品-热销排行-控制器" class="headerlink" title="5 商品-热销排行-控制器"></a>5 商品-热销排行-控制器</h3><h4 id="5-1-处理异常"><a href="#5-1-处理异常" class="headerlink" title="5.1 处理异常"></a>5.1 处理异常</h4><blockquote><p><strong>说明</strong>：无异常。</p></blockquote><h4 id="5-2-设计请求"><a href="#5-2-设计请求" class="headerlink" title="5.2 设计请求"></a>5.2 设计请求</h4><p>1.设计用户提交的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/products/hot_list请求参数：无请求类型：GET响应结果：JsonResult&lt;List&lt;Product&gt;&gt;是否拦截：否，需要将index.html和products/**添加到白名单</code></pre><p>2.在LoginInterceptorConfigurer类中将index.html页面和products/**请求添加到白名单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">patterns.add(<span class="hljs-string">&quot;/web/index.html&quot;</span>);<br>patterns.add(<span class="hljs-string">&quot;/products/**&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="5-3-处理请求"><a href="#5-3-处理请求" class="headerlink" title="5.3 处理请求"></a>5.3 处理请求</h4><p>1.创建com.cy.controller.ProductController类继承自BaseController类，类添加@RestController和@RequestMapping(“products”)注解，并在类中添加业务层对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.controller;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Product;<br><span class="hljs-keyword">import</span> com.cy.store.service.IProductService;<br><span class="hljs-keyword">import</span> com.cy.store.util.JsonResult;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;products&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IProductService productService;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在类中添加处理请求的getHotList()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;hot_list&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;List&lt;Product&gt;&gt; <span class="hljs-title function_">getHotList</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Product&gt; data = productService.findHotList();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;List&lt;Product&gt;&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，直接访问<a href="http://localhost:8080/products/hot_list%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/products/hot_list进行测试。</a></p><p><img src="1.png" alt="电脑商城07"></p><h3 id="6-商品-热销排行-前端页面"><a href="#6-商品-热销排行-前端页面" class="headerlink" title="6 商品-热销排行-前端页面"></a>6 商品-热销排行-前端页面</h3><p>1.在index.html页面给“热销排行”列表的div标签设置id属性值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hot-list&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body panel-item&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在index.html页面中body标签内部的最后，添加展示热销排行商品的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">showHotList</span>();<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showHotList</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#hot-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/products/hot_list&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">let</span> list = json.<span class="hljs-property">data</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;count=&quot;</span> + list.<span class="hljs-property">length</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[i].<span class="hljs-property">title</span>);<br>                <span class="hljs-keyword">let</span> html = <span class="hljs-string">&#x27;&lt;div class=&quot;col-md-12&quot;&gt;&#x27;</span><br>                  + <span class="hljs-string">&#x27;&lt;div class=&quot;col-md-7 text-row-2&quot;&gt;&lt;a href=&quot;product.html?id=#&#123;id&#125;&quot;&gt;#&#123;title&#125;&lt;/a&gt;&lt;/div&gt;&#x27;</span><br>                  + <span class="hljs-string">&#x27;&lt;div class=&quot;col-md-2&quot;&gt;¥#&#123;price&#125;&lt;/div&gt;&#x27;</span><br>                  + <span class="hljs-string">&#x27;&lt;div class=&quot;col-md-3&quot;&gt;&lt;img src=&quot;..#&#123;image&#125;collect.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/div&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;<br><br>                html = html.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;id&#125;/g</span>, list[i].<span class="hljs-property">id</span>);<br>                html = html.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;title&#125;/g</span>, list[i].<span class="hljs-property">title</span>);<br>                html = html.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;price&#125;/g</span>, list[i].<span class="hljs-property">price</span>);<br>                html = html.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;image&#125;/g</span>, list[i].<span class="hljs-property">image</span>);<br><br>                $(<span class="hljs-string">&quot;#hot-list&quot;</span>).<span class="hljs-title function_">append</span>(html);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，直接访问<a href="http://localhost:8080/web/index.html%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/index.html进行测试。</a></p><h2 id="显示商品详情"><a href="#显示商品详情" class="headerlink" title="显示商品详情"></a>显示商品详情</h2><h3 id="1-商品-显示商品详情-持久层"><a href="#1-商品-显示商品详情-持久层" class="headerlink" title="1 商品-显示商品详情-持久层"></a>1 商品-显示商品详情-持久层</h3><h4 id="1-1-规划需要执行的SQL语句"><a href="#1-1-规划需要执行的SQL语句" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>根据商品id显示商品详情的SQL语句大致是。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM t_product WHERE id=?<br></code></pre></td></tr></table></figure><h4 id="1-2-接口与抽象方法"><a href="#1-2-接口与抽象方法" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>在ProductMapper接口中添加抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据商品id查询商品详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id 商品id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 匹配的商品详情，如果没有匹配的数据则返回null</span><br><span class="hljs-comment"> */</span><br>Product <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3-配置SQL映射"><a href="#1-3-配置SQL映射" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在ProductMapper.xml文件中配置findById(Integer id)方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 根据商品id查询商品详情：Product findById(Integer id) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ProductEntityMap&quot;</span>&gt;</span><br>    SELECT<br>    *<br>    FROM<br>    t_product<br>    WHERE<br>    id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在ProductMapperTests测试类中添加测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findById</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000017</span>;<br>    <span class="hljs-type">Product</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> productMapper.findById(id);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-商品-显示商品详情-业务层"><a href="#2-商品-显示商品详情-业务层" class="headerlink" title="2 商品-显示商品详情-业务层"></a>2 商品-显示商品详情-业务层</h3><h4 id="2-1-规划异常"><a href="#2-1-规划异常" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>如果商品数据不存在，应该抛出ProductNotFoundException，需要创建com.cy.store.service.ex.ProductNotFoundException异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 商品数据不存在的异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductNotFoundException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-接口与抽象方法"><a href="#2-2-接口与抽象方法" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在业务层IProductService接口中添加findById(Integer id)抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据商品id查询商品详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id 商品id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 匹配的商品详情，如果没有匹配的数据则返回null</span><br><span class="hljs-comment"> */</span><br>Product <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-实现抽象方法"><a href="#2-3-实现抽象方法" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在ProductServiceImpl类中，实现接口中的findById(Integer id)抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Product <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span> &#123;<br>    <span class="hljs-comment">// 根据参数id调用私有方法执行查询，获取商品数据</span><br>    <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productMapper.findById(id);<br>    <span class="hljs-comment">// 判断查询结果是否为null</span><br>    <span class="hljs-keyword">if</span> (product == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 是：抛出ProductNotFoundException</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductNotFoundException</span>(<span class="hljs-string">&quot;尝试访问的商品数据不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 将查询结果中的部分属性设置为null</span><br>    product.setPriority(<span class="hljs-literal">null</span>);<br>    product.setCreatedUser(<span class="hljs-literal">null</span>);<br>    product.setCreatedTime(<span class="hljs-literal">null</span>);<br>    product.setModifiedUser(<span class="hljs-literal">null</span>);<br>    product.setModifiedTime(<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">// 返回查询结果</span><br>    <span class="hljs-keyword">return</span> product;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在ProductServiceTests测试类中编写测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findById</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000179</span>;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> productService.findById(id);<br>        System.out.println(result);<br>    &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>        System.out.println(e.getClass().getSimpleName());<br>        System.out.println(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-商品-显示商品详情-控制器"><a href="#3-商品-显示商品详情-控制器" class="headerlink" title="3 商品-显示商品详情-控制器"></a>3 商品-显示商品详情-控制器</h3><h4 id="3-1-处理异常"><a href="#3-1-处理异常" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p>在BaseController类中的handleException()方法中添加处理ProductNotFoundException的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> ProductNotFoundException) &#123;<br>result.setState(<span class="hljs-number">4006</span>);<br>&#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h4 id="3-2-设计请求"><a href="#3-2-设计请求" class="headerlink" title="3.2  设计请求"></a>3.2  设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/products/&#123;id&#125;/details请求参数：@PathVariable(&quot;id&quot;) Integer id请求类型：GET响应结果：JsonResult&lt;Product&gt;</code></pre><h4 id="3-3-处理请求"><a href="#3-3-处理请求" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在ProductController类中添加处理请求的getById()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;&#123;id&#125;/details&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Product&gt; <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;<br>    <span class="hljs-comment">// 调用业务对象执行获取数据</span><br>    <span class="hljs-type">Product</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> productService.findById(id);<br>    <span class="hljs-comment">// 返回成功和数据</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Product&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.完成后启动项目，直接访问<a href="http://localhost:8080/products/10000017/details%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/products/10000017/details进行测试。</a></p><p><img src="2.png" alt="电脑商城07"></p><h3 id="4-商品-显示商品详情-前端页面"><a href="#4-商品-显示商品详情-前端页面" class="headerlink" title="4 商品-显示商品详情-前端页面"></a>4 商品-显示商品详情-前端页面</h3><p>1.检查在product.html页面body标签内部的最后是否引入jquery-getUrlParam.js文件，如果引入无需重复引入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../js/jquery-getUrlParam.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.在product.html页面中body标签内部的最后添加获取当前商品详情的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">let</span> id = $.<span class="hljs-title function_">getUrlParam</span>(<span class="hljs-string">&quot;id&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;id=&quot;</span> + id);<br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/products/&quot;</span> + id + <span class="hljs-string">&quot;/details&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;title=&quot;</span> + json.<span class="hljs-property">data</span>.<span class="hljs-property">title</span>);<br>                $(<span class="hljs-string">&quot;#product-title&quot;</span>).<span class="hljs-title function_">html</span>(json.<span class="hljs-property">data</span>.<span class="hljs-property">title</span>);<br>                $(<span class="hljs-string">&quot;#product-sell-point&quot;</span>).<span class="hljs-title function_">html</span>(json.<span class="hljs-property">data</span>.<span class="hljs-property">sellPoint</span>);<br>                $(<span class="hljs-string">&quot;#product-price&quot;</span>).<span class="hljs-title function_">html</span>(json.<span class="hljs-property">data</span>.<span class="hljs-property">price</span>);<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>                    $(<span class="hljs-string">&quot;#product-image-&quot;</span> + i + <span class="hljs-string">&quot;-big&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;..&quot;</span> + json.<span class="hljs-property">data</span>.<span class="hljs-property">image</span> + i + <span class="hljs-string">&quot;_big.png&quot;</span>);<br>                    $(<span class="hljs-string">&quot;#product-image-&quot;</span> + i).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;..&quot;</span> + json.<span class="hljs-property">data</span>.<span class="hljs-property">image</span> + i + <span class="hljs-string">&quot;.jpg&quot;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">4006</span>) &#123; <span class="hljs-comment">// 商品数据不存在的异常</span><br>                location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;index.html&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;获取商品信息失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，先访问<a href="http://localhost:8080/web/index.html%E9%A1%B5%E9%9D%A2%EF%BC%8C%E7%84%B6%E5%90%8E%E7%82%B9%E5%87%BB%E2%80%9C%E7%83%AD%E9%94%80%E6%8E%92%E8%A1%8C%E2%80%9D%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%AA%E5%AD%90%E9%A1%B9%EF%BC%8C%E5%B0%86%E8%B7%B3%E8%BD%AC%E5%88%B0product.html%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5%EF%BC%8C%E8%A7%82%E5%AF%9F%E9%A1%B5%E9%9D%A2%E6%98%AF%E5%90%A6%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%98%AF%E5%BD%93%E5%89%8D%E7%9A%84%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF%E3%80%82">http://localhost:8080/web/index.html页面，然后点击“热销排行”中的某个子项，将跳转到product.html商品详情页，观察页面是否加载的是当前的商品信息。</a></p><p><img src="3.png" alt="电脑商城07"></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>电脑商城</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>项目练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城06</title>
    <link href="/2023/05/08/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E06/"/>
    <url>/2023/05/08/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E06/</url>
    
    <content type="html"><![CDATA[<h2 id="新增收货地址"><a href="#新增收货地址" class="headerlink" title="新增收货地址"></a>新增收货地址</h2><h3 id="1-新增收货地址-创建数据表"><a href="#1-新增收货地址-创建数据表" class="headerlink" title="1 新增收货地址-创建数据表"></a>1 新增收货地址-创建数据表</h3><p>1.使用use命令先选中store数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USE store;<br></code></pre></td></tr></table></figure><p>2.在store数据库中创建t_address用户数据表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE t_address (<br>aid INT AUTO_INCREMENT COMMENT &#x27;收货地址id&#x27;,<br>uid INT COMMENT &#x27;归属的用户id&#x27;,<br>name VARCHAR(20) COMMENT &#x27;收货人姓名&#x27;,<br>province_name VARCHAR(15) COMMENT &#x27;省-名称&#x27;,<br>province_code CHAR(6) COMMENT &#x27;省-行政代号&#x27;,<br>city_name VARCHAR(15) COMMENT &#x27;市-名称&#x27;,<br>city_code CHAR(6) COMMENT &#x27;市-行政代号&#x27;,<br>area_name VARCHAR(15) COMMENT &#x27;区-名称&#x27;,<br>area_code CHAR(6) COMMENT &#x27;区-行政代号&#x27;,<br>zip CHAR(6) COMMENT &#x27;邮政编码&#x27;,<br>address VARCHAR(50) COMMENT &#x27;详细地址&#x27;,<br>phone VARCHAR(20) COMMENT &#x27;手机&#x27;,<br>tel VARCHAR(20) COMMENT &#x27;固话&#x27;,<br>tag VARCHAR(6) COMMENT &#x27;标签&#x27;,<br>is_default INT COMMENT &#x27;是否默认：0-不默认，1-默认&#x27;,<br>created_user VARCHAR(20) COMMENT &#x27;创建人&#x27;,<br>created_time DATETIME COMMENT &#x27;创建时间&#x27;,<br>modified_user VARCHAR(20) COMMENT &#x27;修改人&#x27;,<br>modified_time DATETIME COMMENT &#x27;修改时间&#x27;,<br>PRIMARY KEY (aid)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><h3 id="2-新增收货地址-创建实体类"><a href="#2-新增收货地址-创建实体类" class="headerlink" title="2 新增收货地址-创建实体类"></a>2 新增收货地址-创建实体类</h3><p>创建com.cy.store.entity.Address新增收获地址的实体类，继承自BaseEntity类，在类中声明与数据表中对应的属性，添加Getters and Setters方法，基于唯一标识aid生成hashCode()和equals()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.entity;<br><br><span class="hljs-comment">/** 收货地址数据的实体类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer aid;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String provinceName;<br>    <span class="hljs-keyword">private</span> String provinceCode;<br>    <span class="hljs-keyword">private</span> String cityName;<br>    <span class="hljs-keyword">private</span> String cityCode;<br>    <span class="hljs-keyword">private</span> String areaName;<br>    <span class="hljs-keyword">private</span> String areaCode;<br>    <span class="hljs-keyword">private</span> String zip;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-keyword">private</span> String tel;<br>    <span class="hljs-keyword">private</span> String tag;<br>    <span class="hljs-keyword">private</span> Integer isDefault;<br><br>    <span class="hljs-comment">// Generate: Getter and Setter、Generate hashCode() and equals()、toString()</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-新增收货地址-持久层"><a href="#3-新增收货地址-持久层" class="headerlink" title="3 新增收货地址-持久层"></a>3 新增收货地址-持久层</h3><h4 id="3-1-各功能的开发顺序"><a href="#3-1-各功能的开发顺序" class="headerlink" title="3.1 各功能的开发顺序"></a>3.1 各功能的开发顺序</h4><p>关于收货地址数据的管理，涉及的功能有：增加，删除，修改，设为默认，显示列表。这些功能的开发顺序为：增加-显示列表-设为默认-删除-修改。</p><h4 id="3-2-规划需要执行的SQL语句"><a href="#3-2-规划需要执行的SQL语句" class="headerlink" title="3.2 规划需要执行的SQL语句"></a>3.2 规划需要执行的SQL语句</h4><p>增加收货地址的本质是插入新的收货地址数据，需要执行的SQL语句大致是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO t_address (除了aid以外的字段列表) VALUES (匹配的值列表)<br></code></pre></td></tr></table></figure><p>后续在处理业务时，还需要确定“即将增加的收货地址是不是默认收货地址”；可以设定规则“用户的第1条收货地址是默认的，以后添加的每一条都不是默认的”；要应用该规则，就必须知道“即将增加的收货地址是不是第1条”，可以“根据用户id统计收货地址的数量”，如果统计结果为0，则即将增加的就是该用户的第1条收货地址，如果统计结果不是0，则该用户已经有若干条收货地址了，即将增加的就一定不是第1条。关于统计的SQL语句大致是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT count(*) FROM t_address WHERE uid=?<br></code></pre></td></tr></table></figure><p>一般电商平台都会限制每个用户可以创建的收货地址的数量，如“每个用户最多只允许创建20个收货地址”，也可以通过以上查询来实现。</p><h4 id="3-3-接口与抽象方法"><a href="#3-3-接口与抽象方法" class="headerlink" title="3.3 接口与抽象方法"></a>3.3 接口与抽象方法</h4><p>创建com.cy.store.mapper.AddressMapper接口，并在接口中添加抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.mapper;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Address;<br><br><span class="hljs-comment">/** 处理收货地址数据的持久层接口 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AddressMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入收货地址数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> address 收货地址数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">insert</span><span class="hljs-params">(Address address)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 统计某用户的收货地址数据的数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> uid 用户的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 该用户的收货地址数据的数量</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">countByUid</span><span class="hljs-params">(Integer uid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-配置SQL映射"><a href="#3-4-配置SQL映射" class="headerlink" title="3.4 配置SQL映射"></a>3.4 配置SQL映射</h4><p>1.在src/main/resources/mapper文件夹下复制粘贴得到AddressMapper.xml映射文件，修改根节点mapper的namespace属性的值为com.cy.store.mapper.AddressMapper，并在根节点中配置pojo类属性与数据库中表的字段映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.cy.store.mapper.AddressMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;AddressEntityMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.cy.store.entity.Address&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;aid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;aid&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;province_code&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;provinceCode&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;province_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;provinceName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;city_code&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cityCode&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;city_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cityName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;area_code&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;areaCode&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;area_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;areaName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_default&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isDefault&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdUser&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdTime&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedUser&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedTime&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在AddressMapper.xml映射文件的根节点中配置以上两个抽象方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 插入收货地址数据：Integer insert(Address address) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;aid&quot;</span>&gt;</span><br>    INSERT INTO t_address (<br>        uid, name, province_name, province_code, city_name, city_code, area_name, area_code, zip,<br>        address, phone, tel,tag, is_default, created_user, created_time, modified_user, modified_time<br>    ) VALUES (<br>        #&#123;uid&#125;, #&#123;name&#125;, #&#123;provinceName&#125;, #&#123;provinceCode&#125;, #&#123;cityName&#125;, #&#123;cityCode&#125;, #&#123;areaName&#125;,<br>        #&#123;areaCode&#125;, #&#123;zip&#125;, #&#123;address&#125;, #&#123;phone&#125;, #&#123;tel&#125;, #&#123;tag&#125;, #&#123;isDefault&#125;, #&#123;createdUser&#125;,<br>        #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;<br>    )<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 统计某用户的收货地址数据的数量：Integer countByUid(Integer uid) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countByUid&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    SELECT<br>    COUNT(*)<br>    FROM<br>   t_address<br>    WHERE<br>    uid=#&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.在src/test/java下创建com.cy.store.mapper.AddressMapperTests测试类，在类定义之前添加测试的两个注解，在类中编写并执行以上两个抽象方法的测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.mapper;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Address;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressMapperTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AddressMapper addressMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>();<br>        address.setUid(<span class="hljs-number">18</span>);<br>        address.setName(<span class="hljs-string">&quot;admin&quot;</span>);<br>        address.setPhone(<span class="hljs-string">&quot;17858802974&quot;</span>);<br>        address.setAddress(<span class="hljs-string">&quot;雁塔区小寨赛格&quot;</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> addressMapper.insert(address);<br>        System.out.println(<span class="hljs-string">&quot;rows=&quot;</span> + rows);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countByUid</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> addressMapper.countByUid(uid);<br>        System.out.println(<span class="hljs-string">&quot;count=&quot;</span> + count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-增收货地址-业务层"><a href="#4-增收货地址-业务层" class="headerlink" title="4 增收货地址-业务层"></a>4 增收货地址-业务层</h3><h4 id="4-1-规划异常"><a href="#4-1-规划异常" class="headerlink" title="4.1 规划异常"></a>4.1 规划异常</h4><p>1.无论用户将要增加的收货地址是不是默认收货地址，都需正常增加。即通过countByUid()方法统计的结果不管是不是0，都不能代表是错误的操作。</p><p>2.在执行插入收货地址数据之前，需判断countByUid()方法返回值是否超出上限值，如果超出上限值则抛AddressCountLimitException异常。</p><p>3.在执行插入数据时，还可能抛出InsertException异常，此异常无需再次创建。</p><p>4.创建com.cy.store.service.ex.AddressCountLimitException类后，需继承自ServiceException类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 收货地址数量达到上限的异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressCountLimitException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-接口与抽象方法"><a href="#4-2-接口与抽象方法" class="headerlink" title="4.2 接口与抽象方法"></a>4.2 接口与抽象方法</h4><p>创建com.cy.store.service.IAddressService业务层接口，并添加抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Address;<br><br><span class="hljs-comment">/** 处理收货地址数据的业务层接口 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAddressService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建新的收货地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> uid 当前登录的用户的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 当前登录的用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> address 用户提交的收货地址数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNewAddress</span><span class="hljs-params">(Integer uid, String username, Address address)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-实现抽象方法"><a href="#4-3-实现抽象方法" class="headerlink" title="4.3 实现抽象方法"></a>4.3 实现抽象方法</h4><p>1.创建com.cy.store.service.impl.AddressServiceImpl业务层实现类，在类定义之前添加@Service注解，并实现IAddressService接口，最后在类中添加持久层对象并使用@Autowired注解修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.impl;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Address;<br><span class="hljs-keyword">import</span> com.cy.store.mapper.AddressMapper;<br><span class="hljs-keyword">import</span> com.cy.store.service.IAddressService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAddressService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AddressMapper addressMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNewAddress</span><span class="hljs-params">(Integer uid, String username, Address address)</span> &#123;<br><span class="hljs-comment">// TODO</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.分析重写的addNewAddress(Integer uid, String username, Address address)抽象方法中的业务逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNewAddress</span><span class="hljs-params">(Integer uid, String username, Address address)</span> &#123;<br>    <span class="hljs-comment">// 根据参数uid调用addressMapper的countByUid()方法，统计当前用户的收货地址数据的数量</span><br>    <span class="hljs-comment">// 判断数量是否达到上限值</span><br>    <span class="hljs-comment">// 是：抛出AddressCountLimitException</span><br><br>    <span class="hljs-comment">// 补全数据：将参数uid封装到参数address中</span><br>    <span class="hljs-comment">// 补全数据：根据以上统计的数量，得到正确的isDefault值(是否默认：0-不默认，1-默认)，并封装</span><br>    <span class="hljs-comment">// 补全数据：4项日志</span><br><br>    <span class="hljs-comment">// 调用addressMapper的insert()方法插入收货地址数据，并获取返回的受影响行数</span><br>    <span class="hljs-comment">// 判断受影响行数是否不为1</span><br>    <span class="hljs-comment">// 是：抛出InsertException</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3.addNewAddress(Integer uid, String username, Address address)方法的具体代码实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.impl;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Address;<br><span class="hljs-keyword">import</span> com.cy.store.mapper.AddressMapper;<br><span class="hljs-keyword">import</span> com.cy.store.service.IAddressService;<br><span class="hljs-keyword">import</span> com.cy.store.service.ex.AddressCountLimitException;<br><span class="hljs-keyword">import</span> com.cy.store.service.ex.InsertException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAddressService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AddressMapper addressMapper;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxCount;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNewAddress</span><span class="hljs-params">(Integer uid, String username, Address address)</span> &#123;<br>        <span class="hljs-comment">// 根据参数uid调用addressMapper的countByUid(Integer uid)方法，统计当前用户的收货地址数据的数量</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> addressMapper.countByUid(uid);<br>        <span class="hljs-comment">// 判断数量是否达到上限值</span><br>        <span class="hljs-keyword">if</span> (count &gt; maxCount) &#123;<br>            <span class="hljs-comment">// 是：抛出AddressCountLimitException</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressCountLimitException</span>(<span class="hljs-string">&quot;收货地址数量已经达到上限(&quot;</span> + maxCount + <span class="hljs-string">&quot;)！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 补全数据：将参数uid封装到参数address中</span><br>        address.setUid(uid);<br>        <span class="hljs-comment">// 补全数据：根据以上统计的数量，得到正确的isDefault值(是否默认：0-不默认，1-默认)，并封装</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">isDefault</span> <span class="hljs-operator">=</span> count == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        address.setIsDefault(IsDefault);<br>        <span class="hljs-comment">// 补全数据：4项日志</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        address.setCreatedUser(username);<br>        address.setCreatedTime(now);<br>        address.setModifiedUser(username);<br>        address.setModifiedTime(now);<br><br>        <span class="hljs-comment">// 调用addressMapper的insert(Address address)方法插入收货地址数据，并获取返回的受影响行数</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> addressMapper.insert(address);<br>        <span class="hljs-comment">// 判断受影响行数是否不为1</span><br>        <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 是：抛出InsertException</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertException</span>(<span class="hljs-string">&quot;插入收货地址数据时出现未知错误，请联系系统管理员！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在application.properties文件中添加收货地址数据上限值的配置。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">user.address.max-count</span>=<span class="hljs-string">20</span><br></code></pre></td></tr></table></figure><p>5.在src/test/java下创建com.cy.store.service.AddressServiceTests测试类，在测试类中测试以上方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service;<br><span class="hljs-keyword">import</span> com.cy.store.entity.Address;<br><span class="hljs-keyword">import</span> com.cy.store.service.ex.ServiceException;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressServiceTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IAddressService addressService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNewAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;管理员&quot;</span>;<br>            <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>();<br>            address.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>            address.setPhone(<span class="hljs-string">&quot;17858805555&quot;</span>);<br>            address.setAddress(<span class="hljs-string">&quot;雁塔区小寨华旗&quot;</span>);<br>            addressService.addNewAddress(uid, username, address);<br>            System.out.println(<span class="hljs-string">&quot;OK.&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>            System.out.println(e.getClass().getSimpleName());<br>            System.out.println(e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-新增收货地址-控制器"><a href="#5-新增收货地址-控制器" class="headerlink" title="5 新增收货地址-控制器"></a>5 新增收货地址-控制器</h3><h4 id="5-1-处理异常"><a href="#5-1-处理异常" class="headerlink" title="5.1 处理异常"></a>5.1 处理异常</h4><p>在控制器层新增收货地址时，如果收货地址已经达到上限值，则抛出AddressCountLimitException异常，并在BaseController类中添加处理AddressCountLimitException的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> AddressCountLimitException) &#123;<br>result.setState(<span class="hljs-number">4003</span>);<br>&#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h4 id="5-2-设计请求"><a href="#5-2-设计请求" class="headerlink" title="5.2 设计请求"></a>5.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/addresses/add_new_address请求参数：Address address, HttpSession session请求类型：POST响应结果：JsonResult&lt;Void&gt;</code></pre><h4 id="5-3-处理请求"><a href="#5-3-处理请求" class="headerlink" title="5.3 处理请求"></a>5.3 处理请求</h4><p>1.创建com.cy.store.controller.AddressController控制器类继承自BaseController类，在类的声明添加@RequestMapping(“addresses”)和@RestController注解，在类中声明业务层对象并添加Autowired注解修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.controller;<br><span class="hljs-keyword">import</span> com.cy.store.service.IAddressService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;addresses&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IAddressService addressService;    <br>&#125;<br></code></pre></td></tr></table></figure><p>2.然后在AddressController类中添加处理请求的addNewAddress(Address address, HttpSession session)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;add_new_address&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">addNewAddress</span><span class="hljs-params">(Address address, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">// 从Session中获取uid和username</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromSession(session);<br><br>    <span class="hljs-comment">// 调用业务对象的方法执行业务</span><br>    addressService.addNewAddress(uid, username, address);<br>    <span class="hljs-comment">// 响应成功</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Void&gt;(OK);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，打开浏览器先登录，再访问<a href="http://localhost:8080/addresses/add_new_address%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/addresses/add_new_address进行测试。</a></p><p><img src="1.png" alt="电脑商城06"></p><h3 id="6-新增收货地址-前端页面"><a href="#6-新增收货地址-前端页面" class="headerlink" title="6 新增收货地址-前端页面"></a>6 新增收货地址-前端页面</h3><p>1.在addAddress.html页面中配置新增收货地址表单的属性。给form表单添加id=”form-add-new-address”属性、”请输入收货人姓名”添加name=”name”属性、”请输入邮政编码”添加name=”zip”属性、”输入详细的收货地址，小区名称、门牌号等”添加name=”address”属性、”请输入手机号码”添加name=”phone”属性、”请输入固定电话号码”添加name=”tel”属性、”请输入地址类型，如：家、公司或者学校”添加name=”tag”属性、”保存”按钮添加id=”btn-add-new-address”属性。以上属性如果已经添加无需重复添加。</p><p>2.在addAddress.html页面中body标签内部的最后，添加script标签用于编写JavaScript程序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-string">&quot;#btn-add-new-address&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/addresses/add_new_address&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#form-add-new-address&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;新增收货地址成功！&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;新增收货地址失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;您的登录信息已经过期，请重新登录！HTTP响应码：&quot;</span> + xhr.<span class="hljs-property">status</span>);<br>                location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;login.html&quot;</span>;<br>            &#125;<br>        &#125;);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，打开浏览器先登录，再访问<a href="http://localhost:8080/web/addAddress.html%E9%A1%B5%E9%9D%A2%E3%80%82">http://localhost:8080/web/addAddress.html页面。</a></p><p><img src="2.png" alt="电脑商城06"></p><h2 id="获取省-市-区的列表"><a href="#获取省-市-区的列表" class="headerlink" title="获取省/市/区的列表"></a>获取省/市/区的列表</h2><h3 id="1-获取省-市-区的列表-数据库"><a href="#1-获取省-市-区的列表-数据库" class="headerlink" title="1 获取省/市/区的列表-数据库"></a>1 获取省/市/区的列表-数据库</h3><p>1.使用该数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USE store;<br></code></pre></td></tr></table></figure><p>2.向数据库中导入省/市/区数据t_dict_district.sql文件，执行以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; source C:/Users/yuanxin/t_dict_district.sql<br></code></pre></td></tr></table></figure><p>3.创建省/市/区数据的com.cy.store.entity实体类，在类中声明与数据表中对应的属性，添加Getters and Setters方法，基于唯一标识id生成equals()方法及hashCode()和toString()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.entity;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/** 省/市/区数据的实体类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">District</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String parent;<br>    <span class="hljs-keyword">private</span> String code;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">// Generate: Getter and Setter、Generate hashCode() and equals()、toString()</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-获取省-市-区的列表-持久层"><a href="#2-获取省-市-区的列表-持久层" class="headerlink" title="2 获取省/市/区的列表-持久层"></a>2 获取省/市/区的列表-持久层</h3><h4 id="2-1-规划需要执行的SQL语句"><a href="#2-1-规划需要执行的SQL语句" class="headerlink" title="2.1 规划需要执行的SQL语句"></a>2.1 规划需要执行的SQL语句</h4><p>获取全国所有省/某省所有市/某市所有区的查询SQL语句大致是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t_dict_district where parent=? order by code ASC;<br></code></pre></td></tr></table></figure><h4 id="2-2-接口与抽象方法"><a href="#2-2-接口与抽象方法" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>创建com.cy.store.mapper.DistrictMapper接口，添加抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.mapper;<br><span class="hljs-keyword">import</span> com.cy.store.entity.District;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/** 处理省/市/区数据的持久层接口 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DistrictMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取全国所有省/某省所有市/某市所有区</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parent 父级代号，当获取某市所有区时，使用市的代号；当获取省所有市时，使用省的代号；当获取全国所有省时，使用&quot;86&quot;作为父级代号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 全国所有省/某省所有市/某市所有区的列表</span><br><span class="hljs-comment">     */</span><br>    List&lt;District&gt; <span class="hljs-title function_">findByParent</span><span class="hljs-params">(String parent)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-配置SQL映射"><a href="#2-3-配置SQL映射" class="headerlink" title="2.3 配置SQL映射"></a>2.3 配置SQL映射</h4><p>1.在src/main/resources/mapper中复制得到DistrictMapper.xml，修改根节点的namespace属性的值为以上接口文件，并配置以上抽象方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.cy.store.mapper.DistrictMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 获取全国所有省/某省所有市/某市所有区：List&lt;District&gt; findByParent(String parent) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByParent&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.cy.store.entity.District&quot;</span>&gt;</span><br>        SELECT<br>            *<br>        FROM<br>            t_dict_district<br>        WHERE<br>            parent=#&#123;parent&#125;<br>        ORDER BY<br>            code ASC<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在src/test/java下创建com.cy.store.mapper.DistrictMapperTests测试类，编写并执行以上抽象方法的测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.mapper;<br><span class="hljs-keyword">import</span> com.cy.store.entity.District;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistrictMapperTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DistrictMapper districtMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByParent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;110100&quot;</span>;<br>        List&lt;District&gt; list = districtMapper.findByParent(parent);<br>        System.out.println(<span class="hljs-string">&quot;count=&quot;</span> + list.size());<br>        <span class="hljs-keyword">for</span> (District district : list) &#123;<br>            System.out.println(district);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-获取省-市-区的列表-业务层"><a href="#3-获取省-市-区的列表-业务层" class="headerlink" title="3 获取省/市/区的列表-业务层"></a>3 获取省/市/区的列表-业务层</h3><h4 id="3-1-规划异常"><a href="#3-1-规划异常" class="headerlink" title="3.1 规划异常"></a>3.1 规划异常</h4><blockquote><p><strong>说明</strong>：无异常。</p></blockquote><h4 id="3-2-接口与抽象方法"><a href="#3-2-接口与抽象方法" class="headerlink" title="3.2 接口与抽象方法"></a>3.2 接口与抽象方法</h4><p>创建com.cy.store.service.IDistrictService接口，并添加抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service;<br><span class="hljs-keyword">import</span> com.cy.store.entity.District;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/** 处理省/市/区数据的业务层接口 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IDistrictService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取全国所有省/某省所有市/某市所有区</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parent 父级代号，当获取某市所有区时，使用市的代号；当获取某省所有市时，使用省的代号；当获取全国所有省时，使用&quot;86&quot;作为父级代号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 全国所有省/某省所有市/某市所有区的列表</span><br><span class="hljs-comment">     */</span><br>    List&lt;District&gt; <span class="hljs-title function_">getByParent</span><span class="hljs-params">(String parent)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-实现抽象方法"><a href="#3-3-实现抽象方法" class="headerlink" title="3.3 实现抽象方法"></a>3.3 实现抽象方法</h4><p>1.创建com.cy.store.service.impl.DistrictServiceImpl类，实现IDistrictService接口，在类之前添加@Service注解，以及在类中添加持久层对象并使用@Autowired修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.impl;<br><span class="hljs-keyword">import</span> com.cy.store.entity.District;<br><span class="hljs-keyword">import</span> com.cy.store.mapper.DistrictMapper;<br><span class="hljs-keyword">import</span> com.cy.store.service.IDistrictService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/** 处理省/市/区数据的业务层实现类 */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistrictServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IDistrictService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DistrictMapper districtMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;District&gt; <span class="hljs-title function_">getByParent</span><span class="hljs-params">(String parent)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在DistrictServiceImpl实现类中实现getByParent(String parent)方法的具体代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;District&gt; <span class="hljs-title function_">getByParent</span><span class="hljs-params">(String parent)</span> &#123;<br>List&lt;District&gt; list = districtMapper.findByParent(parent);<br><span class="hljs-keyword">for</span> (District district : list) &#123;<br>district.setId(<span class="hljs-literal">null</span>);<br>district.setParent(<span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在src/test/java下创建com.cy.store.service.DistrictServiceTests测试类，编写并执行单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service;<br><span class="hljs-keyword">import</span> com.cy.store.entity.District;<br><span class="hljs-keyword">import</span> com.cy.store.service.ex.ServiceException;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistrictServiceTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IDistrictService districtService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getByParent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;86&quot;</span>;<br>            List&lt;District&gt; list = districtService.getByParent(parent);<br>            System.out.println(<span class="hljs-string">&quot;count=&quot;</span> + list.size());<br>            <span class="hljs-keyword">for</span> (District item : list) &#123;<br>                System.out.println(item);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>            System.out.println(e.getClass().getSimpleName());<br>            System.out.println(e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-获取省-市-区的列表-控制器"><a href="#4-获取省-市-区的列表-控制器" class="headerlink" title="4 获取省/市/区的列表-控制器"></a>4 获取省/市/区的列表-控制器</h3><h4 id="4-1-处理异常"><a href="#4-1-处理异常" class="headerlink" title="4.1 处理异常"></a>4.1 处理异常</h4><blockquote><p><strong>说明</strong>：无异常。</p></blockquote><h4 id="4-2-设计请求"><a href="#4-2-设计请求" class="headerlink" title="4.2 设计请求"></a>4.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/districts/请求参数：String parent请求类型：GET响应结果：JsonResult&lt;List&lt;District&gt;&gt;是否拦截：否，需要在拦截器的配置中添加白名单</code></pre><h4 id="4-3-处理请求"><a href="#4-3-处理请求" class="headerlink" title="4.3 处理请求"></a>4.3 处理请求</h4><p>1.创建com.cy.store.controller.DistrictController控制器类，继承自BaseController类，在类之前添加@RequestMapping(“districts”)和@RestController注解，并在类中添加业务层对象，对其使用@Autowired注解修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.controller;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> cn.tedu.store.entity.District;<br><span class="hljs-keyword">import</span> cn.tedu.store.service.IDistrictService;<br><span class="hljs-keyword">import</span> cn.tedu.store.util.JsonResult;<br><br><span class="hljs-meta">@RequestMapping(&quot;districts&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistrictController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> IDistrictService districtService;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.在类中添加处理请求的方法getByParent(String parent)及方法的实现。</p><blockquote><p>@GetMapping：是一个组合注解，等价于@RequestMapping(method={RequestMethod.GET})，它将HTTP的GET请求映射到特定的处理方法上。“/”表示方法将处理所有传入的URI请求。简化代码。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&#123;&quot;&quot;, &quot;/&quot;&#125;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;List&lt;District&gt;&gt; <span class="hljs-title function_">getByParent</span><span class="hljs-params">(String parent)</span> &#123;<br>    List&lt;District&gt; data = districtService.getByParent(parent);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在拦截器LoginInterceptorConfigurer类的addInterceptors(InterceptorRegistry registry)方法中将“districts”请求添加为白名单。如果已经添加无需重复添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">patterns.add(<span class="hljs-string">&quot;/districts/**&quot;</span>);<br></code></pre></td></tr></table></figure><p>4.完成后启动项目，打开浏览器（不需要登录），直接访问<a href="http://localhost:8080/districts?parent=86%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/districts?parent=86进行测试。</a></p><p><img src="3.png" alt="电脑商城06"></p><h3 id="5-获取省-市-区的列表-前端页面"><a href="#5-获取省-市-区的列表-前端页面" class="headerlink" title="5 获取省/市/区的列表-前端页面"></a>5 获取省/市/区的列表-前端页面</h3><p>1.在addAddress.html页面中的head标签内导入的distpicker.data.js和distpicker.js文件注释掉。</p><blockquote><p>JQuery实现中国省市区地址三级联动插件Distpicker。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!--<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/distpicker.data.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/distpicker.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>--&gt;<br></code></pre></td></tr></table></figure><p>2.在新增收货地址表单中，给”选择省”控件添加name=”provinceCode”和id=”province-list”属性，给”选择市”添加name=”cityCode”和id=”city-list”属性，给”选择区”控件添加name=”areaCode”和id=”area-list”属性。以上属性如果已经添加无需重复添加。</p><p>3.在addAddress.html页面中body标签内的script标签中添加获取省/市/区列表的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    <span class="hljs-keyword">let</span> defaultOption = <span class="hljs-string">&#x27;&lt;option value=&quot;0&quot;&gt;----- 请选择 -----&lt;/option&gt;&#x27;</span>;<br><br>    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">showProvinceList</span>();<br>        $(<span class="hljs-string">&quot;#city-list&quot;</span>).<span class="hljs-title function_">append</span>(defaultOption);<br>        $(<span class="hljs-string">&quot;#area-list&quot;</span>).<span class="hljs-title function_">append</span>(defaultOption);<br>    &#125;);<br><br>    $(<span class="hljs-string">&quot;#province-list&quot;</span>).<span class="hljs-title function_">change</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">showCityList</span>();<br>    &#125;);<br><br>    $(<span class="hljs-string">&quot;#city-list&quot;</span>).<span class="hljs-title function_">change</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">showAreaList</span>();<br>    &#125;);<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">showProvinceList</span>(<span class="hljs-params"></span>) &#123;<br>        $(<span class="hljs-string">&quot;#province-list&quot;</span>).<span class="hljs-title function_">append</span>(defaultOption);<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/districts&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>            <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;parent=86&quot;</span>,<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-keyword">let</span> list = json.<span class="hljs-property">data</span>;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;count=&quot;</span> + list.<span class="hljs-property">length</span>);<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[i].<span class="hljs-property">name</span>);<br>                        <span class="hljs-keyword">let</span> option = <span class="hljs-string">&#x27;&lt;option value=&quot;&#x27;</span> + list[i].<span class="hljs-property">code</span> + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> + list[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&lt;/option&gt;&#x27;</span>;<br>                        $(<span class="hljs-string">&quot;#province-list&quot;</span>).<span class="hljs-title function_">append</span>(option);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">showCityList</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> parent = $(<span class="hljs-string">&quot;#province-list&quot;</span>).<span class="hljs-title function_">val</span>();<br>        $(<span class="hljs-string">&quot;#city-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>        $(<span class="hljs-string">&quot;#area-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br><br>        $(<span class="hljs-string">&quot;#city-list&quot;</span>).<span class="hljs-title function_">append</span>(defaultOption);<br>        $(<span class="hljs-string">&quot;#area-list&quot;</span>).<span class="hljs-title function_">append</span>(defaultOption);<br><br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/districts&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>            <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;parent=&quot;</span> + parent,<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-keyword">let</span> list = json.<span class="hljs-property">data</span>;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;count=&quot;</span> + list.<span class="hljs-property">length</span>);<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[i].<span class="hljs-property">name</span>);<br>                        <span class="hljs-keyword">let</span> option = <span class="hljs-string">&#x27;&lt;option value=&quot;&#x27;</span> + list[i].<span class="hljs-property">code</span> + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> + list[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&lt;/option&gt;&#x27;</span>;<br>                        $(<span class="hljs-string">&quot;#city-list&quot;</span>).<span class="hljs-title function_">append</span>(option);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">showAreaList</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> parent = $(<span class="hljs-string">&quot;#city-list&quot;</span>).<span class="hljs-title function_">val</span>();<br>        $(<span class="hljs-string">&quot;#area-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>        $(<span class="hljs-string">&quot;#area-list&quot;</span>).<span class="hljs-title function_">append</span>(defaultOption);<br><br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/districts&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>            <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;parent=&quot;</span> + parent,<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-keyword">let</span> list = json.<span class="hljs-property">data</span>;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;count=&quot;</span> + list.<span class="hljs-property">length</span>);<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[i].<span class="hljs-property">name</span>);<br>                        <span class="hljs-keyword">let</span> option = <span class="hljs-string">&#x27;&lt;option value=&quot;&#x27;</span> + list[i].<span class="hljs-property">code</span> + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> + list[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&lt;/option&gt;&#x27;</span>;<br>                        $(<span class="hljs-string">&quot;#area-list&quot;</span>).<span class="hljs-title function_">append</span>(option);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p><strong>JQuery事件-change()方法</strong></p><p>1.定义和用法</p><p>（1）当元素的值发生改变时，会发生change事件。</p><p>（2）该事件仅适用于文本域(textfield)，以及textarea和select元素。</p><p>（3）change()函数触发change事件，或规定当发生change事件时运行的函数。</p><p>当用于select元素时，change事件会在选择某个选项时发生。当用于textfield或textarea时，该事件会在元素失去焦点时发生。</p><p>2.触发change事件</p><p>触发被选元素的change事件。语法：$(selector).change()</p><p>3.将函数绑定到change事件</p><p>规定当被选元素的 change 事件发生时运行的函数。语法：$(selector).change(function)</p></blockquote><p>4.完成后启动项目，打开浏览器先登录，再访问<a href="http://localhost:8080/web/addAddress.html%E9%A1%B5%E9%9D%A2%E3%80%82">http://localhost:8080/web/addAddress.html页面。</a></p><p><img src="5.png" alt="电脑商城06"></p><p>5.说明：如果输入的邮政编码位数大于6位数字，则会抛MysqlDataTruncation异常。</p><p><img src="4.png" alt="电脑商城06"></p><h2 id="获取省-市-区的名称"><a href="#获取省-市-区的名称" class="headerlink" title="获取省/市/区的名称"></a>获取省/市/区的名称</h2><p>此功能模块主要实现根据省/市/区的行政代号获取省/市/区的名称。</p><h3 id="1-获取省-市-区的名称-持久层"><a href="#1-获取省-市-区的名称-持久层" class="headerlink" title="1 获取省/市/区的名称-持久层"></a>1 获取省/市/区的名称-持久层</h3><h4 id="1-1-规划需要执行的SQL语句"><a href="#1-1-规划需要执行的SQL语句" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>根据省/市/区的行政代号获取省/市/区的名称，需要执行的SQL语句大致是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select name from t_dict_district where code=?<br></code></pre></td></tr></table></figure><h4 id="1-2-接口与抽象方法"><a href="#1-2-接口与抽象方法" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>在DistrictMapper接口中添加根据省/市/区的行政代号获取省/市/区的名称findNameByCode(String code)抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据省/市/区的行政代号获取省/市/区的名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> code 省/市/区的行政代号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 匹配的省/市/区的名称，如果没有匹配的数据则返回null</span><br><span class="hljs-comment"> */</span><br>String <span class="hljs-title function_">findNameByCode</span><span class="hljs-params">(String code)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3-配置SQL映射"><a href="#1-3-配置SQL映射" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在DistrictMapper.xml文件中配置映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 根据省/市/区的行政代号获取省/市/区的名称：String findNameByCode(String code) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findNameByCode&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span><br>    SELECT<br>    name<br>    FROM<br>    t_dict_district<br>    WHERE<br>    code=#&#123;code&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.然后在DistrictMapperTests测试类中编写并执行测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findNameByCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;540000&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> districtMapper.findNameByCode(code);<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-获取省-市-区的名称-业务层"><a href="#2-获取省-市-区的名称-业务层" class="headerlink" title="2 获取省/市/区的名称-业务层"></a>2 获取省/市/区的名称-业务层</h3><h4 id="2-1-规划异常"><a href="#2-1-规划异常" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><blockquote><p><strong>说明</strong>：无异常。</p></blockquote><h4 id="2-2-接口与抽象方法-1"><a href="#2-2-接口与抽象方法-1" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在业务层IDistrictService接口中添加getNameByCode(String code)抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据省/市/区的行政代号获取省/市/区的名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> code 省/市/区的行政代号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 匹配的省/市/区的名称，如果没有匹配的数据则返回null</span><br><span class="hljs-comment"> */</span><br>String <span class="hljs-title function_">getNameByCode</span><span class="hljs-params">(String code)</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-实现抽象方法"><a href="#2-3-实现抽象方法" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在业务层DistrictServiceImpl类中重写getNameByCode(String code)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNameByCode</span><span class="hljs-params">(String code)</span> &#123;<br>    <span class="hljs-keyword">return</span> districtMapper.findNameByCode(code);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.然后在DistrictServiceTests测试类中编写并执行测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getNameByCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;430000&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> districtService.getNameByCode(code);<br>        System.out.println(result);<br>    &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>        System.out.println(e.getClass().getSimpleName());<br>        System.out.println(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-新增收货地址-业务层优化"><a href="#3-新增收货地址-业务层优化" class="headerlink" title="3 新增收货地址-业务层优化"></a>3 新增收货地址-业务层优化</h3><p>1.在AddressServiceImpl类中声明处理省/市/区数据的业务层对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> IDistrictService districtService;<br></code></pre></td></tr></table></figure><p>2.在addNewAddress(Integer uid, String username, Address address)方法中补全省/市/区数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 补全数据：省、市、区的名称</span><br><span class="hljs-type">String</span> <span class="hljs-variable">provinceName</span> <span class="hljs-operator">=</span> districtService.getNameByCode(address.getProvinceCode());<br><span class="hljs-type">String</span> <span class="hljs-variable">cityName</span> <span class="hljs-operator">=</span> districtService.getNameByCode(address.getCityCode());<br><span class="hljs-type">String</span> <span class="hljs-variable">areaName</span> <span class="hljs-operator">=</span> districtService.getNameByCode(address.getAreaCode());<br>address.setProvinceName(provinceName);<br>address.setCityName(cityName);<br>address.setAreaName(areaName);<br></code></pre></td></tr></table></figure><h3 id="4-新增收货地址-前端页面测试"><a href="#4-新增收货地址-前端页面测试" class="headerlink" title="4 新增收货地址-前端页面测试"></a>4 新增收货地址-前端页面测试</h3><p>1.完成后启动项目，打开浏览器先登录，再访问<a href="http://localhost:8080/web/addAddress.html%E9%A1%B5%E9%9D%A2%E3%80%82%E8%BE%93%E5%85%A5%E6%94%B6%E8%B4%A7%E4%BA%BA%E7%9B%B8%E5%85%B3%E7%9A%84%E4%BF%A1%E6%81%AF%E5%B9%B6%E4%BF%9D%E5%AD%98%E3%80%82">http://localhost:8080/web/addAddress.html页面。输入收货人相关的信息并保存。</a></p><p><img src="7.png" alt="电脑商城06"></p><p>2.在后台数据库中检查数据是否被正常的插入到t_address表中。</p><p><img src="8.png" alt="电脑商城06"></p><h2 id="收货地址列表"><a href="#收货地址列表" class="headerlink" title="收货地址列表"></a>收货地址列表</h2><h3 id="1-收货地址列表显示-持久层"><a href="#1-收货地址列表显示-持久层" class="headerlink" title="1 收货地址列表显示-持久层"></a>1 收货地址列表显示-持久层</h3><h4 id="1-1-规划需要执行的SQL语句-1"><a href="#1-1-规划需要执行的SQL语句-1" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>显示当前登录用户的收货地址列表的SQL语句大致是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t_address where uid=? order by is_default desc, created_time desc;<br></code></pre></td></tr></table></figure><h4 id="1-2-接口与抽象方法-1"><a href="#1-2-接口与抽象方法-1" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>在AddressMapper接口中添加findByUid(Integer uid)抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询某用户的收货地址列表数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 收货地址归属的用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 该用户的收货地址列表数据</span><br><span class="hljs-comment"> */</span><br>List&lt;Address&gt; <span class="hljs-title function_">findByUid</span><span class="hljs-params">(Integer uid)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3-配置SQL映射-1"><a href="#1-3-配置SQL映射-1" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在AddressMapper.xml文件中配置findByUid(Integer uid)方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">&lt;resultMap id=&quot;AddressEntityMap&quot; type=&quot;cn.tedu.store.entity.Address&quot;&gt;</span><br><span class="hljs-comment">&lt;id column=&quot;aid&quot; property=&quot;aid&quot;/&gt;</span><br><span class="hljs-comment">&lt;result column=&quot;province_code&quot; property=&quot;provinceCode&quot;/&gt;</span><br><span class="hljs-comment">&lt;result column=&quot;province_name&quot; property=&quot;provinceName&quot;/&gt;</span><br><span class="hljs-comment">&lt;result column=&quot;city_code&quot; property=&quot;cityCode&quot;/&gt;</span><br><span class="hljs-comment">&lt;result column=&quot;city_name&quot; property=&quot;cityName&quot;/&gt;</span><br><span class="hljs-comment">&lt;result column=&quot;area_code&quot; property=&quot;areaCode&quot;/&gt;</span><br><span class="hljs-comment">&lt;result column=&quot;area_name&quot; property=&quot;areaName&quot;/&gt;</span><br><span class="hljs-comment">&lt;result column=&quot;is_default&quot; property=&quot;isDefault&quot;/&gt;</span><br><span class="hljs-comment">&lt;result column=&quot;created_user&quot; property=&quot;createdUser&quot;/&gt;</span><br><span class="hljs-comment">&lt;result column=&quot;created_time&quot; property=&quot;createdTime&quot;/&gt;</span><br><span class="hljs-comment">&lt;result column=&quot;modified_user&quot; property=&quot;modifiedUser&quot;/&gt;</span><br><span class="hljs-comment">&lt;result column=&quot;modified_time&quot; property=&quot;modifiedTime&quot;/&gt;</span><br><span class="hljs-comment">&lt;/resultMap&gt;</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-comment">&lt;!-- 查询某用户的收货地址列表数据：List&lt;Address&gt; findByUid(Integer uid) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;AddressEntityMap&quot;</span>&gt;</span><br>SELECT<br>*<br>FROM<br>t_address<br>WHERE<br>uid=#&#123;uid&#125;<br>ORDER BY<br>is_default DESC, created_time DESC<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在AddressMapperTests测试类中添加findByUid()测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByUid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">26</span>;<br>    List&lt;Address&gt; list = addressMapper.findByUid(uid);<br>    System.out.println(<span class="hljs-string">&quot;count=&quot;</span> + list.size());<br>    <span class="hljs-keyword">for</span> (Address item : list) &#123;<br>        System.out.println(item);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-收货地址列表显示-业务层"><a href="#2-收货地址列表显示-业务层" class="headerlink" title="2 收货地址列表显示-业务层"></a>2 收货地址列表显示-业务层</h3><h4 id="2-1-规划异常-1"><a href="#2-1-规划异常-1" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><blockquote><p><strong>说明</strong>：无异常。</p></blockquote><h4 id="2-2-接口与抽象方法-2"><a href="#2-2-接口与抽象方法-2" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在IAddressService接口中添加getByUid(Integer uid)抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询某用户的收货地址列表数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 收货地址归属的用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 该用户的收货地址列表数据</span><br><span class="hljs-comment"> */</span><br>List&lt;Address&gt; <span class="hljs-title function_">getByUid</span><span class="hljs-params">(Integer uid)</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-实现抽象方法-1"><a href="#2-3-实现抽象方法-1" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在AddressServiceImpl类中实现getByUid(Integer uid)抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Address&gt; <span class="hljs-title function_">getByUid</span><span class="hljs-params">(Integer uid)</span> &#123;<br>List&lt;Address&gt; list = addressMapper.findByUid(uid);<br><span class="hljs-keyword">for</span> (Address address : list) &#123;<br>address.setUid(<span class="hljs-literal">null</span>);<br>address.setProvinceCode(<span class="hljs-literal">null</span>);<br>address.setCityCode(<span class="hljs-literal">null</span>);<br>address.setAreaCode(<span class="hljs-literal">null</span>);<br>address.setCreatedUser(<span class="hljs-literal">null</span>);<br>address.setCreatedTime(<span class="hljs-literal">null</span>);<br>address.setModifiedUser(<span class="hljs-literal">null</span>);<br>address.setModifiedTime(<span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在AddressServiceTests测试类中添加getByUid()测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getByUid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">26</span>;<br>    List&lt;Address&gt; list = addressService.getByUid(uid);<br>    System.out.println(<span class="hljs-string">&quot;count=&quot;</span> + list.size());<br>    <span class="hljs-keyword">for</span> (Address item : list) &#123;<br>        System.out.println(item);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-收货地址列表显示-控制器"><a href="#3-收货地址列表显示-控制器" class="headerlink" title="3 收货地址列表显示-控制器"></a>3 收货地址列表显示-控制器</h3><h4 id="3-1-处理异常"><a href="#3-1-处理异常" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><blockquote><p><strong>说明</strong>：无异常。</p></blockquote><h4 id="3-2-设计请求"><a href="#3-2-设计请求" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/addresses请求参数：HttpSession session请求类型：GET响应结果：JsonResult&lt;List&lt;Address&gt;&gt;</code></pre><h4 id="3-3-处理请求"><a href="#3-3-处理请求" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在AddressController类中添加处理请求的getByUid(HttpSession session)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&#123;&quot;&quot;, &quot;/&quot;&#125;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;List&lt;Address&gt;&gt; <span class="hljs-title function_">getByUid</span><span class="hljs-params">(HttpSession session)</span> &#123;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>List&lt;Address&gt; data = addressService.getByUid(uid);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.完成后启动项目，打开浏览器先登录，再访问<a href="http://localhost:8080/addresses%E9%A1%B5%E9%9D%A2%E3%80%82">http://localhost:8080/addresses页面。</a></p><p><img src="9.png" alt="电脑商城06"></p><h3 id="4-收货地址列表显示-前端页面"><a href="#4-收货地址列表显示-前端页面" class="headerlink" title="4 收货地址列表显示-前端页面"></a>4 收货地址列表显示-前端页面</h3><p>1.在address.html页面中body标签内部的最后，添加展示用户收货地址列表数据的JavaScript代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">showAddressList</span>();<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showAddressList</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#address-list&quot;</span>).<span class="hljs-title function_">empty</span>();<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/addresses&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">let</span> list = json.<span class="hljs-property">data</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[i].<span class="hljs-property">name</span>);<br>                <span class="hljs-keyword">let</span> address = <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span><br>                    + <span class="hljs-string">&#x27;&lt;td&gt;#&#123;tag&#125;&lt;/td&gt;&#x27;</span><br>                    + <span class="hljs-string">&#x27;&lt;td&gt;#&#123;name&#125;&lt;/td&gt;&#x27;</span><br>                    + <span class="hljs-string">&#x27;&lt;td&gt;#&#123;province&#125;#&#123;city&#125;#&#123;area&#125;#&#123;address&#125;&lt;/td&gt;&#x27;</span><br>                    + <span class="hljs-string">&#x27;&lt;td&gt;#&#123;phone&#125;&lt;/td&gt;&#x27;</span><br>                    + <span class="hljs-string">&#x27;&lt;td&gt;&lt;a class=&quot;btn btn-xs btn-info&quot;&gt;&lt;span class=&quot;fa fa-edit&quot;&gt;&lt;/span&gt; 修改&lt;/a&gt;&lt;/td&gt;&#x27;</span><br>                    + <span class="hljs-string">&#x27;&lt;td&gt;&lt;a class=&quot;btn btn-xs add-del btn-info&quot;&gt;&lt;span class=&quot;fa fa-trash-o&quot;&gt;&lt;/span&gt; 删除&lt;/a&gt;&lt;/td&gt;&#x27;</span><br>                    + <span class="hljs-string">&#x27;&lt;td&gt;&lt;a class=&quot;btn btn-xs add-def btn-default&quot;&gt;设为默认&lt;/a&gt;&lt;/td&gt;&#x27;</span><br>                + <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br><br>                address = address.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;aid&#125;/g</span>, list[i].<span class="hljs-property">aid</span>);<br>                address = address.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#&#123;tag&#125;/g</span>, list[i].<span class="hljs-property">tag</span>);<br>                address = address.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;name&#125;&quot;</span>, list[i].<span class="hljs-property">name</span>);<br>                address = address.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;province&#125;&quot;</span>, list[i].<span class="hljs-property">provinceName</span>);<br>                address = address.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;city&#125;&quot;</span>, list[i].<span class="hljs-property">cityName</span>);<br>                address = address.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;area&#125;&quot;</span>, list[i].<span class="hljs-property">areaName</span>);<br>                address = address.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;address&#125;&quot;</span>, list[i].<span class="hljs-property">address</span>);<br>                address = address.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;#&#123;phone&#125;&quot;</span>, list[i].<span class="hljs-property">phone</span>);<br><br>                $(<span class="hljs-string">&quot;#address-list&quot;</span>).<span class="hljs-title function_">append</span>(address);<br>            &#125;<br>            $(<span class="hljs-string">&quot;.add-def:eq(0)&quot;</span>).<span class="hljs-title function_">hide</span>();<br>        &#125;<br>    &#125;);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.完成后启动项目，打开浏览器先登录，再访问<a href="http://localhost:8080/web/address.html%E9%A1%B5%E9%9D%A2%E3%80%82">http://localhost:8080/web/address.html页面。</a></p><p><img src="10.png" alt="电脑商城06"></p><h2 id="默认收货地址"><a href="#默认收货地址" class="headerlink" title="默认收货地址"></a>默认收货地址</h2><h3 id="1-默认收货地址-持久层"><a href="#1-默认收货地址-持久层" class="headerlink" title="1 默认收货地址-持久层"></a>1 默认收货地址-持久层</h3><h4 id="1-1-规划需要执行的SQL语句-2"><a href="#1-1-规划需要执行的SQL语句-2" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>1.将某用户的所有收货地址设置为非默认地址（是否默认：0-不默认，1-默认）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update t_address set is_default=0 where uid=?<br></code></pre></td></tr></table></figure><p>2.将某用户指定的收货地址设置为默认地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update t_address set is_default=1, modified_user=?, modified_time=? where aid=?<br></code></pre></td></tr></table></figure><p>3.检查该收货地址是否存在，并检查数据归属是否正确。可根据收货地址aid值，查询收货地址详情数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t_address where aid=?<br></code></pre></td></tr></table></figure><h4 id="1-2-接口与抽象方法-2"><a href="#1-2-接口与抽象方法-2" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>在AddressMapper接口中声明三个抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将某用户的所有收货地址设置为非默认地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 收货地址归属的用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment"> */</span><br>Integer <span class="hljs-title function_">updateNonDefaultByUid</span><span class="hljs-params">(Integer uid)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将指定的收货地址设置为默认地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> aid 收货地址id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modifiedUser 修改执行人</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modifiedTime 修改时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment"> */</span><br>Integer <span class="hljs-title function_">updateDefaultByAid</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@Param(&quot;aid&quot;)</span> Integer aid,</span><br><span class="hljs-params">        <span class="hljs-meta">@Param(&quot;modifiedUser&quot;)</span> String modifiedUser,</span><br><span class="hljs-params">        <span class="hljs-meta">@Param(&quot;modifiedTime&quot;)</span> Date modifiedTime)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据收货地址aid值，查询收货地址详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> aid 收货地址id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 匹配的收货地址详情，如果没有匹配的数据，则返回null</span><br><span class="hljs-comment"> */</span><br>Address <span class="hljs-title function_">findByAid</span><span class="hljs-params">(Integer aid)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3-配置SQL映射-2"><a href="#1-3-配置SQL映射-2" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在AddressMapper.xml映射文件，配置以上三个抽象方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将某用户的所有收货地址设置为非默认地址：Integer updateNonDefaultByUid(Integer uid) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateNonDefaultByUid&quot;</span>&gt;</span><br>    UPDATE<br>    t_address<br>    SET<br>    is_default=0<br>    WHERE<br>    uid=#&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 将指定的收货地址设置为默认地址：</span><br><span class="hljs-comment">         Integer updateDefaultByAid(</span><br><span class="hljs-comment">            @Param(&quot;aid&quot;) Integer aid,</span><br><span class="hljs-comment">            @Param(&quot;modifiedUser&quot;) String modifiedUser,</span><br><span class="hljs-comment">            @Param(&quot;modifiedTime&quot;) Date modifiedTime) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateDefaultByAid&quot;</span>&gt;</span><br>    UPDATE<br>    t_address<br>    SET<br>        is_default=1,<br>        modified_user=#&#123;modifiedUser&#125;,<br>        modified_time=#&#123;modifiedTime&#125;<br>    WHERE<br>    aid=#&#123;aid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 根据收货地址aid值，查询收货地址详情：Address findByAid(Integer aid) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByAid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;AddressEntityMap&quot;</span>&gt;</span><br>    SELECT<br>    *<br>    FROM<br>    t_address<br>    WHERE<br>    aid=#&#123;aid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在AddressMapperTests类中编写并执行以上三个抽象方法的测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateNonDefaultByUid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">26</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> addressMapper.updateNonDefaultByUid(uid);<br>    System.out.println(<span class="hljs-string">&quot;rows=&quot;</span> + rows);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateDefaultByAid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">aid</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">modifiedUser</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;管理员&quot;</span>;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">modifiedTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> addressMapper.updateDefaultByAid(aid, modifiedUser, modifiedTime);<br>    System.out.println(<span class="hljs-string">&quot;rows=&quot;</span> + rows);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByAid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">aid</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br>    <span class="hljs-type">Address</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> addressMapper.findByAid(aid);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-默认收货地址-业务层"><a href="#2-默认收货地址-业务层" class="headerlink" title="2 默认收货地址-业务层"></a>2 默认收货地址-业务层</h3><h4 id="2-1-规划异常-2"><a href="#2-1-规划异常-2" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>1.在执行设置默认收货地址之前，需要先检查该收货地址数据是否存在，如果不存在则抛出AddressNotFoundException异常。</p><p>2.然后还需要检查数据归属是否正确，也就是不可以操作他人的数据，如果该数据中记录的uid与当前登录的用户的uid不一致，则抛出AccessDeniedException异常。</p><p>3.检查通过后先全部设置为非默认，然后将指定的收货地址设置为默认；这两种操作都是更新数据的操作，则可能抛出UpdateException异常。</p><p>4.在com.cy.store.service.ex包下创建AddressNotFoundException和AccessDeniedException异常类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 收货地址数据不存在的异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressNotFoundException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 非法访问的异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccessDeniedException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-接口与抽象方法-3"><a href="#2-2-接口与抽象方法-3" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在IAddressService接口中添加setDefault(Integer aid, Integer uid, String username)抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置默认收货地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> aid 收货地址id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 归属的用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 当前登录的用户名</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefault</span><span class="hljs-params">(Integer aid, Integer uid, String username)</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-实现抽象方法-2"><a href="#2-3-实现抽象方法-2" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在AddressServiceImpl类中重写setDefault(Integer aid, Integer uid, String username)方法。该方法需要添加@Transactional注解。</p><blockquote><p>事务：基于Spring JDBC的事务（Transaction）处理，使用事务可以保证一系列的增删改操作，要么全部执行成功，要么全部执行失败。@Transactional注解可以用来修饰类也可以用来修饰方法。如果添加在业务类之前，则该业务类中的方法均以事务的机制运行，但是一般并不推荐这样处理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefault</span><span class="hljs-params">(Integer aid, Integer uid, String username)</span> &#123;<br><span class="hljs-comment">// 根据参数aid，调用addressMapper中的findByAid()查询收货地址数据</span><br><span class="hljs-comment">// 判断查询结果是否为null</span><br><span class="hljs-comment">// 是：抛出AddressNotFoundException</span><br><br><span class="hljs-comment">// 判断查询结果中的uid与参数uid是否不一致(使用equals()判断)</span><br><span class="hljs-comment">// 是：抛出AccessDeniedException：非法访问</span><br><br><span class="hljs-comment">// 调用addressMapepr的updateNonDefaultByUid()将该用户的所有收货地址全部设置为非默认，并获取返回的受影响的行数</span><br><span class="hljs-comment">// 判断受影响的行数是否小于1(不大于0)</span><br><span class="hljs-comment">// 是：抛出UpdateException</span><br><br><span class="hljs-comment">// 调用addressMapepr的updateDefaultByAid()将指定aid的收货地址设置为默认，并获取返回的受影响的行数</span><br><span class="hljs-comment">// 判断受影响的行数是否不为1</span><br><span class="hljs-comment">// 是：抛出UpdateException</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.setDefault(Integer aid, Integer uid, String username)方法的具体代码实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefault</span><span class="hljs-params">(Integer aid, Integer uid, String username)</span> &#123;<br>    <span class="hljs-comment">// 根据参数aid，调用addressMapper中的findByAid()查询收货地址数据</span><br>    <span class="hljs-type">Address</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> addressMapper.findByAid(aid);<br>    <span class="hljs-comment">// 判断查询结果是否为null</span><br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 是：抛出AddressNotFoundException</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressNotFoundException</span>(<span class="hljs-string">&quot;尝试访问的收货地址数据不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断查询结果中的uid与参数uid是否不一致(使用equals()判断)</span><br>    <span class="hljs-keyword">if</span> (!result.getUid().equals(uid)) &#123;<br>        <span class="hljs-comment">// 是：抛出AccessDeniedException</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedException</span>(<span class="hljs-string">&quot;非法访问的异常&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 调用addressMapper的updateNonDefaultByUid()将该用户的所有收货地址全部设置为非默认，并获取返回受影响的行数</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> addressMapper.updateNonDefaultByUid(uid);<br>    <span class="hljs-comment">// 判断受影响的行数是否小于1(不大于0)</span><br>    <span class="hljs-keyword">if</span> (rows &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 是：抛出UpdateException</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;设置默认收货地址时出现未知错误[1]&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 调用addressMapper的updateDefaultByAid()将指定aid的收货地址设置为默认，并获取返回的受影响的行数</span><br>    rows = addressMapper.updateDefaultByAid(aid, username, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-comment">// 判断受影响的行数是否不为1</span><br>    <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 是：抛出UpdateException</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;设置默认收货地址时出现未知错误[2]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在AddressServiceTests测试类，编写并执行单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefault</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">aid</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">27</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;系统管理员&quot;</span>;<br>        addressService.setDefault(aid, uid, username);<br>        System.out.println(<span class="hljs-string">&quot;OK.&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>        System.out.println(e.getClass().getSimpleName());<br>        System.out.println(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-默认收货地址-控制器"><a href="#3-默认收货地址-控制器" class="headerlink" title="3 默认收货地址-控制器"></a>3 默认收货地址-控制器</h3><h4 id="3-1-处理异常-1"><a href="#3-1-处理异常-1" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p>在BaseController类中添加处理AddressNotFoundException和AccessDeniedException的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> AddressNotFoundException) &#123;<br>    result.setState(<span class="hljs-number">4004</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> AccessDeniedException) &#123;<br>    result.setState(<span class="hljs-number">4005</span>);<br>&#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h4 id="3-2-设计请求-1"><a href="#3-2-设计请求-1" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/addresses/&#123;aid&#125;/set_default请求参数：@PathVaraible(&quot;aid&quot;) Integer aid, HttpSession sesion请求类型：POST响应结果：JsonResult&lt;Void&gt;</code></pre><p>REST即表述性状态传递（Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。</p><h4 id="3-3-处理请求-1"><a href="#3-3-处理请求-1" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在AddressController类中添加处理请求的setDefault(@PathVariable(“aid”) Integer aid, HttpSession session)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;&#123;aid&#125;/set_default&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">setDefault</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;aid&quot;)</span> Integer aid, HttpSession session)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromSession(session);<br>    addressService.setDefault(aid, uid, username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Void&gt;(OK);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.完成后启动项目，打开浏览器先登录，再访问<a href="http://localhost:8080/addresses/13/set_default%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/addresses/13/set_default进行测试。</a></p><p><img src="6.png" alt="电脑商城06"></p><h3 id="4-默认收货地址-前端页面"><a href="#4-默认收货地址-前端页面" class="headerlink" title="4 默认收货地址-前端页面"></a>4 默认收货地址-前端页面</h3><p>1.在address.html页面中body标签内部的script标签内，添加设置用户默认收货地址的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">setDefault</span>(<span class="hljs-params">aid</span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/addresses/&quot;</span> + aid + <span class="hljs-string">&quot;/set_default&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-title function_">showAddressList</span>();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;设置默认收货地址失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;您的登录信息已经过期，请重新登录！HTTP响应码：&quot;</span> + xhr.<span class="hljs-property">status</span>);<br>            location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;login.html&quot;</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.给showAddressList()方法中的“设为默认”超链接按钮添加设置默认收货地址的点击事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;td&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;setDefault(#&#123;aid&#125;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-xs add-def btn-default&quot;</span>&gt;</span>设为默认<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/td&gt;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，打开浏览器先登录，再访问<a href="http://localhost:8080/web/address.html%E9%A1%B5%E9%9D%A2%EF%BC%8C%E7%82%B9%E5%87%BB%E2%80%9C%E8%AE%BE%E4%B8%BA%E9%BB%98%E8%AE%A4%E2%80%9D%E8%B6%85%E9%93%BE%E6%8E%A5%E6%8C%89%E9%92%AE%E8%BF%9B%E8%A1%8C%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/address.html页面，点击“设为默认”超链接按钮进行功能测试。</a></p><h2 id="删除收货地址"><a href="#删除收货地址" class="headerlink" title="删除收货地址"></a>删除收货地址</h2><h3 id="1-删除收货地址-持久层"><a href="#1-删除收货地址-持久层" class="headerlink" title="1 删除收货地址-持久层"></a>1 删除收货地址-持久层</h3><h4 id="1-1-规划需要执行的SQL语句-3"><a href="#1-1-规划需要执行的SQL语句-3" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>1.在删除之前，需检查数据是否存在，数据归属是否正确。此功能已完成，无需再次开发。</p><p>2.删除指定的收货地址的SQL语句大致是。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from t_address where aid=?<br></code></pre></td></tr></table></figure><p>3.如果删除的这条数据是默认收货地址，则应该将剩余的收货地址中的某一条设置为默认收货地址，可以设定规则“将最近修改的设置为默认收货地址”，要实现此功能就必须要知道“最近修改的收货地址的id是多少”。则通过以下查询语句完成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t_address where uid=? order by modified_time desc limit 0,1<br></code></pre></td></tr></table></figure><p>4.在执行以上操作之前，还需检查该用户的收货地址数据的数量，如果删除的收货地址是最后一条收货地址，则删除成功后无需再执行其他操作。统计收货地址数量的功能此前已经完成，无需再次开发。</p><h4 id="1-2-接口与抽象方法-3"><a href="#1-2-接口与抽象方法-3" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>在AddressMapper接口中添加抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据收货地址id删除数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> aid 收货地址id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 受影响的行数</span><br><span class="hljs-comment"> */</span><br>Integer <span class="hljs-title function_">deleteByAid</span><span class="hljs-params">(Integer aid)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询某用户最后修改的收货地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 归属的用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 该用户最后修改的收货地址，如果该用户没有收货地址数据则返回null</span><br><span class="hljs-comment"> */</span><br>Address <span class="hljs-title function_">findLastModified</span><span class="hljs-params">(Integer uid)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3-配置SQL映射-3"><a href="#1-3-配置SQL映射-3" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在AddressMapper.xml文件中添加以上两个抽象方法的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 根据收货地址id删除数据：Integer deleteByAid(Integer aid) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByAid&quot;</span>&gt;</span><br>    DELETE FROM<br>        t_address<br>    WHERE<br>        aid=#&#123;aid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 查询某用户最后修改的收货地址：Address findLastModified(Integer uid) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findLastModified&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;AddressEntityMap&quot;</span>&gt;</span><br>    SELECT<br>        *<br>    FROM<br>        t_address<br>    WHERE<br>        uid=#&#123;uid&#125;<br>    ORDER BY<br>        modified_time DESC<br>        LIMIT 0,1<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在AddressMapperTests测试类中添加单元测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByAid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">aid</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> addressMapper.deleteByAid(aid);<br>    System.out.println(<span class="hljs-string">&quot;rows=&quot;</span> + rows);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findLastModified</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>    <span class="hljs-type">Address</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> addressMapper.findLastModified(uid);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-删除收货地址-业务层"><a href="#2-删除收货地址-业务层" class="headerlink" title="2 删除收货地址-业务层"></a>2 删除收货地址-业务层</h3><h4 id="2-1-规划异常-3"><a href="#2-1-规划异常-3" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>在执行删除操作时，可能会删除数据失败，此时抛出DeleteException异常。在创建com.cy.store.service.ex.DeleteException异常类，并继承自ServiceException类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.store.service.ex;<br><br><span class="hljs-comment">/** 删除数据失败的异常 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeleteException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">// Override Methods...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-接口与抽象方法-4"><a href="#2-2-接口与抽象方法-4" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在IAddressService接口中添加删除收货地址的抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除收货地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> aid 收货地址id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 归属的用户id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 当前登录的用户名</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer aid, Integer uid, String username)</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-实现抽象方法-3"><a href="#2-3-实现抽象方法-3" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在AddressServiceImpl实现类中实现以上两个抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer aid, Integer uid, String username)</span> &#123;<br>    <span class="hljs-comment">// 根据参数aid，调用findByAid()查询收货地址数据</span><br>    <span class="hljs-type">Address</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> addressMapper.findByAid(aid);<br>    <span class="hljs-comment">// 判断查询结果是否为null</span><br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 是：抛出AddressNotFoundException</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressNotFoundException</span>(<span class="hljs-string">&quot;尝试访问的收货地址数据不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断查询结果中的uid与参数uid是否不一致(使用equals()判断)</span><br>    <span class="hljs-keyword">if</span> (!result.getUid().equals(uid)) &#123;<br>        <span class="hljs-comment">// 是：抛出AccessDeniedException：非法访问</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedException</span>(<span class="hljs-string">&quot;非常访问&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 根据参数aid，调用deleteByAid()执行删除</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows1</span> <span class="hljs-operator">=</span> addressMapper.deleteByAid(aid);<br>    <span class="hljs-keyword">if</span> (rows1 != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteException</span>(<span class="hljs-string">&quot;删除收货地址数据时出现未知错误，请联系系统管理员&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断查询结果中的isDefault是否为0</span><br>    <span class="hljs-keyword">if</span> (result.getIsDefault() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 调用持久层的countByUid()统计目前还有多少收货地址</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> addressMapper.countByUid(uid);<br>    <span class="hljs-comment">// 判断目前的收货地址的数量是否为0</span><br>    <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 调用findLastModified()找出用户最近修改的收货地址数据</span><br>    <span class="hljs-type">Address</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> addressMapper.findLastModified(uid);<br>    <span class="hljs-comment">// 从以上查询结果中找出aid属性值</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">lastModifiedAid</span> <span class="hljs-operator">=</span> lastModified.getAid();<br>    <span class="hljs-comment">// 调用持久层的updateDefaultByAid()方法执行设置默认收货地址，并获取返回的受影响的行数</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows2</span> <span class="hljs-operator">=</span> addressMapper.updateDefaultByAid(lastModifiedAid, username, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-comment">// 判断受影响的行数是否不为1</span><br>    <span class="hljs-keyword">if</span> (rows2 != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 是：抛出UpdateException</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;更新收货地址数据时出现未知错误，请联系系统管理员&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在AddressServiceTests测试类中添加单元测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">aid</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;明明&quot;</span>;<br>        addressService.delete(aid, uid, username);<br>        System.out.println(<span class="hljs-string">&quot;OK.&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>        System.out.println(e.getClass().getSimpleName());<br>        System.out.println(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-删除收货地址-控制器"><a href="#3-删除收货地址-控制器" class="headerlink" title="3 删除收货地址-控制器"></a>3 删除收货地址-控制器</h3><h4 id="3-1-处理异常-2"><a href="#3-1-处理异常-2" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p>在BaseController类中添加DeleteException异常的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> DeleteException) &#123;<br>    result.setState(<span class="hljs-number">5002</span>);<br>&#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h4 id="3-2-设计请求-2"><a href="#3-2-设计请求-2" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p><pre><code class="hljs">请求路径：/addresses/&#123;aid&#125;/delete请求参数：@PathVariable(&quot;aid&quot;) Integer aid, HttpSession session请求类型：POST响应结果：JsonResult&lt;Void&gt;</code></pre><h4 id="3-3-处理请求-2"><a href="#3-3-处理请求-2" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在AddressController类中添加处理请求的delete()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;&#123;aid&#125;/delete&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;aid&quot;)</span> Integer aid, HttpSession session)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromSession(session);<br>    addressService.delete(aid, uid, username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;Void&gt;(OK);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.完成后启动项目，打开浏览器先登录，再访问<a href="http://localhost:8080/addresses/26/delete%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/addresses/26/delete进行测试。</a></p><h3 id="4-删除收货地址-前端页面"><a href="#4-删除收货地址-前端页面" class="headerlink" title="4 删除收货地址-前端页面"></a>4 删除收货地址-前端页面</h3><p>1.在address.html页面中body标签内部的script标签内，添加设置用户删除收货地址的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteByAid</span>(<span class="hljs-params">aid</span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/addresses/&quot;</span> + aid + <span class="hljs-string">&quot;/delete&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-title function_">showAddressList</span>();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;删除收货地址失败！&quot;</span> + json.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;您的登录信息已经过期，请重新登录！HTTP响应码：&quot;</span> + json.<span class="hljs-property">status</span>);<br>            location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;login.html&quot;</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.给showAddressList()方法中的“设为默认”超链接按钮添加设置默认收货地址的点击事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;td&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;deleteByAid(#&#123;aid&#125;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-xs add-del btn-info&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-trash-o&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/td&gt;<br></code></pre></td></tr></table></figure><p>3.完成后启动项目，打开浏览器先登录，再访问<a href="http://localhost:8080/web/address.html%E9%A1%B5%E9%9D%A2%EF%BC%8C%E7%82%B9%E5%87%BB%E2%80%9C%E5%88%A0%E9%99%A4%E2%80%9D%E8%B6%85%E9%93%BE%E6%8E%A5%E6%8C%89%E9%92%AE%E8%BF%9B%E8%A1%8C%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/address.html页面，点击“删除”超链接按钮进行功能测试。</a></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>电脑商城</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>项目练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城05</title>
    <link href="/2023/04/27/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E05/"/>
    <url>/2023/04/27/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E05/</url>
    
    <content type="html"><![CDATA[<h2 id="上传头像"><a href="#上传头像" class="headerlink" title="上传头像"></a>上传头像</h2><p>错误方法:把文件存到数据库中,需要图片时访问数据库,数据库将文件解析为字节流返回,最后写到本地的某一个文件.这种方法太耗费资源和时间了</p><p>正确方法:将对应的文件保存在操作系统上,然后再把这个文件路径记录下来,因为在记录路径的时候是非常便捷和方便的,将来如果要打开这个文件可以依据这个路径找到这个文件,所以说在数据库中保存该文件的路径即可.</p><p>稍微大一点的公司都会将所有的静态资源(图片,文件,其他资源文件)放到某台电脑上,再把这台电脑作为一台单独的服务器使用</p><h3 id="1-上传头像-持久层"><a href="#1-上传头像-持久层" class="headerlink" title="1.上传头像-持久层"></a>1.上传头像-持久层</h3><h4 id="1-1SQL语句的规划"><a href="#1-1SQL语句的规划" class="headerlink" title="1.1SQL语句的规划"></a>1.1SQL语句的规划</h4><p>更新用户avatar字段的sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> t_user <span class="hljs-keyword">set</span> avatar<span class="hljs-operator">=</span>?,modified_user<span class="hljs-operator">=</span>?,modified_time<span class="hljs-operator">=</span>? <span class="hljs-keyword">where</span> uid<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><h4 id="1-2设计接口和抽象方法"><a href="#1-2设计接口和抽象方法" class="headerlink" title="1.2设计接口和抽象方法"></a>1.2设计接口和抽象方法</h4><p>在UserMapper接口中定义一个抽象方法用于修改用户的头像</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户uid修改用户的头像</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> iddddd</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> avatar</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modifiedUser</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modifiedTime</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注解<span class="hljs-doctag">@Param</span>(&quot;SQL映射文件中#&#123;&#125;占位符的变量名&quot;),解决的问题:</span><br><span class="hljs-comment"> * 当SQL语句的占位符和映射的接口方法参数名不一致时,需要将某个参数强行注入到某个</span><br><span class="hljs-comment"> * 占位符变量上时,可以使用<span class="hljs-doctag">@Param</span>这个注解来标注映射的关系</span><br><span class="hljs-comment"> * */</span><br>Integer <span class="hljs-title function_">updateAvatarByUid</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;uid&quot;)</span> Integer iddddd,//<span class="hljs-meta">@Param(&quot;参数名&quot;)</span>注解中的参数名需要和sql语句中</span><br><span class="hljs-params">                          //的#&#123;参数名&#125;的参数名保持一致.该处表示iddddd中的变量值要注入到sql语句的uid中</span><br><span class="hljs-params">                          String avatar,</span><br><span class="hljs-params">                          String modifiedUser,</span><br><span class="hljs-params">                          Date modifiedTime)</span>;<br><br></code></pre></td></tr></table></figure><h4 id="1-3编写映射"><a href="#1-3编写映射" class="headerlink" title="1.3编写映射"></a>1.3编写映射</h4><p>UserMapper.xml文件中编写映射的SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateAvatarByUid&quot;</span>&gt;</span><br>    update t_user<br>    set<br>        avatar = #&#123;avatar&#125;,<br>        modified_user = #&#123;modifiedUser&#125;,<br>        modified_time = #&#123;modifiedTime&#125;<br>    where<br>        uid = #&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="1-4单元测试"><a href="#1-4单元测试" class="headerlink" title="1.4单元测试"></a>1.4单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAvatarByUid</span><span class="hljs-params">()</span> &#123;<br>    userMapper.updateAvatarByUid(<br>        <span class="hljs-number">11</span>,<br>        <span class="hljs-string">&quot;abc&quot;</span>,<br>        <span class="hljs-string">&quot;mxy&quot;</span>,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-上传头像-业务层"><a href="#2-上传头像-业务层" class="headerlink" title="2.上传头像-业务层"></a>2.上传头像-业务层</h3><h4 id="2-1规划异常"><a href="#2-1规划异常" class="headerlink" title="2.1规划异常"></a>2.1规划异常</h4><ul><li>用户数据不存在,找不到对应的用户数据</li><li>更新的时候,出现未知异常</li></ul><blockquote><p>无需重复开发</p></blockquote><h4 id="2-2设计接口和抽象方法及实现"><a href="#2-2设计接口和抽象方法及实现" class="headerlink" title="2.2设计接口和抽象方法及实现"></a>2.2设计接口和抽象方法及实现</h4><p>1.先分析一下业务层接口需要哪些参数:那就需要看持久层接口要的有什么参数:</p><p>uid,avatar,modifiedUser,modifiedTime,其中modifiedTime是在方法中创建的,uid和modifiedUser从session中获取,但是session对象是在控制层的并不会出现在业务层,所以业务层要保留这两个参数,以便控制层可以传递过来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改用户的头像</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 用户uid</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> avatar 用户头像的路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 用户名称</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">(Integer uid,</span><br><span class="hljs-params">                  String avatar,</span><br><span class="hljs-params">                  String username)</span>;<span class="hljs-comment">//业务层一般叫username而不叫modifiedUser,因</span><br>                                    <span class="hljs-comment">// 为业务层并没有直接和数据库关联</span><br><br></code></pre></td></tr></table></figure><p>2.编写业务层的更新用户头像的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">(Integer uid, String avatar, String username)</span> &#123;<br>    <span class="hljs-comment">//查询当前的用户数据是否存在</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUid(uid);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> || result.getIsDelete() == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.updateAvatarByUid(uid, avatar, username, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-keyword">if</span> (rows!=<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;更新用户头像时产生未知异常&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-3单元测试"><a href="#2-3单元测试" class="headerlink" title="2.3单元测试"></a>2.3单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">()</span> &#123;<br>    userService.changeAvatar(<span class="hljs-number">11</span>,<span class="hljs-string">&quot;222&quot;</span>,<span class="hljs-string">&quot;mmm&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-上传头像-控制层"><a href="#3-上传头像-控制层" class="headerlink" title="3.上传头像-控制层"></a>3.上传头像-控制层</h3><p>文件上传过程中产生的异常太多了,再比如文件类型不匹配或文件被损坏</p><h4 id="3-1规划异常"><a href="#3-1规划异常" class="headerlink" title="3.1规划异常"></a>3.1规划异常</h4><pre><code class="hljs">客户端传递文件给服务器,服务器的控制端controller接收文件,接收时可能抛出异常,因为用户传过来的文件有可能超出了我们的大小限制该异常能放在业务层抛出吗?没必要的,因为此时数据是从控制层往下传的,所以控制层产生的异常直接在这一层(控制层)抛就可以了</code></pre><p>上传文件时的异常都是文件异常,所以可以先创建一个文件异常类的基类FileUploadException并使其继承RuntimeException</p><p>文件异常基类的子类有:</p><ul><li>FileEmptyException:文件为空的异常(没有选择上传的文件就提交了表单,或选择的文件是0字节的空文件)</li><li>FileSizeException:文件大小超出限制</li><li>FileTypeException:文件类型异常(上传的文件类型超出了限制)</li><li>FileUploadIOException:文件读写异常</li><li>FileStateException:文件状态异常(上穿文件时该文件正在打开状态)</li></ul><p>在controller包下创子包ex,在ex包里面创建文件异常类的基类和上述五个文件异常类,创建的六个类都重写其父类的五个构造方法</p><h4 id="3-2处理异常"><a href="#3-2处理异常" class="headerlink" title="3.2处理异常"></a>3.2处理异常</h4><p>在基类BaseController中进行编写和统一处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileEmptyException) &#123;<br>    result.setState(<span class="hljs-number">6000</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileSizeException) &#123;<br>    result.setState(<span class="hljs-number">6001</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileTypeException) &#123;<br>    result.setState(<span class="hljs-number">6002</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileStateException) &#123;<br>    result.setState(<span class="hljs-number">6003</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileUploadIOException) &#123;<br>    result.setState(<span class="hljs-number">6004</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>异常统一处理方法的修饰符@ExceptionHandler(ServiceException.class)表明我们现在创建的FileUploadException异常类不会被拦截到该方法中,点进@ExceptionHandler注解可以发现传参可以传数组类型,所以可以将异常统一处理方法上的注解改为:</p><p>@ExceptionHandler({ServiceException.class,FileUploadException.class})</p><h4 id="3-3设计请求"><a href="#3-3设计请求" class="headerlink" title="3.3设计请求"></a>3.3设计请求</h4><ul><li>/users/change_avatar</li><li>POST(GET请求提交数据只有2KB左右)</li><li>HttpSession session(获取uid和username),MultipartFile file</li><li>JsonResult<String>(不能是JsonResult<Void>:如果上传头像后浏览别的页面,然后再回到上传头像的页面就展示不出来了,所以图片一旦上传成功,就要保存该图片在服务器的哪个位置,这样的话一旦检测到进入上传头像的页面就可以通过保存的路径拿到图片,最后展示在页面上)</li></ul><h4 id="3-4处理请求"><a href="#3-4处理请求" class="headerlink" title="3.4处理请求"></a>3.4处理请求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;change_avatar&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;String&gt; <span class="hljs-title function_">changeAvatar</span><span class="hljs-params">(HttpSession session,</span><br><span class="hljs-params">                                       MultipartFile file)</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1.参数名为什么必须用file:在upload.html页面的147行&lt;input type=</span><br><span class="hljs-comment">     * &quot;file&quot; name=&quot;file&quot;&gt;中的name=&quot;file&quot;,所以必须有一个方法的参数名</span><br><span class="hljs-comment">     * 为file用于接收前端传递的该文件.如果想要参数名和前端的name不一</span><br><span class="hljs-comment">     * 样:<span class="hljs-doctag">@RequestParam</span>(&quot;file&quot;)MultipartFile ffff:把表单中name=</span><br><span class="hljs-comment">     * &quot;file&quot;的控件值传递到变量ffff上</span><br><span class="hljs-comment">     * 2.参数类型为什么必须是MultipartFile:这是springmvc中封装的一个</span><br><span class="hljs-comment">     * 包装接口,如果类型是MultipartFile并且参数名和前端上传文件的name</span><br><span class="hljs-comment">     * 相同,则会自动把整体的数据包传递给file</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//判断文件是否为null</span><br>    <span class="hljs-keyword">if</span> (file.isEmpty()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileEmptyException</span>(<span class="hljs-string">&quot;文件为空&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (file.getSize()&gt;AVATAR_MAX_SIZE) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSizeException</span>(<span class="hljs-string">&quot;文件超出限制&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//判断文件的类型是否是我们规定的后缀类型</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> file.getContentType();<br>    <span class="hljs-comment">//如果集合包含某个元素则返回值为true</span><br>    <span class="hljs-keyword">if</span> (!AVATAR_TYPE.contains(contentType)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileTypeException</span>(<span class="hljs-string">&quot;文件类型不支持&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//上传的文件路径:.../upload/文件名.png</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * session.getServletContext()获取当前Web应用程序的上下文</span><br><span class="hljs-comment">     * 对象(每次启动tomcat都会创建一个新的上下文对象)</span><br><span class="hljs-comment">     * getRealPath(&quot;/upload&quot;)的/代表当前web应用程序的根目录,通过该相</span><br><span class="hljs-comment">     * 对路径获取绝对路径,返回一个路径字符串,如果不能进行映射返回null,单</span><br><span class="hljs-comment">     * 斜杠可要可不要</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span><br>            session.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>    System.out.println(parent);<span class="hljs-comment">//调试用</span><br><br>    <span class="hljs-comment">//File对象指向这个路径,通过判断File是否存在得到该路径是否存在</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parent);<br>    <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<span class="hljs-comment">//检测目录是否存在</span><br>        dir.mkdirs();<span class="hljs-comment">//创建当前目录</span><br>    &#125;<br><br>    <span class="hljs-comment">//获取这个文件名称(文件名+后缀,如avatar01.png,不包含父目录结构)用UUID</span><br>    <span class="hljs-comment">// 工具生成一个新的字符串作为文件名(好处:避免了因文件名重复发生的覆盖)</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>    System.out.println(<span class="hljs-string">&quot;OriginalFilename=&quot;</span>+originalFilename);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> originalFilename.substring(index);<br>    <span class="hljs-comment">//filename形如SAFS1-56JHIOHI-HIUGHUI-5565TYRF.png</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span><br>            UUID.randomUUID().toString().toUpperCase()+suffix;<br><br>    <span class="hljs-comment">//在dir目录下创建filename文件(此时是空文件)</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir, filename);<br><br>    <span class="hljs-comment">//java可以把一个文件的数据直接写到同类型的文件中,这里将参数file中的数据写入到空文件dest中</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        file.transferTo(dest);<span class="hljs-comment">//transferTo是一个封装的方法,用来将file文件中的数据写入到dest文件</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 先捕获FileStateException再捕获IOException是</span><br><span class="hljs-comment">         * 因为后者包含前者,如果先捕获IOException那么</span><br><span class="hljs-comment">         * FileStateException就永远不可能会被捕获</span><br><span class="hljs-comment">         */</span><br>    &#125; <span class="hljs-keyword">catch</span> (FileStateException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileStateException</span>(<span class="hljs-string">&quot;文件状态异常&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-comment">//这里不用打印e,而是用自己写的FileUploadIOException类并</span><br>        <span class="hljs-comment">// 抛出文件读写异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileUploadIOException</span>(<span class="hljs-string">&quot;文件读写异常&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromSession(session);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">avatar</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/upload/&quot;</span>+filename;<br>    userService.changeAvatar(uid,avatar,username);<br>    <span class="hljs-comment">//返回用户头像的路径给前端页面,将来用于头像展示使用</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK,avatar);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-上传头像-前端页面"><a href="#4-上传头像-前端页面" class="headerlink" title="4.上传头像-前端页面"></a>4.上传头像-前端页面</h3><p>1.在upload.html的上传头像的表单加上三个属性:</p><pre><code class="hljs">action=“/users/change_avatar”method=“post”(get请求提交数据只有2KB左右)enctype=“multipart/form-data”(如果直接使用表单进行文件的上传,需要给表单加该属性,这样不会将目标文件的数据结构做修改后再上传,这不同于字符串,字符串随意切割修改也能拼在一起,但文件不行)</code></pre><p>2.确认&lt;input type=”file” ,name=”file”&gt;的type和name以及&lt;input type=“submit” class=“btn btn-primary” value=“上传” /&gt;中的type</p><h3 id="5-前端页面优化——修复bug"><a href="#5-前端页面优化——修复bug" class="headerlink" title="5.前端页面优化——修复bug"></a>5.前端页面优化——修复bug</h3><h4 id="5-1更改默认的大小限制"><a href="#5-1更改默认的大小限制" class="headerlink" title="5.1更改默认的大小限制"></a>5.1更改默认的大小限制</h4><p>springmvc默认为1MB文件可以进行上传,如果刚好是1024<em>1024=1048576 bytes则会报代码错误,自己在控制层设置的public static final int AVATAR_MAX_SIZE = 10</em>1024*1024;需要在不超过原有大小的情况下才会起作用,所以要手动修改springmvc默认上传文件的大小</p><p>方式1:直接在配置文件application.properties中进行配置:</p><pre><code class="hljs">spring.servlet.multipart.max-file-size=10MB(表示上传的文件最大是多大)spring.servlet.multipart.max-request-size=15MB(整个文件是放在了request中发送给服务器的,请求当中还会有消息头等其他携带的信息,这里设置请求最大为15MB)</code></pre><p>方式2:采用java代码的形式来设置文件的上传大小的限制:</p><p>1.该代码必须在主类中进行配置,因为主类是最早加载的,而配置文件必须是最早加载的</p><p>2.在主类中定义一个方法,方法名无所谓,但方法需要用@bean修饰,表示该方法返回值是一个bean对象,并且该bean对象被bean修饰,也就是这个方法返回了一个对象,然后把该对象交给bean管理,类似spring中的bean标签,含义是一样的,只是这里改为了注解</p><p>3.用@Configuration修饰主类使@bean注解生效,但其实@SpringBootApplication是@SpringBootConfiguration,@EnableAutoConfiguration,@ComponentScan三个注解的合并,所以可以不需要@Configuration</p><p>4.方法返回值是MultipartConfigElement类型,表示所要配置的目标的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MultipartConfigElement <span class="hljs-title function_">getMultipartConfigElement</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//1.创建一个配置的工厂类对象</span><br>    <span class="hljs-type">MultipartConfigFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MultipartConfigFactory</span>();<br><br>    <span class="hljs-comment">//2.设置需要创建的对象的相关信息</span><br>    factory.setMaxFileSize(DataSize.of(<span class="hljs-number">10</span>, DataUnit.MEGABYTES));<br>    factory.setMaxRequestSize(DataSize.of(<span class="hljs-number">15</span>,DataUnit.MEGABYTES));<br><br>    <span class="hljs-comment">//3.通过工厂类创建MultipartConfigElement对象</span><br>    <span class="hljs-keyword">return</span> factory.createMultipartConfig();<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="5-2上传后显示头像"><a href="#5-2上传后显示头像" class="headerlink" title="5.2上传后显示头像"></a>5.2上传后显示头像</h4><p>上传头像成功后不能显示头像.</p><p>在页面中通过ajax请求来提交文件,提交完成后返回了json串,解析出json串中的data数据设置到img标签的src属性上</p><p>1.删掉在upload.html的上传头像的表单中加的三个属性:action=“/users/change_avatar”,method=“post”,enctype=“multipart/form-data”.加上id属性:id=“form-change-avatar”</p><p>2.把153行的input标签里面的type=”submit”改为type=“button”(因为submit按钮不能添加事件,所以要改为普通的按钮)并加上属性id=“btn-change-avatar”</p><pre><code class="hljs">1.serialize():可以将表单数据自动拼接成key=value的结构提交给服务器,一般提交的是普通的控件类型中的数据(type=text/password/radio/checkbox等等)2.FormData类:将表单中数据保持原有的结构进行数据提交.文件类型的数据可以使用FormData对象进行存储使用方法:new FormData($(“form”)[0]);这行代码的含义是将id=&quot;form&quot;的表单的第一个元素的整体值作为创建FormData对象的数据3.虽然我们把文件的数据保护下来了,但是ajax默认处理数据时按照字符串的形式进行处理,以及默认会采用字符串的形式进行数据提交.手动关闭这两个功能:    processData: false,//处理数据的形式,关闭处理数据    contentType: false,//提交数据的形式,关闭默认提交数据的形式</code></pre><p>下面给提交表单加上事件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    $(<span class="hljs-string">&quot;#btn-change-avatar&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/users/change_avatar&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">data</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>($(<span class="hljs-string">&quot;#form-change-avatar&quot;</span>)[<span class="hljs-number">0</span>]),<br>            <span class="hljs-attr">processData</span>: <span class="hljs-literal">false</span>,<span class="hljs-comment">//处理数据的形式,关闭处理数据</span><br>            <span class="hljs-attr">contentType</span>: <span class="hljs-literal">false</span>,<span class="hljs-comment">//提交数据的形式,关闭默认提交数据的形式</span><br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;头像修改成功&quot;</span>)<br>                    <span class="hljs-comment">//将服务器端返回的头像地址设置到img标签的src属性上</span><br>                    <span class="hljs-comment">//attr(属性,属性值)用来给某个属性设值</span><br>                    $(<span class="hljs-string">&quot;#img-avatar&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;src&quot;</span>,json.<span class="hljs-property">data</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;头像修改失败&quot;</span>)<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;修改头像时产生未知的异常!&quot;</span>+xhr.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>5.3登录后显示头像</p><p>将头像上传后会显示头像,但是关闭浏览器后再进入个人头像页面就不会显示头像了,因为只有点击”上传”才能发送ajax请求并显示头像.</p><p>可以在每次用户登录成功后将avatar保存在cookie中,登录的业务层返回给控制层user对象,该对象包含uid,username,avatar.所以要在登录页面login.html中将服务器返回的头像路径设置到cookie中,然后每次检测到用户打开上传头像页面,在这个页面中通过ready()方法来自动读取cookie中头像路径并设到src属性上</p><p>1.需要在login.html页面头部导入cookie.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;../bootstrap3/js/jquery.cookie.js&quot;</span> type=<span class="hljs-string">&quot;text/javascript&quot;</span> charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>2.调用cookie方法保存路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">cookie</span>(key,value,time);<span class="hljs-comment">//time单位:天</span><br></code></pre></td></tr></table></figure><p>在ajax请求原有的代码上加$.cookie(“avatar”,json.data.avatar,{expires: 7});</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>    <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>        location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;index.html&quot;</span>;<br>        $.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&quot;avatar&quot;</span>,json.<span class="hljs-property">data</span>.<span class="hljs-property">avatar</span>,&#123;<span class="hljs-attr">expires</span>: <span class="hljs-number">7</span>&#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;登录失败&quot;</span>)<br>    &#125;<br>&#125;,<br><br></code></pre></td></tr></table></figure><p>3.需要在upload.html获取cookie中的值,所以要在页面头部导入cookie.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;../bootstrap3/js/jquery.cookie.js&quot;</span> type=<span class="hljs-string">&quot;text/javascript&quot;</span> charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>4.在upload.html的script标签中加ready()自动读取cookie数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> avatar = $.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&quot;avatar&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(avatar);<span class="hljs-comment">//调试用</span><br>    $(<span class="hljs-string">&quot;#img-avatar&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;src&quot;</span>,avatar);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="5-4显示最新头像"><a href="#5-4显示最新头像" class="headerlink" title="5.4显示最新头像"></a>5.4显示最新头像</h4><p>上传头像后不重新登录而是浏览其他页面,然后再进入个人头像页面时展示的头像是上次上传的,因为此时cookie中的值是上次上传的头像的路径,所以需要上传头像后使用同名覆盖更改cookie中路径</p><p>在ajax函数的success属性值的if语句加:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&quot;avatar&quot;</span>,json.<span class="hljs-property">data</span>,&#123;<span class="hljs-attr">expires</span>: <span class="hljs-number">7</span>&#125;);<br><br></code></pre></td></tr></table></figure><p>完善后重启服务测试,结果若和预测的不一样,则参考项目环境搭建-&gt;项目测试-&gt;测试静态资源能否正常加载里面的四种解决方法</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>电脑商城</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>项目练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城04</title>
    <link href="/2023/04/27/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E04/"/>
    <url>/2023/04/27/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E04/</url>
    
    <content type="html"><![CDATA[<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>初步分析：需要用户提交原始密码和新密码，再根据当前登录的用户进行信息的修改操作.</p><h3 id="1-修改密码-持久层"><a href="#1-修改密码-持久层" class="headerlink" title="1.修改密码-持久层"></a>1.修改密码-持久层</h3><h4 id="1-1规划需要执行的SQL语句"><a href="#1-1规划需要执行的SQL语句" class="headerlink" title="1.1规划需要执行的SQL语句"></a>1.1规划需要执行的SQL语句</h4><ul><li>根据用户的uid修改用户password值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> t_user <span class="hljs-keyword">set</span> password<span class="hljs-operator">=</span>?,modified_user<span class="hljs-operator">=</span>?, modified_time<span class="hljs-operator">=</span>? <span class="hljs-keyword">WHERE</span> uid<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><p>modified_user=?, modified_time=?是为了跟踪用户数据的变动,如果这条数据被错误修改了可以找到第一责任人</p><ul><li>在执行修改密码之前，还应检查用户数据是否存在或者用户数据是否被标记为”已删除”(比如登录账号后的几分钟在和朋友聊天,没有看页面,管理员错误删除了你的账号或者错误设置is_delete为1)、并检查原密码是否正确，这些检查都可以通过查询用户数据来辅助完成：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_user <span class="hljs-keyword">WHERE</span> uid<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><h4 id="1-2设计接口和抽象方法"><a href="#1-2设计接口和抽象方法" class="headerlink" title="1.2设计接口和抽象方法"></a>1.2设计接口和抽象方法</h4><p>UserMapper接口,将以上的两个方法的抽象定义出来,将来映射到sql语句上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户的uid来修改用户密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 用户的id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> password 用户输入的新密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modifiedUser 表示修改的执行者</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modifiedTime 表示修改数据的时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回值为受影响的行数</span><br><span class="hljs-comment"> */</span><br>Integer <span class="hljs-title function_">updatePasswordByUid</span><span class="hljs-params">(Integer uid,</span><br><span class="hljs-params">                            String password,</span><br><span class="hljs-params">                            String modifiedUser,</span><br><span class="hljs-params">                            Date modifiedTime)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户的id查询用户的数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 用户的id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 如果找到则返回对象,反之返回null值</span><br><span class="hljs-comment"> */</span><br>User <span class="hljs-title function_">findByUid</span><span class="hljs-params">(Integer uid)</span>;<br><br></code></pre></td></tr></table></figure><h4 id="1-3编写映射"><a href="#1-3编写映射" class="headerlink" title="1.3编写映射"></a>1.3编写映射</h4><p>配置到映射文件UserMapper.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updatePasswordByUid&quot;</span>&gt;</span><br>    update t_user set<br>      `password`=#&#123;password&#125;,<br>      modified_user=#&#123;modifiedUser&#125;,<br>      modified_time=#&#123;modifiedTime&#125;,<br>    where uid=#&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserEntityMap&quot;</span>&gt;</span><br>    select * from t_user where uid=#&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="1-4单元测试"><a href="#1-4单元测试" class="headerlink" title="1.4单元测试"></a>1.4单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePasswordByUid</span><span class="hljs-params">()</span>&#123;<br>    userMapper.updatePasswordByUid(<br>        <span class="hljs-number">10</span>,<br>        <span class="hljs-string">&quot;321&quot;</span>,<br>        <span class="hljs-string">&quot;管理员&quot;</span>,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByUid</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(userMapper.findByUid(<span class="hljs-number">10</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-修改密码-业务层"><a href="#2-修改密码-业务层" class="headerlink" title="2.修改密码-业务层"></a>2.修改密码-业务层</h3><h4 id="2-1规划异常"><a href="#2-1规划异常" class="headerlink" title="2.1规划异常"></a>2.1规划异常</h4><ul><li>用户的原密码错误,抛PasswordNotMatchException异常(前面已创建)</li><li>检测到is_delete字段为1和uid找不到都是抛出用户没有找到的异常,UsernameNotFoundException(前面已创建)</li><li>update在更新的时候,有可能产生未知的异常,抛UpdateException异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**用户在更新数据时产生的未知异常*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdateException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span>&#123;<br>    <span class="hljs-comment">/**重写ServiceException的所有构造方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2设计接口和抽象方法及实现"><a href="#2-2设计接口和抽象方法及实现" class="headerlink" title="2.2设计接口和抽象方法及实现"></a>2.2设计接口和抽象方法及实现</h4><p>1.执行用户修改密码的核心方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * changePassword方法需要什么参数:</span><br><span class="hljs-comment"> * 要先看底层持久层需要什么参数:uid,password,modifiedUser,modifiedTime</span><br><span class="hljs-comment"> * 1.修改人其实就是username,已经保存到session当中,通过控制层传递过来就行了</span><br><span class="hljs-comment"> * 2.在更新数据之前需要先根据uid查这个数据存不存在,uid也可以通过控制层传递</span><br><span class="hljs-comment"> * 3.新密码需要有</span><br><span class="hljs-comment"> * 4.修改时间不需要在参数列表,直接在方法内部new Date()就可以了</span><br><span class="hljs-comment"> * 5.旧密码</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassword</span><span class="hljs-params">(Integer uid,</span><br><span class="hljs-params">                   String username,</span><br><span class="hljs-params">                   String oldPassword,</span><br><span class="hljs-params">                   String newPassword)</span>;<br></code></pre></td></tr></table></figure><p>2.在实现类中实现当前的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassword</span><span class="hljs-params">(Integer uid,</span><br><span class="hljs-params">                          String username,</span><br><span class="hljs-params">                          String oldPassword,</span><br><span class="hljs-params">                          String newPassword)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUid(uid);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户没找到:比如登录账号后的几分钟在和朋友聊天,没</span><br><span class="hljs-comment">     * 有看页面,管理员错误删除了你的账号或者错误设置is_delete为1)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (result ==<span class="hljs-literal">null</span> || result.getIsDelete() == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//原始密码和数据库中密码进行比较</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">oldMd5Password</span> <span class="hljs-operator">=</span> getMD5Password(oldPassword,result.getSalt());<br>    <span class="hljs-keyword">if</span> (!result.getPassword().equals(oldMd5Password)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PasswordNotMatchException</span>(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//将新的密码加密后设置到数据库中(只要曾经注册过就用以前的盐值)</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">newMd5Password</span> <span class="hljs-operator">=</span> getMD5Password(newPassword, result.getSalt());<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.updatePasswordByUid(uid, newMd5Password, username, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>    <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;更新数据产生未知的异常&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-3单元测试"><a href="#2-3单元测试" class="headerlink" title="2.3单元测试"></a>2.3单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassword</span><span class="hljs-params">()</span> &#123;<br>    userService.changePassword(<span class="hljs-number">11</span>,<span class="hljs-string">&quot;管理员&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;321&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-修改密码-控制层"><a href="#3-修改密码-控制层" class="headerlink" title="3.修改密码-控制层"></a>3.修改密码-控制层</h3><h4 id="3-1处理异常"><a href="#3-1处理异常" class="headerlink" title="3.1处理异常"></a>3.1处理异常</h4><p>UsernameNotFoundException异常和PasswordNotMatchException异常在前面的章节中已经处理过,现在只需要把UpdateException异常配置到统一的异常处理方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> UpdateException) &#123;<br>            result.setState(<span class="hljs-number">5001</span>);<br>            result.setMessage(<span class="hljs-string">&quot;更新数据时产生未知的异常&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h5 id="3-2设计请求"><a href="#3-2设计请求" class="headerlink" title="3.2设计请求"></a>3.2设计请求</h5><ul><li>/users/change_password</li><li>post</li><li>String oldPassword,String newPassword,HttpSession session(uid和username可以通过session获取到,在处理方法的内部获取就可以了)//如果参数名用的是非pojo类型,就需要和表单中的name属性值保持一致</li><li>JsonResult<void></li></ul><h5 id="3-3处理请求"><a href="#3-3处理请求" class="headerlink" title="3.3处理请求"></a>3.3处理请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;change_password&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">changePassword</span><span class="hljs-params">(String oldPassword,</span><br><span class="hljs-params">                                       String newPassword,</span><br><span class="hljs-params">                                       HttpSession session)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUsernameFromSession(session);<br>    userService.changePassword(uid,username,oldPassword,newPassword);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK);<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务,先登录账号然后在地址栏输入<a href="http://localhost:8080/users/change_password?oldPassword=321&amp;newPassword=123%E7%9C%8B%E7%9C%8B%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F">http://localhost:8080/users/change_password?oldPassword=321&amp;newPassword=123看看是否成功</a></p><h3 id="4-修改密码-前端页面"><a href="#4-修改密码-前端页面" class="headerlink" title="4.修改密码-前端页面"></a>4.修改密码-前端页面</h3><p>在password.html中添加ajax请求的处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    $(<span class="hljs-string">&quot;#btn-change-password&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/users/change_password&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#form-change-password&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;密码修改成功&quot;</span>)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;密码修改失败&quot;</span>)<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>                <span class="hljs-comment">//xhr.message可以获取未知异常的信息</span><br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;修改密码时产生未知的异常!&quot;</span>+xhr.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id="个人资料"><a href="#个人资料" class="headerlink" title="个人资料"></a>个人资料</h2><p>其中用户名是不可修改的并且是在进个人资料页面时就从session获取值并将值加入到控件中</p><h3 id="1-个人资料-持久层"><a href="#1-个人资料-持久层" class="headerlink" title="1.个人资料-持久层"></a>1.个人资料-持久层</h3><h4 id="1-1规划SQL语句"><a href="#1-1规划SQL语句" class="headerlink" title="1.1规划SQL语句"></a>1.1规划SQL语句</h4><ul><li>获取用户信息的SQL语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> t_user <span class="hljs-keyword">set</span> python<span class="hljs-operator">=</span>?,email<span class="hljs-operator">=</span>?,gender<span class="hljs-operator">=</span>?,modified_user<span class="hljs-operator">=</span>?,modified_time<span class="hljs-operator">=</span>? <span class="hljs-keyword">where</span> uid<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><ul><li>根据uid查询用户数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_user <span class="hljs-keyword">where</span> uid<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><p>根据uid查询用户数据不需要再重复开发</p><h4 id="1-2设计接口和抽象方法-1"><a href="#1-2设计接口和抽象方法-1" class="headerlink" title="1.2设计接口和抽象方法"></a>1.2设计接口和抽象方法</h4><p>更新用户的信息方法的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 参数为user的方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user 用户的数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回值为受影响的行数</span><br><span class="hljs-comment"> */</span><br>Integer <span class="hljs-title function_">updateInfoByUid</span><span class="hljs-params">(User user)</span>;<span class="hljs-comment">//也可以用三个String的形参接收电话,邮箱,性别,但不如直接写个user省事</span><br><br></code></pre></td></tr></table></figure><h4 id="1-3编写映射-1"><a href="#1-3编写映射-1" class="headerlink" title="1.3编写映射"></a>1.3编写映射</h4><p>在UserMapper.xml文件中进行映射编写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateInfoByUid&quot;</span>&gt;</span><br>    update t_user<br>    set<br>        <span class="hljs-comment">&lt;!--if是条件判断标签,属性test接受的是一个返回值为boolean类型的条件,</span><br><span class="hljs-comment">        如果test条件的结果为true则执行if标签内部的语句,注意逗号也要在标签内--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phone!=null&quot;</span>&gt;</span>phone = #&#123;phone&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email!=null&quot;</span>&gt;</span>email = #&#123;email&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender!=null&quot;</span>&gt;</span>gender = #&#123;gender&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        modified_user = #&#123;modifiedUser&#125;,<br>        modified_time = #&#123;modifiedTime&#125;<br>    where uid=#&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="1-4单元测试-1"><a href="#1-4单元测试-1" class="headerlink" title="1.4单元测试"></a>1.4单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateInfoByUid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUid(<span class="hljs-number">11</span>);<br>    user.setPhone(<span class="hljs-string">&quot;13333688&quot;</span>);<br>    user.setEmail(<span class="hljs-string">&quot;1454@qq.com&quot;</span>);<br>    user.setGender(<span class="hljs-number">1</span>);<br>    userMapper.updateInfoByUid(user);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.个人资料-业务层</p><p>设计两个功能:</p><p>1.当打开页面时显示当前登录的用户的信息</p><p>2.点击修改按钮时更新用户的信息<br>2.1规划异常</p><ul><li>点击个人资料页面时可能找不到用户的数据</li><li>点击修改按钮时可能找不到用户数据,也可能修改时出现未知错误</li></ul><p>2.2设计接口和抽象方法及实现</p><p>1.业务层有两个功能模块,对应的是两个抽象方法的设计,并且这两个功能都涉及到用户是否存在的查询操作,所以需要在业务层设计根据用户uid查询数据的方法(持久层已经设计过该方法,但是没有在业务层实现该方法的调用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户的uid查询用户数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> uid 用户uid</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 用户数据</span><br><span class="hljs-comment"> */</span><br>User <span class="hljs-title function_">getByUid</span><span class="hljs-params">(Integer uid)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * uid通过控制层在session中获取然后传递给业务层,并在业务层封装到User对象中</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">changeInfo</span><span class="hljs-params">(Integer uid,User user)</span>;<br><br></code></pre></td></tr></table></figure><p>2.在实现类中实现当前的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getByUid</span><span class="hljs-params">(Integer uid)</span> &#123;<br>    <span class="hljs-comment">//查询用户是否存在</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUid(uid);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> || result.getIsDelete() == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//可以直接返回result给控制层,但是太臃肿了</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUsername(result.getUsername());<br>    user.setPhone(result.getPhone());<br>    user.setEmail(result.getEmail());<br>    user.setGender(result.getGender());<br><br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *User对象中的数据只有phone,email,gender,username,因为springboot进行依赖</span><br><span class="hljs-comment"> * 注入的时候只注入表单中数据的值,所以需要手动将uid封装到user中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeInfo</span><span class="hljs-params">(Integer uid, User user)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUid(uid);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> || result.getIsDelete() == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>    &#125;<br>    user.setUid(uid);<br>    user.setModifiedUser(user.getUsername());<br>    user.setModifiedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.updateInfoByUid(user);<br>    <span class="hljs-keyword">if</span> (rows!=<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateException</span>(<span class="hljs-string">&quot;更新数据时产生异常&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-3单元测试-1"><a href="#2-3单元测试-1" class="headerlink" title="2.3单元测试"></a>2.3单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getByUid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//err是为了让输出信息为红色</span><br>    System.err.println(userService.getByUid(<span class="hljs-number">11</span>).getUsername());<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeInfo</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    <span class="hljs-comment">//这四个属性值在真实开发中都是在控制层就已经自动封装在User对象中了</span><br>    <span class="hljs-comment">//而uid需要由控制层传给业务层并在业务层封装到user中</span><br>    user.setPhone(<span class="hljs-string">&quot;123456789&quot;</span>);<br>    user.setEmail(<span class="hljs-string">&quot;123@qq.com&quot;</span>);<br>    user.setUsername(<span class="hljs-string">&quot;mxy&quot;</span>);<br>    user.setGender(<span class="hljs-number">0</span>);<br>    userService.changeInfo(<span class="hljs-number">11</span>,user);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3.个人资料-控制层<br>3.1处理异常</p><p>没有新的异常,所以这里不需要有操作<br>3.2设计请求</p><p>1.设计一打开页面就发送当前用户数据的查询</p><ul><li>/users/get_by_uid</li><li>GET</li><li>HttpSession session(用于获取uid)</li><li>JsonResult<User></li></ul><p>2.点击修改按钮发送用户的数据修改操作</p><ul><li>users/change_info</li><li>POST</li><li>User user,HttpSession session(用于获取uid)</li><li>JsonResult<Void></li></ul><p>3.3处理请求</p><p>1.一打开页面就发送当前用户数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;get_by_uid&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;User&gt; <span class="hljs-title function_">getByUid</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> userService.getByUid(getUidFromSession(session));<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;User&gt;(OK,data);<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务,先登录账号然后在地址栏输入<a href="http://localhost:8080/users/get_by_uid%E7%9C%8B%E7%9C%8B%E7%8A%B6%E6%80%81%E7%A0%81%E6%98%AF%E5%90%A6%E4%B8%BA200%E5%B9%B6%E4%B8%94%E7%9C%8Bdata%E5%80%BC%E6%98%AF%E5%90%A6%E4%B8%8D%E4%B8%BAnull">http://localhost:8080/users/get_by_uid看看状态码是否为200并且看data值是否不为null</a></p><p>2.点击修改按钮更改用户数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;change_info&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">changeInfo</span><span class="hljs-params">(User user,HttpSession session)</span> &#123;<br>    <span class="hljs-comment">//user对象中有四部分的数据:username,phone,email,gender</span><br>    <span class="hljs-comment">//控制层给业务层传递uid,并在业务层通过user.setUid(uid);将uid封装到user中</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> getUidFromSession(session);<br>    userService.changeInfo(uid,user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(OK);<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务,先登录账号然后在地址栏输入<a href="http://localhost:8080/users/change_info?phone=175726&amp;email=6695@qq.com&amp;username=%E5%BC%A09&amp;gender=1%E8%A7%82%E5%AF%9F%E7%8A%B6%E6%80%81%E7%A0%81%E6%98%AF%E5%90%A6%E4%B8%BA200">http://localhost:8080/users/change_info?phone=175726&amp;email=6695@qq.com&amp;username=张9&amp;gender=1观察状态码是否为200</a><br>4.个人资料-前端页面</p><p>1.在打开userdata.html(个人资料)页面自动发送ajax请求(get_by_uid),查询到的数据填充到这个页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 一旦检测到当前的页面被加载就会触发ready方法</span><br><span class="hljs-comment">     * $(document).ready(function()&#123;</span><br><span class="hljs-comment">     *     //编写业务代码</span><br><span class="hljs-comment">     * &#125;);</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//点击&quot;个人资料&quot;四个字加载userdata.html页面时$(document).ready(function()&#123;&#125;);就会起作用发送ajax请求</span><br>    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/users/get_by_uid&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>            <span class="hljs-comment">//data为null也可以,因为这里get是从数据库拉取数据,不需要data</span><br>            <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#form-change-info&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-comment">//将查询到的数据设置到控件中</span><br>                    $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>(json.<span class="hljs-property">data</span>.<span class="hljs-property">username</span>);<br>                    $(<span class="hljs-string">&quot;#phone&quot;</span>).<span class="hljs-title function_">val</span>(json.<span class="hljs-property">data</span>.<span class="hljs-property">phone</span>);<br>                    $(<span class="hljs-string">&quot;#email&quot;</span>).<span class="hljs-title function_">val</span>(json.<span class="hljs-property">data</span>.<span class="hljs-property">email</span>);<br>                    <span class="hljs-keyword">var</span> radio = json.<span class="hljs-property">data</span>.<span class="hljs-property">gender</span> == <span class="hljs-number">0</span> ?<br>                        $(<span class="hljs-string">&quot;#gender-female&quot;</span>) : $(<span class="hljs-string">&quot;#gender-male&quot;</span>);<br>                    <span class="hljs-comment">//prop()表示给某个元素添加属性及属性的值</span><br>                    radio.<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-string">&quot;checked&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;用户的数据不存在&quot;</span>)<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>                <span class="hljs-comment">//xhr.message可以获取未知异常的信息</span><br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;查询用户信息时产生未知的异常!&quot;</span>+xhr.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>2.在检测到用户点击了修改按钮后发送一个ajax请求(change_info)</p><p>该ajax函数需要和上一个ajax同级</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#btn-change-info&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/users/change_info&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#form-change-info&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>            <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;用户信息修改成功&quot;</span>)<br>                <span class="hljs-comment">//修改成功后重新加载当前的页面</span><br>                location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;userdata.html&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;用户信息修改失败&quot;</span>)<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>            <span class="hljs-comment">//xhr.message可以获取未知异常的信息</span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;用户信息修改时产生未知的异常!&quot;</span>+xhr.<span class="hljs-property">message</span>);<br>        &#125;<br>    &#125;);<br>&#125;);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>电脑商城</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>项目练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis缓存</title>
    <link href="/2023/04/26/Redis%E7%BC%93%E5%AD%98/"/>
    <url>/2023/04/26/Redis%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h4 id="缓存定义"><a href="#缓存定义" class="headerlink" title="缓存定义"></a>缓存定义</h4><p><strong>缓存(<strong>Cache),就是数据交换的</strong>缓冲区</strong>,俗称的缓存就是<strong>缓冲区内的数据</strong>,一般从数据库中获取,存储于本地代码，读写性能较高。</p><h4 id="为什么要使用缓存"><a href="#为什么要使用缓存" class="headerlink" title="为什么要使用缓存"></a>为什么要使用缓存</h4><p>一句话:因为<strong>速度快,好用</strong></p><p>缓存数据存储于代码中,而代码运行在内存中,内存的读写性能远高于磁盘,缓存可以大大降低<strong>用户访问并发量带来的</strong>服务器读写压力</p><p>实际开发过程中,企业的数据量,少则几十万,多则几千万,这么大数据量,如果没有缓存来作为”避震器”,系统是几乎撑不住的,所以企业会大量运用到缓存技术。但是缓存也会增加代码复杂度和运营的成本。</p><h4 id="如何使用缓存"><a href="#如何使用缓存" class="headerlink" title="如何使用缓存"></a>如何使用缓存</h4><p>实际开发中,会构筑多级缓存来使系统运行速度进一步提升,例如:本地缓存与redis中的缓存并发使用</p><p><strong>浏览器缓存</strong>：主要是存在于浏览器端的缓存</p><p><strong>应用层缓存：</strong>可以分为tomcat本地缓存，比如之前提到的map，或者是使用redis作为缓存</p><p><strong>数据库缓存：</strong>在数据库中有一片空间是 buffer pool，增改查数据都会先加载到mysql的缓存中</p><p><strong>CPU缓存：</strong>当代计算机最大的问题是 cpu性能提升了，但内存读写速度没有跟上，所以为了适应当下的情况，增加了cpu的L1，L2，L3级的缓存</p><p><strong>在使用redis开发的过程中，缓存穿透、击穿、雪崩等是很难避免的问题。也是在面试过程中经常被问到的问题，今天将分别讲解这三类问题，以及多种解决方案。</strong></p><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a><strong>缓存击穿</strong></h4><p>缓存击穿是指一个Key非常热点，在某些时间点被超高并发地访问，当这个Key在失效的瞬间持续的大并发穿破了缓存(Redis)直接请求到数据库(DB)从而导致数据库出现问题。</p><p><strong>解决方案一：使用互斥锁</strong></p><p>这种解决方案思路比较简单，就是只让一个线程查询数据库，其它线程等待查询数据库的线程执行完毕并且重新将数据加入缓存，其它线程从缓存获取数据就可以了。</p><p>如果是单机系统，可以用synchronized或者lock来处理。分布式系统可以用redis的setnx操作。</p><p>单机环境</p><ul><li>单机环境中实现的原理大概就是当缓存数据过期后，大量请求进来，只有首个线程可以访问数据库其它线程暂停等主线程查询到数据并释放了锁，其它线程就可以直接在缓存中读取数据了。</li></ul><p><img src="p1.png" alt="Redis缓存"></p><p>分布式环境</p><ul><li>在缓存失效的时候先判断拿出来的值为空，不是立即去查库，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的setnx），去set一个mutex key，当操作返回成功时，再进行查库操作并回设缓存。否则，就重试整个get缓存的方法。</li></ul><p><img src="p2.png" alt="Redis缓存"></p><p><strong>解决方案二：热点数据永不过期</strong></p><p>要值得注意的是，这里说到的永不过期并不是将热点数据存在时间设置为无限制。而是将过期时间存在key对应的value里，如果发现要过期了，通过一个后台的异步线程进行缓存的重建。</p><p><img src="p3.png" alt="Redis缓存"></p><p>从实战看，这种方法对于性能非常友好，唯一不足的就是重建缓存时候，其余线程(非重建缓存的线程)可能访问的是老数据，但是对于一般的互联网功能来说这个还是可以忍受。</p><p><img src="p4.png" alt="Redis缓存"></p><p><strong>解决方案三：定时刷新</strong></p><p>后台定义一个job(定时任务)专门主动更新缓存数据，比如一个缓存中的数据过期时间是30分钟,那么job每隔29分钟定时刷新数据(将从数据库中查到的数据更新到缓存中)。</p><p>这种方案比较容易理解，但会增加系统复杂度。比较适合那些 key 相对固定。缓存粒度较大的业务，key比较分散的则不太适合，实现起来也比较复杂。</p><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a><strong>缓存穿透</strong></h4><p>缓存穿透是指用户恶意的发起大量请求去查询一个缓存(Redis)和数据库(DB)中都没有的数据，出于容错考虑从数据库(DB)查不到数据则不写入缓存(Redis)这将导致每个请求都要到数据库(DB)中查询，失去了缓存的意义，从而导致数据库因压力过大挂掉。</p><p><img src="p5.png" alt="Redis缓存"></p><p><strong>解决方案一：对空数据进行缓存</strong></p><p>对空数据进行缓存是一个简单粗暴的方法，如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</p><p>这种办法虽然能阻挡大量穿透请求，但是这个空值不具有任何实际业务性，而且如果大量发送获取不存在数据的穿透请求的话（例如恶意攻击），则会浪费缓存空间，如果这种null值过量的话，还会淘汰掉本身缓存存在的数据，这就会使我们的缓存命中率下降。</p><p><img src="p6.png" alt="Redis缓存"></p><p><strong>解决方案二：布隆过滤器</strong></p><p>这种技术在缓存之前再加一层屏障，里面存储目前数据库中存在的所有key。当业务系统有查询请求的时候，首先去BloomFilter中查询该key是否存在。若不存在，则说明数据库中也不存在该数据，因此缓存都不要查了，直接返回null。若存在，则继续执行后续的流程，先前往缓存中查询，缓存中没有的话再前往数据库中的查询。</p><p><img src="p7.png" alt="Redis缓存"></p><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a><strong>缓存雪崩</strong></h4><p>缓存雪崩是指缓存服务器重启或缓存(Redis)中的数据在同一时间内大批量过期，因查询数据量太大引起数据库压力过大甚至宕机。</p><p><strong>解决方案一：加锁排队</strong></p><p>加锁排队只是为了减轻数据库的压力，并没有提高系统吞吐量。假设在高并发下，缓存重建期间key是锁着的，这是过来1000个请求999个都在阻塞的。同样会导致用户等待超时，这是个治标不治本的方法！</p><p>注意：在高并发场景下尽可能不用！</p><p><img src="p8.png" alt="Redis缓存"></p><p><strong>解决方案二：设置过期时间随机值</strong></p><p>避免缓存设置相近的有效期，为有效期增加随机值(1-5分钟)使失效时间均匀分布。这样每一个缓存的过期时间的重复率就会降低，很难引发集体失效的事件。</p><p><img src="p9.png" alt="Redis缓存"></p><p><strong>解决方案三：设置过期标志更新缓存</strong></p><p>缓存标记：记录缓存数据是否过期，如果过期会触发通知另外的线程在后台去更新实际key的缓存；</p><p>缓存数据：它的过期时间比缓存标记的时间延长1倍，例：标记缓存时间30分钟，数据缓存设置为60分钟。这样，当缓存标记key过期后，实际缓存还能把旧数据返回给调用端，直到另外的线程在后台更新完成后，才会返回新缓存。</p><p><img src="p10.png" alt="Redis缓存"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p><strong>缓存击穿</strong></p><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。一般通过互斥锁，热点数据永不过期，定时刷新过期时间等方法解决该问题。</p><p><strong>缓存穿透</strong></p><p>key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。一般通过对空数据进行缓存，布隆过滤器等方法解决该问题。</p><p><strong>缓存雪崩</strong></p><p>当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如DB)带来很大压力。一般通过加锁排队，设置过期时间随机值等方法解决该问题。</p><p>博客参考微信公众号  大厂面试题 《扒一扒Redis，缓存击穿，缓存穿透，缓存雪崩，附解决方案》。</p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nosql</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城03</title>
    <link href="/2023/04/26/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E03/"/>
    <url>/2023/04/26/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E03/</url>
    
    <content type="html"><![CDATA[<p>1.登录-持久层<br>规划需要执行的SQL语句</p><p>依据用户提交的用户名来做select查询</p><p>select * from t_user where username=? and password=?这种不太好,这种相当于在查询用户名时直接判断了用户和密码是否一致了,如果持久层把判断做了那业务层就没事干了,所以这里我们只查询用户名,判断用户名和密码是否一致交给业务层做</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_user <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><p>分析完以后发现这个功能模块已经被开发完成(UserMapper接口的findByUsername方法),所以就可以省略当前的开发步骤,但是这个分析过程不能省略.后续的设计接口和抽象方法,编写映射,单元测试都不再需要进行,</p><h3 id="2-登录-业务层"><a href="#2-登录-业务层" class="headerlink" title="2.登录-业务层"></a>2.登录-业务层</h3><h4 id="2-1规划异常"><a href="#2-1规划异常" class="headerlink" title="2.1规划异常"></a>2.1规划异常</h4><ul><li>用户名对应的密码错误,即密码匹配的异常,起名PasswordNotMatchException,这个是运行时异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PasswordNotMatchException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span>&#123;<br>    <span class="hljs-comment">/**重写ServiceException的所有构造方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>用户名没有被找到的异常,起名UsernameNotFoundException,这个也是运行时异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UsernameNotFoundException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span> &#123;<br>    <span class="hljs-comment">/**重写ServiceException的所有构造方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2设计接口和抽象方法及实现"><a href="#2-2设计接口和抽象方法及实现" class="headerlink" title="2.2设计接口和抽象方法及实现"></a>2.2设计接口和抽象方法及实现</h4><p>1.在IUserService接口中编写抽象方法login(String username,String password)login(User user)也是可以的</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">细说一个事:登录成功某一个网站后,右上角会展示头像,昵称甚至电话号码等等,这些信息依赖于登陆成功后的信息,也就意味着一旦登录成功后在页面中切换到任意一个子页面写右上角都会展示这些信息.本质上就是查询出来这些信息,然后展示在右上角,但是这里实现查询不太现实:js中虽然打开一个html页面就自动发送一个请求,但这样就需要把这个查询的代码写在每一个html页面,显然不现实.<br><br>这种情况下我们可以将当前登录成功的用户数据以当前用户对象的形式进行返回,然后进行状态管理:将数据保存在cookie或者session中,可以避免重复度很高的数据多次频繁操作数据库进行获取(这里我们用session存放用户名和用户<span class="hljs-built_in">id</span>,用cookie存放用户头像,其中用户<span class="hljs-built_in">id</span>是为因为有的页面展示依赖于<span class="hljs-built_in">id</span>,用户头像也可以放在session中,而这里放在cookie是为了回顾一下cookie)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户登录功能</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> password 用户密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 当前匹配的用户数据,如果没有则返回null</span><br><span class="hljs-comment"> */</span><br>User <span class="hljs-title function_">login</span><span class="hljs-params">(String username,String password)</span>;<br><br></code></pre></td></tr></table></figure><p>2.在抽象类UserServiceImpl中实现该抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password)</span> &#123;<br>    <span class="hljs-comment">//根据用户名称来查询用户的数据是否存在,不存在则抛出异常</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUsername(username);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测用户的密码是否匹配:</span><br><span class="hljs-comment">     * 1.先获取数据库中加密之后的密码</span><br><span class="hljs-comment">     * 2.和用户传递过来的密码进行比较</span><br><span class="hljs-comment">     *  2.1先获取盐值</span><br><span class="hljs-comment">     *  2.2将获取的用户密码按照相同的md5算法加密</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">oldPassword</span> <span class="hljs-operator">=</span> result.getPassword();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> result.getSalt();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">newMd5Password</span> <span class="hljs-operator">=</span> getMD5Password(password, salt);<br>    <span class="hljs-keyword">if</span> (!newMd5Password.equals(oldPassword)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PasswordNotMatchException</span>(<span class="hljs-string">&quot;用户密码错误&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//判断is_delete字段的值是否为1,为1表示被标记为删除</span><br>    <span class="hljs-keyword">if</span> (result.getIsDelete() == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户数据不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//方法login返回的用户数据是为了辅助其他页面做数据展示使用(只会用到uid,username,avatar)</span><br>    <span class="hljs-comment">//所以可以new一个新的user只赋这三个变量的值,这样使层与层之间传输时数据体量变小,后台层与</span><br>    <span class="hljs-comment">// 层之间传输时数据量越小性能越高,前端也是的,数据量小了前端响应速度就变快了</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUid(result.getUid());<br>    user.setUsername(result.getUsername());<br>    user.setAvatar(result.getAvatar());<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3单元测试"><a href="#2-3单元测试" class="headerlink" title="2.3单元测试"></a>2.3单元测试</h4><p>在业务层的测试类UserServiceTests中添加测试方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//因为login方法可能抛出异常,所以应该捕获异常,但是测试时没必要写那么严谨</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.login(<span class="hljs-string">&quot;test02&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-登录-控制层"><a href="#3-登录-控制层" class="headerlink" title="3.登录-控制层"></a>3.登录-控制层</h3><h4 id="3-1处理异常"><a href="#3-1处理异常" class="headerlink" title="3.1处理异常"></a>3.1处理异常</h4><p>业务层抛出的异常需要在统一异常处理类中进行统一的捕获和处理,如果该异常类型已经在统一异常类中曾经处理过则不需要重复添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> UsernameNotFoundException) &#123;<br>    result.setState(<span class="hljs-number">4001</span>);<br>    result.setMessage(<span class="hljs-string">&quot;用户数据不存在的异常&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> PasswordNotMatchException) &#123;<br>    result.setState(<span class="hljs-number">4002</span>);<br>    result.setMessage(<span class="hljs-string">&quot;用户名密码错误的异常&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.2设计请求</p><pre><code class="hljs">请求路径:/users/login请求参数:String username,String password请求类型:POST响应结果:JsonResult&lt;User&gt;</code></pre><p>3.3处理请求</p><p>在UserController类中编写处理请求的方法.编写完成后启动主服务验证一下.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;login&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;User&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(String username,String password)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> userService.login(username, password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;User&gt;(OK,data);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意,控制层方法的参数是用来接收前端数据的,接收数据方式有两种:</p><ul><li>请求处理方法的参数列表设置为非pojo类型:</li></ul><p>SpringBoot会直接将请求的参数名和方法的参数名直接进行比较,如果名称相同则自动完成值的依赖注入</p><ul><li>请求处理方法的参数列表设置为pojo类型:</li></ul><p>SpringBoot会将前端的url地址中的参数名和pojo类的属性名进行比较,如果这两个名称相同,则将值注入到pojo类中对应的属性上</p><p>这两种方法都没有使用注解等等花里胡哨的,却能正常使用,原因是springboot是约定大于配置的,省略了大量配置以及注解的编写.</p><h3 id="4-登录-前端页面"><a href="#4-登录-前端页面" class="headerlink" title="4.登录-前端页面"></a>4.登录-前端页面</h3><p>在login.html加入script标签:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    $(<span class="hljs-string">&quot;#btn-login&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/users/login&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>            <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#form-login&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;<br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;登录成功&quot;</span>)<br>                    <span class="hljs-comment">//跳转到系统主页index.html</span><br>                    <span class="hljs-comment">//index和login在同一个目录结构下,所以可以用相对路</span><br>                    <span class="hljs-comment">// 径index.html来确定跳转的页面,index.html和./ind</span><br>                    <span class="hljs-comment">// ex.html完全一样,因为./就是表示当前目录</span><br>                    <span class="hljs-comment">// 结构,也可以用../web/index.html</span><br>                    location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;index.html&quot;</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;登录失败&quot;</span>)<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>                <span class="hljs-comment">//xhr.message可以获取未知异常的信息</span><br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;登录时产生未知的异常!&quot;</span>+xhr.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>5.用session存储和获取用户数据</p><pre><code class="hljs">在用户登录成功后要保存下来用户的id,username,avatar,并且需要在任何类中都可以访问存储下来的数据,也就是说存储在一个全局对象中,会话session可以实现把首次登录所获取的用户数据转移到session对象即可获取session对象的属性值用session.getAttribute(“key”),因为session对象的属性值在很多页面都要被访问,这时用session对象调用方法获取数据就显得太麻烦了,解决办法是将获取session中数据的这种行为进行封装考虑一下封装在哪里呢?放在一个干净的工具类里肯定可以,但就这个项目目录结构而言,只有可能在控制层使用session,而控制层里的类又继承BaseController,所以可以封装到BaseController里面</code></pre><p>综上所述,该功能的实现需要两步:</p><p>1.在父类中封装两个方法:获取uid和获取username对应的两个方法(用户头像暂不考虑,将来封装到cookie中来使用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取session对象中的uid</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session session对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 当前登录的用户uid的值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Integer <span class="hljs-title function_">getUidFromSession</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>    <span class="hljs-comment">//getAttribute返回的是Object对象,需要转换为字符串再转换为包装类</span><br>    <span class="hljs-keyword">return</span> Integer.valueOf(session.getAttribute(<span class="hljs-string">&quot;uid&quot;</span>).toString());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">getUsernameFromSession</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>    <span class="hljs-keyword">return</span> session.getAttribute(<span class="hljs-string">&quot;username&quot;</span>).toString();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.把首次登录所获取的用户数据转移到session对象:</p><p>服务器本身自动创建有session对象,已经是一个全局的session对象,所以我们需要想办法获取session对象:如果直接将HttpSession类型的对象作为请求处理方法的参数,这时springboot会自动将全局的session对象注入到请求处理方法的session形参上:</p><ul><li><p>将登录模块的设计请求中的请求参数:String username,String password加上HttpSession session</p></li><li><p>将登录模块的处理请求中login方法加上参数HttpSession session并修改代码如下:</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;login&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult&lt;User&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password, HttpSession session)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> userService.login(username, password);<br><br>    <span class="hljs-comment">//向session对象中完成数据的绑定(这个session是全局的,项目的任何位置都可以访问)</span><br>    session.setAttribute(<span class="hljs-string">&quot;uid&quot;</span>,data.getUid());<br>    session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,data.getUsername());<br><br>    <span class="hljs-comment">//测试能否正常获取session中存储的数据</span><br>    System.out.println(getUidFromSession(session));<br>    System.out.println(getUsernameFromSession(session));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;User&gt;(OK,data);<br>&#125;<br></code></pre></td></tr></table></figure><p>6.拦截器</p><pre><code class="hljs">拦截器的作用是将所有的请求统一拦截到拦截器中,可以在拦截器中定义过滤的规则,如果不满足系统设置的过滤规则,该项目统一的处理是重新去打开login.html页面(重定向和转发都可以,推荐使用重定向)拦截器在springboot中本质是依靠springMVC完成的.springMVC提供了一个HandlerInterceptor接口用于表示定义一个拦截器</code></pre><p>1.所以想要使用拦截器就要定义一个类并使其实现HandlerInterceptor接口,在store下建包interceptor,包下建类LoginInterceptor并编写代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**定义一个拦截器*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *检测全局session对象中是否有uid数据,如果有则放行,如果没有重定向到登录页面</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request 请求对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response 响应对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler 处理器(把url和Controller映射到一块)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值为true放行当前请求,反之拦截当前请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//在DispatcherServlet调用所有处理请求的方法前被自动调用执行的方法</span><br>    <span class="hljs-comment">//springboot会自动把请求对象给到request,响应对象给到response,适配器给到handler</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, </span><br><span class="hljs-params">                             HttpServletResponse response, </span><br><span class="hljs-params">                             Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//通过HttpServletRequest对象来获取session对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> request.getSession().getAttribute(<span class="hljs-string">&quot;uid&quot;</span>);<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//说明用户没有登录过系统,则重定向到login.html页面</span><br>            <span class="hljs-comment">//不能用相对路径,因为这里是要告诉前端访问的新页面是在哪个目录下的新</span><br>            <span class="hljs-comment">//页面,但前面的localhost:8080可以省略,因为在同一个项目下</span><br>            response.sendRedirect(<span class="hljs-string">&quot;/web/login.html&quot;</span>);<br>            <span class="hljs-comment">//结束后续的调用</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//放行这个请求</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">//在ModelAndView对象返回给DispatcherServlet之后被自动调用的方法</span><br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-comment">//在整个请求所有关联的资源被执行完毕后所执行的方法</span><br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.注册过滤器:</p><p>注册过滤器的技术:借助WebMvcConfigure接口将用户定义的拦截器进行注册.所以想要注册过滤器需要定义一个类使其实现WebMvcConfigure接口并在其内部添加黑名单(在用户登录的状态下才可以访问的页面资源)和白名单(哪些资源可以在不登录的情况下访问:①register.html②login.html③index.html④/users/reg⑤/users/login⑥静态资源):</p><pre><code class="hljs">WebMvcConfigure是配置信息,建议在store包下建config包,再定义类LoginInterceptorConfigure</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**拦截器的注册*/</span><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//自动加载当前的类并进行拦截器的注册,如果没有@Configuration就相当于没有写类LoginInterceptorConfigure</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptorConfigure</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//配置拦截器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//1.创建自定义的拦截器对象</span><br>        <span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>();<br>        <span class="hljs-comment">//2.配置白名单并存放在一个List集合</span><br>        List&lt;String&gt; patterns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        patterns.add(<span class="hljs-string">&quot;/bootstrap3/**&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/css/**&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/images/**&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/js/**&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/web/register.html&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/web/login.html&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/web/index.html&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/web/product.html&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/users/reg&quot;</span>);<br>        patterns.add(<span class="hljs-string">&quot;/users/login&quot;</span>);<br><br>        <span class="hljs-comment">//registry.addInterceptor(interceptor);完成拦截</span><br>        <span class="hljs-comment">// 器的注册,后面的addPathPatterns表示拦截哪些url</span><br>        <span class="hljs-comment">//这里的参数/**表示所有请求,再后面的excludePathPatterns表</span><br>        <span class="hljs-comment">// 示有哪些是白名单,且参数是列表</span><br>        registry.addInterceptor(interceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .excludePathPatterns(patterns);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>电脑商城</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>项目练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城02</title>
    <link href="/2023/04/26/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E02/"/>
    <url>/2023/04/26/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E02/</url>
    
    <content type="html"><![CDATA[<h2 id="用户注册功能"><a href="#用户注册功能" class="headerlink" title="用户注册功能"></a>用户注册功能</h2><h3 id="1-创建数据表"><a href="#1-创建数据表" class="headerlink" title="1.创建数据表"></a>1.创建数据表</h3><p>1.选中数据表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">use store<br></code></pre></td></tr></table></figure><p>2.创建t_user表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user (<br>uid <span class="hljs-type">INT</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span> COMMENT <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>`password` <span class="hljs-type">CHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>salt <span class="hljs-type">CHAR</span>(<span class="hljs-number">36</span>) COMMENT <span class="hljs-string">&#x27;盐值&#x27;</span>,<br>phone <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;电话号码&#x27;</span>,<br>email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) COMMENT <span class="hljs-string">&#x27;电子邮箱&#x27;</span>,<br>gender <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;性别:0-女，1-男&#x27;</span>,<br>avatar <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) COMMENT <span class="hljs-string">&#x27;头像&#x27;</span>,<br>is_delete <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;是否删除：0-未删除，1-已删除&#x27;</span>,<br>created_user <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;日志-创建人&#x27;</span>,<br>created_time DATETIME COMMENT <span class="hljs-string">&#x27;日志-创建时间&#x27;</span>,<br>modified_user <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;日志-最后修改执行人&#x27;</span>,<br>modified_time DATETIME COMMENT <span class="hljs-string">&#x27;日志-最后修改时间&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (uid)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><p>提示：</p><ul><li><p>注册页面的确认密码功能多数开发中交给前端做,如果两次密码输入不同就不能将数据传给后台</p></li><li><p>创建t-user表时<code>password</code> CHAR(32) NOT NULL COMMENT ‘密码’,因为password是关键字,所以需要用<code>号(不是单引号,是esc下面的那个键)并且后面用到该字段时(比如往表中插入数据)也需要用</code></p></li><li><p>创建t_user表时salt CHAR(36) COMMENT ‘盐值’,是为了在用户注册时对用户的密码进行加密操作(后续再讲)</p></li><li><p>数据库中的性别0代表女,1代表男,数据库中用数字而不是文字是因为前端的性别选项是单选框,提交给后台的是数字</p></li><li><p>创建t_user表时is_delete INT COMMENT ‘是否删除：0-未删除，1-已删除’,的作用:网站中都有注销账号的功能,大部分的网站并不是真的将用户注销了,而是在下次用户登录时进行验证,如果是0就放行,如果是1就禁止登录</p></li><li><p>创建t-user表时username VARCHAR(20) NOT NULL UNIQUE COMMENT ‘用户名’,的UNIQUE 作为约束条件使用户名唯一</p></li><li><p>将来任何一张表都有以下四个字段:</p></li></ul><p>​        created_user VARCHAR(20) COMMENT ‘创建人’,</p><p>​        created_time DATETIME COMMENT ‘创建时间’,</p><p>​        modified_user VARCHAR(20) COMMENT ‘修改人’,</p><p>​        modified_time DATETIME COMMENT ‘修改时间’,</p><p>​        所以为了开发方便可以把这四个字段作为整个实体类</p><h3 id="2-创建用户的实体类"><a href="#2-创建用户的实体类" class="headerlink" title="2.创建用户的实体类"></a>2.创建用户的实体类</h3><p>1.通过表的结构提取出表的公共字段,放在一个实体类的基类中,起名BaseEntity基类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String createdUser;<br>    <span class="hljs-keyword">private</span> Date createdTime;<br>    <span class="hljs-keyword">private</span> String modifiedUser;<br>    <span class="hljs-keyword">private</span> Date emodifiedTime;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * get,set</span><br><span class="hljs-comment"> * equals和hashCode</span><br><span class="hljs-comment"> * toString</span><br><span class="hljs-comment"> */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.创建用户的实体类,并使其继承BaseEntity基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String PASSWORD;<br>    <span class="hljs-keyword">private</span> String salt;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> Integer gender;<br>    <span class="hljs-keyword">private</span> String avatar;<br>    <span class="hljs-keyword">private</span> Integer isDelete;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * get,set</span><br><span class="hljs-comment"> * equals和hashCode</span><br><span class="hljs-comment"> * toString</span><br><span class="hljs-comment"> */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>提示：</p><ul><li><p>实体类User因为要在网络中以流的形式传输,所以需要serialize序列化(但因为其继承的父类BaseEntity已经实现序列化,所以就不需要再写implements Serializable)</p></li><li><p>实体类BaseEntity中自动导入Getter and Setter方法,euqals()方法,hashCode()方法,toString方法,其中euqals()方法,hashCode()方法自动导入步骤:</p><p>  enter+insert<br>  点击euqals() and hashCode()<br>  勾选Accept…和Use这两段话,并且选择Template为IntelliJ Default<br>  一路next到底</p></li><li><p>ssm框架开发项目的时候需要在实体类上面加@Component然后spring才能自动进行对象的创建维护,而springboot不再需要,因为springboot遵循的原则是约定大于配置,如果字段名称相同那就可以自动完成字段的初始化</p></li></ul><h3 id="3-注册-持久层"><a href="#3-注册-持久层" class="headerlink" title="3.注册-持久层"></a>3.注册-持久层</h3><p>通过Mybatis来操作数据库,也就是在做mybatis开发的流程</p><h4 id="3-1规划需要执行的SQL语句"><a href="#3-1规划需要执行的SQL语句" class="headerlink" title="3.1规划需要执行的SQL语句"></a>3.1规划需要执行的SQL语句</h4><p>1.用户的注册功能,从后端持久层来看相当于在做数据的插入操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">inser <span class="hljs-keyword">into</span> t_user (username)<br></code></pre></td></tr></table></figure><p>2.在用户的注册时首先要去查询当前的用户名是否存在,如果存在则不能进行注册,相当于是一条查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_user <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span>?<br></code></pre></td></tr></table></figure><h4 id="3-2设计接口和抽象方法及实现"><a href="#3-2设计接口和抽象方法及实现" class="headerlink" title="3.2设计接口和抽象方法及实现"></a>3.2设计接口和抽象方法及实现</h4><p>1.定义Mapper接口.在项目的目录结构下首先创建一个mapper包,在这个包下再根据不同的功能模块来创建mapper接口.注册功能需要在mapper包下创建UserMapper接口然后定义上述两个SQL语句的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入用户的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user 用户的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 受影响的行数(增删改都将受影响的行数作为返回值,可以根据返回值来判断是否执行成功)</span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名来查询用户的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果找到对应的用户则返回这个用户的数据,如果没有找到则返回null</span><br><span class="hljs-comment">     */</span><br>    User <span class="hljs-title function_">findByUsername</span><span class="hljs-params">(String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.ssm框架开发项目的时候需要在mapper接口上加@Mapper用于自动生成相应的接口实现类,在springboot也可以这样,但是后续会有很多mapper接口,每个接口分别加@Mapper太麻烦了,所以在启动类类里面指定当前项目的mapper接口在哪,然后项目启动的时候会自动加载所有的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;com.cy.mapper&quot;)</span><br></code></pre></td></tr></table></figure><p>3.3编写映射</p><p>1.定义xml映射文件,与对应的接口进行关联.所有的映射文件都属于资源文件,需要放在resources目录下,为了管理方便我们在resources目录下创建一个mapper文件夹,然后在这个文件夹里存放mapper的映射文件</p><p>2.创建接口的映射文件,需要和接口的名称保持一致.如UserMapper.xml</p><p>UserMapper.xml的配置在Mybatis官网</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace用于指定当前的映射文件和哪个接口进行映射,需要指定接口的文件路径,路径需要是包的完整路径结构--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.cy.store.mapper.UserMapper&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.将配置接口的方法对应到SQL语句上</p><ul><li>insert into () values (),因为values后面插入的值是动态值,mybatis规定需要用占位符来占位,并给占位符起一个变量的名字,且变量的名字需要在占位符#{}内部</li><li>创建t_user表时uid INT AUTO_INCREMENT COMMENT ‘用户id’,中的AUTO_INCREMENT表示主键uid自增,所以需要useGeneratedKeys和keyProperty</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在sql语句的最上面借助ResultMap标签来自定义映射规则</span><br><span class="hljs-comment">    id属性:表示给这个映射规则分配一个唯一的id值,对应的就是resultMap=&quot;id属性值&quot;</span><br><span class="hljs-comment">    type属性:取值是一个类,表示数据库中的查询结果与java中哪个实体类进行结果集的映射</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserEntityMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.cy.store.entity.User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--将表的字段和类的属性名不一致的进行匹配指定,名称一致的也可以指定,但没必要</span><br><span class="hljs-comment">        但是,在定义映射规则时无论主键名称是否一致都不能省</span><br><span class="hljs-comment">        column属性:表示表中的字段名称</span><br><span class="hljs-comment">        property属性:表示类中的属性名称</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;uid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;uid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_delete&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isDelete&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdUser&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdTime&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_user&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedUser&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;modified_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;modifiedTime&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--id属性:表示映射的接口中方法的名称,直接标签的内容部来编写SQL语句--&gt;</span><br><span class="hljs-comment">&lt;!--useGeneratedKeys=&quot;true&quot;表示开启某个字段的值递增(大部分都是主键递增)</span><br><span class="hljs-comment">    keyProperty=&quot;uid&quot;表示将表中哪个字段进行递增</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;uid&quot;</span>&gt;</span><br>    insert into t_user(<br>        username,`password`,salt,phone,email,gender,avatar,is_delete,<br>        created_user,created_time,modified_user,modified_time<br>    ) values (<br>    #&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;,#&#123;phone&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;avatar&#125;,#&#123;isDelete&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;<br>    )<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--select语句在执行的时候查询的结果无非两种:一个对象或多个对象</span><br><span class="hljs-comment">    resultType:表示查询的结果集类型,用来指定对应映射类的类型,且包含完整的包结构,但此处不能是resultType=&quot;com.cy.store.entity.User&quot;,因为这种写法要求表的字段的名字和类的属性名一模一样</span><br><span class="hljs-comment">    resultMap:表示当表的字段和类的对象属性名不一致时,来自定义查询结果集的映射规则</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUsername&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserEntityMap&quot;</span>&gt;</span><br>    select * from t_user where username=#&#123;username&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>sql语句匹配规则:如果在insert标签里面写了insert语句,首先将insert语句和某一个方法进行绑定，用到了id=“”，但是和哪里的方法进行绑定呢，就要用到namespace=“”，这两步映射就把唯一的SQL语句和唯一的方法进行了关联，实际上就是jdbc里面dao接口的的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer insert（User user） &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">SQL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into () values ()&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>用到映射的好处:使SQL语句和java代码分离,解耦了,方便后期代码的维护</p><p>4.将mapper文件的位置注册到properties对应的配置文件中.</p><p>在application.properties文件中增添:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mapper/*.xml</span><br></code></pre></td></tr></table></figure><p>3.4单元测试</p><p>1.每个独立的层编写完毕后需要编写单元测试方法来测试当前的功能:在test包结构下创建一个mapper包,在这个包下再创建持久层的功能测试,单元测试方法是独立运行,不用启动整个项目,提高了代码的测试效率</p><p>2.因为测试方法要用到mapper层的接口来访问刚刚写的两个方法,所以要在类里面声明UserMapper对象:即private UserMapper userMapper;且需要加上@Autowired完成值的初始化,但此时会发现提示”Could not autowire.No beans of’UserMapper’type found”,报错原因是idea有自动检测的功能,在java中接口是不能够直接创建bean的,所以idea认为这个语法不合理,但本质上在项目启动时mybatis自动创建了接口的动态代理实现类,所以从项目的运行角度讲这不能算是错.解决办法:</p><ul><li>在Settings里面搜索inspections,依次找到Spring-&gt;Spring Core-&gt;Code-&gt;Autowiring for Bean Class然后将Severity的Error改为Warning</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@SpringBootTest表示当前的类是一个测试类,不会随同项目一块打包</span><br><span class="hljs-meta">@SpringBootTest</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.<span class="hljs-doctag">@RunWith</span>表示启动这个单元测试类,否则这个单元测试类是不能运行的,需要传递</span><br><span class="hljs-comment"> * 一个参数,该参数必须是SpringRunner.class即SpringRunner的实例类型</span><br><span class="hljs-comment"> * 2.敲完<span class="hljs-doctag">@RunWith</span>(SpringRunner.class)后鼠标分别放在SpringRunner和<span class="hljs-doctag">@RunWith</span>上按alt+enter分别导入包</span><br><span class="hljs-comment"> * 3.单元测试类中出现的方法必须是单元测试方法</span><br><span class="hljs-comment"> * 4.单元测试方法的特点:必须被<span class="hljs-doctag">@Test</span>注解修饰;返回值类型必须是void;方法的参数列表不指定任何类型;方法的访问修饰符必须是public</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserMapperTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(<span class="hljs-string">&quot;张三&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.insert(user);<br>        System.out.println(rows);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findByUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.findByUsername(<span class="hljs-string">&quot;张三&quot;</span>);<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.注册-业务层</p><p>业务层的核心功能:</p><ul><li>接受前端从控制器流转过来的数据</li><li>结合真实的注册业务来完成功能业务逻辑的调转和流程</li></ul><p>所以这里要考虑到真实的业务场景,如果只考虑业务场景的话不完整,因为在整个业务执行的过程中会产生很多问题,从java角度来讲这些都是属于异常,所以在业务开发的时候就要规划相关的异常,以便把项目的错误控制在一定范围内</p><p>service下的目录结构(建议这样):</p><ul><li>service包下创建ex包用来写异常类</li><li>service包下创建impl包用来写接口的实现类</li><li>接口直接写在service包下,不再需要接口包</li></ul><p>4.1规划异常</p><p>1.为什么会有异常:</p><p>比如,用户在进行注册时可能会产生用户名被占用的错误,这时需要抛出一个异常</p><p>2.怎么处理异常:</p><ul><li>异常不能用RuntimeException,太笼统了,开发者没办法第一时间定位到具体的错误类型上,我们可以定义具体的异常类型来继承这个异常.</li><li>正常的开发中异常又要分等级,可能是在业务层产生异常,可能是在控制层产生异常,所以可以创建一个业务层异常的基类,起名ServiceException异常,并使其继承RuntimeException异常</li><li>后期开发业务层时具体的异常可以再继承业务层的异常ServiceException</li></ul><p>3.处理异常的具体步骤:</p><p>步骤一:在ex包下创建ServiceException类作为业务层异常的基类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 因为整个业务的异常只有一种情况下才会产生:只有运行时才会产生,不运行不会产生</span><br><span class="hljs-comment"> * 所以要求业务层的异常都要继承运行时异常RuntimeException并且重写父类的所有构造方法以便后期能抛出自已定义的异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br>    <span class="hljs-comment">//什么也不返回</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServiceException</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//返回异常信息(常用)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServiceException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br><br>    <span class="hljs-comment">//返回异常信息和异常对象(常用)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServiceException</span><span class="hljs-params">(String message, Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServiceException</span><span class="hljs-params">(Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(cause);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">ServiceException</span><span class="hljs-params">(String message, Throwable cause, <span class="hljs-type">boolean</span> enableSuppression, <span class="hljs-type">boolean</span> writableStackTrace)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause, enableSuppression, writableStackTrace);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>步骤二:后期再根据业务层不同的功能来详细定义具体的异常类型,并统一的继承ServiceException异常基类:</p><ul><li>用户在进行注册时可能会产生用户名被占用的错误,这时需要抛出一个UsernameDuplicatedException异常</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UsernameDuplicatedException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceException</span></span>&#123;<br>    <span class="hljs-comment">/**重写ServiceException的所有构造方法  ctrl + O 需要重写五个方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>正在执行数据插入操作的时候,服务器宕机或数据库宕机.这种情况是处于正在执行插入的过程中所产生的异常,起名InsertException异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据插入过程中产生异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsertException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceException</span>&#123;<br>    <span class="hljs-comment">/**重写ServiceException的所有构造方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2设计接口和抽象方法"><a href="#4-2设计接口和抽象方法" class="headerlink" title="4.2设计接口和抽象方法"></a>4.2设计接口和抽象方法</h4><p>1.在service包下创建IUserService接口(接口命名的默认规则:I+业务名字+层的名字)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**用户模块业务层接口*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户注册方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user 用户的数据对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reg</span><span class="hljs-params">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.创建一个实现UserServiceImpl类,需要实现IUserService接口,并且实现抽象的方法</p><p>因为要将这个实现类交给spring管理,所以需要在类上加@Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br><br>    <span class="hljs-comment">//reg方法核心就是调用mapper层的方法,所以要声明UserMapper对象并加@Autowired注解</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reg</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-comment">//通过user参数来获取传递过来的username</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> user.getUsername();<br>        <span class="hljs-comment">//调用mapper的findByUsername(username)判断用户是否被注册过了</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.findByUsername(username);<br>        <span class="hljs-comment">//判断结果集是否为null,不为null的话则需抛出用户名被占用的异常</span><br>        <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//抛出异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameDuplicatedException</span>(<span class="hljs-string">&quot;用户名被占用&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 密码加密处理作用:</span><br><span class="hljs-comment">         * 1.后端不再能直接看到用户的密码2.忽略了密码原来的强度,提升了数据安全性</span><br><span class="hljs-comment">         * 密码加密处理的实现:</span><br><span class="hljs-comment">         * 串+password+串-&gt;交给md5算法连续加密三次</span><br><span class="hljs-comment">         * 串就是数据库字段中的盐值,是一个随机字符串</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">oldpassword</span> <span class="hljs-operator">=</span> user.getPassword();<br>        <span class="hljs-comment">//1.随机生成一个盐值(大写的随机字符串)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().toUpperCase();<br>        <span class="hljs-comment">//2.将密码和盐值作为一个整体进行加密处理</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">md5Password</span> <span class="hljs-operator">=</span> getMD5Password(oldpassword, salt);<br>        <span class="hljs-comment">//3.将盐值保存到数据库</span><br>        user.setSalt(salt);<br>        <span class="hljs-comment">//4.将加密之后的密码重新补全设置到user对象当中</span><br>        user.setPassword(md5Password);<br><br>        <span class="hljs-comment">//补全数据:is_delete设置为0</span><br>        user.setIsDelete(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//补全数据:四个日志字段信息</span><br>        user.setCreatedUser(user.getUsername());<br>        user.setModifiedUser(user.getUsername());<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<span class="hljs-comment">//java.util.Date</span><br>        user.setCreatedTime(date);<br>        user.setModifiedTime(date);<br><br><br>        <span class="hljs-comment">//执行注册业务功能的实现</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.insert(user);<br>        <span class="hljs-keyword">if</span> (rows != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsertException</span>(<span class="hljs-string">&quot;在用户注册过程中产生了未知的异常&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>md5加密算法以后可能还要多次用到,为了方便在UserServiceImpl类里面单独写一个getMD5Password方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getMD5Password</span><span class="hljs-params">(String password,String salt)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>        password = DigestUtils.md5DigestAsHex((salt + password + salt).getBytes()).toUpperCase();<br>    &#125;<br>    <span class="hljs-keyword">return</span> password;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.3单元测试</p><p>在单元测试包下创建一个UserServiceTests类,在这个类中添加单元测试的功能(技巧:可以先在test.com.cy.store下创建service包,然后点击UserMapperTests并ctrl+c,然后点击service包ctrl+v会弹出修改类名,将UserMapperTests改为UserServiceTests即可,然后修改部分代码至如下这样)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 进行插入时可能会出错抛出异常,这时需要捕获异常:</span><br><span class="hljs-comment">         * 1.选中    User user = new User();</span><br><span class="hljs-comment">         *           user.setUsername(&quot;张7&quot;);</span><br><span class="hljs-comment">         *           user.setPassword(&quot;123456&quot;);</span><br><span class="hljs-comment">         *           userService.reg(user);</span><br><span class="hljs-comment">         *           System.out.println(&quot;OK&quot;);</span><br><span class="hljs-comment">         * 2.点击导航栏的Code,然后依次点击SurroundWith-&gt;try/catch就可以捕获异常了</span><br><span class="hljs-comment">         * 3.Exception e没有问题,但这里我们知道是Service层的异常,所以可以改为ServiceException e</span><br><span class="hljs-comment">         * 4.System.out.println(e.getClass().getSimpleName());获取异常对象再获取类的名称然后输出</span><br><span class="hljs-comment">         * 5.System.out.println(e.getMessage());输出异常信息(是自己在ServiceException的子类类具体设置的信息)</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>            user.setUsername(<span class="hljs-string">&quot;张7&quot;</span>);<br>            user.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>            userService.reg(user);<br>            System.out.println(<span class="hljs-string">&quot;OK&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>            System.out.println(e.getClass().getSimpleName());<br>            System.out.println(e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-注册-控制层"><a href="#5-注册-控制层" class="headerlink" title="5.注册-控制层"></a>5.注册-控制层</h3><h4 id="5-1创建响应"><a href="#5-1创建响应" class="headerlink" title="5.1创建响应"></a>5.1创建响应</h4><p>状态码,状态描述信息,数据是所有控制层对应的方法都涉及到的操作,所以把这部分功能封装到一个类JsonResult中,将这个类作为方法的返回值返回给前端浏览器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//因为所有的响应的结果都采用Json格式的数据进行响应,所以需要实现Serializable接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonResult</span>&lt;E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">//状态码</span><br>    <span class="hljs-keyword">private</span> Integer state;<br>    <span class="hljs-comment">//描述信息</span><br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-comment">//数据类型不确定,用E表示任何的数据类型,一个类里如果声明的有泛型的数据类型,类也要声明为泛型</span><br>    <span class="hljs-keyword">private</span> E data;<br><br>    <span class="hljs-comment">//无参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JsonResult</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">//将状态码传给构造方法初始化对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JsonResult</span><span class="hljs-params">(Integer state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br><br>    <span class="hljs-comment">//将状态码和数据传给构造方法初始化对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JsonResult</span><span class="hljs-params">(Integer state, E data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-comment">//如果有异常,直接将异常传递给构造方法初始化对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JsonResult</span><span class="hljs-params">(Throwable e)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message=e.getMessage();<br>    &#125;<br>    <span class="hljs-comment">/**以及属性的get和set方法*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>5.2设计请求</p><p>接下来该向后端服务器发送请求以把用户数据插入到数据库,设计发送请求模块的第一步就是设计相关的请求</p><p>依据当前的业务功能模块进行请求的设计:</p><ul><li>请求路径:/users/reg</li><li>请求参数:User user</li><li>请求类型:POST</li><li>响应结果:JsonResult<void></li></ul><p>5.3处理请求</p><p>创建一个控制层对应的UserController类,依赖于业务层的接口.编写完成后启动主服务验证一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RestController</span> <span class="hljs-comment">//其作用等同于@Controller+@ResponseBody</span><br><span class="hljs-comment">//@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;reg&quot;)</span><br>    <span class="hljs-comment">//@ResponseBody //表示此方法的响应结果以json格式进行数据的响应给到前端</span><br>    <span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">reg</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-comment">//创建响应结果对象即JsonResult对象</span><br>        JsonResult&lt;Void&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//调用userService的reg方法时可能出现异常,所以需要捕获异常</span><br>            userService.reg(user);<br>            result.setState(<span class="hljs-number">200</span>);<br>            result.setMessage(<span class="hljs-string">&quot;用户注册成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (UsernameDuplicatedException e) &#123;<br>            result.setState(<span class="hljs-number">4000</span>);<br>            result.setMessage(<span class="hljs-string">&quot;用户名被占用&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InsertException e) &#123;<br>            result.setState(<span class="hljs-number">5000</span>);<br>            result.setMessage(<span class="hljs-string">&quot;注册时产生未知的异常&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.4控制层优化设计</p><p>凡是业务层抛出的异常我们都在控制层进行了捕获,如果其他的业务模块也抛用户名被占用或者插入时异常,那么抛出异常的代码就要重复编写</p><p>优化方法:在控制层抽离出一个BaseController父类,在这个父类中统一处理关于异常的相关操作,优化如下:</p><p>1.在controller包下创建UserController类作为控制层下类的基类,用来做统一的异常捕获:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseController</span> &#123;<br><br>    <span class="hljs-comment">//操作成功的状态码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1.<span class="hljs-doctag">@ExceptionHandler</span>表示该方法用于处理捕获抛出的异常</span><br><span class="hljs-comment">     * 2.什么样的异常才会被这个方法处理呢?所以需要ServiceException.class,这样的话只要是抛出ServiceException异常就会被拦截到handleException方法,此时handleException方法就是请求处理方法,返回值就是需要传递给前端的数据</span><br><span class="hljs-comment">     * 3.被ExceptionHandler修饰后如果项目发生异常,那么异常对象就会被自动传递给此方法的参数列表上,所以形参就需要写Throwable e用来接收异常对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(ServiceException.class)</span><br>    <span class="hljs-keyword">public</span> JsonResult&lt;Void&gt; <span class="hljs-title function_">handleException</span><span class="hljs-params">(Throwable e)</span> &#123;<br>        JsonResult&lt;Void&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonResult</span>&lt;&gt;(e);<br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> UsernameDuplicatedException) &#123;<br>            result.setState(<span class="hljs-number">4000</span>);<br>            result.setMessage(<span class="hljs-string">&quot;用户名已经被占用&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> InsertException) &#123;<br>            result.setState(<span class="hljs-number">5000</span>);<br>            result.setMessage(<span class="hljs-string">&quot;插入数据时产生未知的异常&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.让UserController继承BaseController并重构UserController下的reg方法使该方法只需要关注请求处理而不再需要关注异常捕获:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> JsonResult&lt;<span class="hljs-type">Void</span>&gt; reg(<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>) &#123;<br>    userService.reg(<span class="hljs-keyword">user</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> JsonResult&lt;&gt;(OK);<br>&#125;<br></code></pre></td></tr></table></figure><p>6.注册-前端页面<br>6.1熟悉ajax</p><p>1.什么是ajax函数?</p><p>这是jQuery封装的一个函数,称为$.ajax()函数,通过对象调用ajax()函数用来异步加载相关的请求.依靠的是JavaScript提供的一个对象:XHR(全称XmlHttpResponse)</p><p>2.ajax()函数的语法结构:</p><ul><li>使用ajax()时需要传递一个方法体作为方法的参数来使用(一对大括号就是一个方法体)</li><li>ajax接受多个参数时,参数与参数之间使用”,”分割</li><li>每一组参数之间使用”:”进行分割</li><li>参数的组成部分一个是参数的名称(不能随便定义),另一个是参数的值(必须用字符串来表示)</li><li>参数的声明顺序没有要求</li></ul><p>演示一下语法结构:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <br>    &#125;,<br>    <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>功能描述</th></tr></thead><tbody><tr><td>url</td><td>表示请求的地址(url地址),例如:url:“localhost:8080/users/reg”(1.不能包含参数列表部分的内容2.如果提交的请求是项目内部的一个url,那么端口号前面的都可以省略掉,即url:“/users/reg”)</td></tr><tr><td>type</td><td>请求类型(GET和POST请求的类型).例如:type:“POST”(get和post不区分大小写)</td></tr><tr><td>data</td><td>向指定的请求url地址提交的数据.例如:data:“username=tom&amp;pwd=123”</td></tr><tr><td>dataType</td><td>提交的数据的类型.数据的类型一般指定为json类型.例如:dataType:“json”(json不区分大小写)</td></tr><tr><td>success</td><td>当服务器正常响应客户端时,会自动调用success参数的方法,并且将服务器返回的数据以参数的形式传递给这个方法的参数上</td></tr><tr><td>error</td><td>当服务器未正常响应客户端时,会自动调用error参数的方法,并且将服务器返回的数据以参数的形式传递给这个方法的参数上</td></tr></tbody></table><p>6.2前端js编写</p><p>js代码可以独立声明在一个js文件里或者声明在一个script标签中.现在我们在register.html中编写js代码,js代码可以放在head标签中,也可以放在body标签中,可以放在任意一个位置,只要被script标签包裹就行了,这里我们放在整个body结束之前:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-comment">//1.监听注册按钮是否被点击,如果被点击可以执行一个方法(这里不能像ajax函数那样删去function()只留下&#123;&#125;,这是官方规定的!)</span><br>    $(<span class="hljs-string">&quot;#btn-reg&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>        <span class="hljs-comment">//let username = $(&quot;#username&quot;).val();</span><br>        <span class="hljs-comment">//let pwd = $(&quot;#password&quot;).val();</span><br>        <span class="hljs-comment">//上面这两行是动态获取表单中控件的数据,但是如果这样获取的话ajax函数中</span><br>        <span class="hljs-comment">//就是data: &quot;username=&quot;+username + &quot;&amp;password=&quot;+pwd,但太麻烦了,如</span><br>        <span class="hljs-comment">// 果这个表单提交的是用户的兴趣爱好,那数据就很多了,一个表单20个数据都很正</span><br>        <span class="hljs-comment">// 常,如果此时还用这种方式就太麻烦了,所以不建议用这种方式</span><br><br>        <span class="hljs-comment">//2.发送ajax()的异步请求来完成用户的注册功能</span><br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/users/reg&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br><br>            <span class="hljs-comment">//serialize这个API会自动检测该表单有什么控件,每个控件检测后还会获取每个控</span><br>            <span class="hljs-comment">// 件的值,拿到这个值后并自动拼接成形如username=Tom&amp;password=123的结构</span><br>            <span class="hljs-attr">data</span>: $(<span class="hljs-string">&quot;#form-reg&quot;</span>).<span class="hljs-title function_">serialize</span>(),<br><br>            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123; <span class="hljs-comment">//1.js是弱数据类型,这个地方不用声明json的数据类型</span><br>                <span class="hljs-comment">//2.如果服务器成功响应就会将返回的数据传给形参,比如&#123;state: 4000,message: &quot;用户名</span><br>                <span class="hljs-comment">// 已经被占用&quot;,data: null&#125;</span><br>                <span class="hljs-keyword">if</span> (json.<span class="hljs-property">state</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;注册成功&quot;</span>)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;注册失败&quot;</span>)<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123; <span class="hljs-comment">//如果问题不在可控范围内,服务器就不会返回自己定</span><br>                <span class="hljs-comment">//义的json字符串:&#123;state: 4000,message: &quot;用户名已经被占用&quot;,data: null&#125;</span><br>                <span class="hljs-comment">//而是返回一个XHR类型的对象,该对象也有一个状态码名字是status</span><br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;注册时产生未知的错误!&quot;</span>+xhr.<span class="hljs-property">status</span>);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>此时可能会出现点击注册提交表单时没有任何响应,原因是idea对于JS代码的兼容性较差,编写了js代码但是有的时候不能正常去加载,解决办法有四种,同前面的:项目环境搭建-&gt;项目测试-&gt;测试静态资源能否正常加载</p><p>包括以后如果修改了前端页面,测试时没有报错也没有按照预想的响应,就考虑是编写的js代码还没有被加载,尝试用这四种方法解决.</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>电脑商城</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>项目练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis的Java客户端</title>
    <link href="/2023/04/23/Redis%E7%9A%84Java%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <url>/2023/04/23/Redis%E7%9A%84Java%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="3-Redis的Java客户端"><a href="#3-Redis的Java客户端" class="headerlink" title="3.Redis的Java客户端"></a>3.Redis的Java客户端</h1><p>在Redis官网中提供了各种语言的客户端，地址：<a href="https://redis.io/docs/clients/">https://redis.io/docs/clients/</a></p><p><img src="p1.png" alt="Redis的Java客户端"></p><p>其中Java客户端也包含很多：</p><p><img src="p2.png" alt="Redis的Java客户端"></p><p>标记为*的就是推荐使用的java客户端，包括：</p><ul><li>Jedis和Lettuce：这两个主要是提供了Redis命令对应的API，方便我们操作Redis，而SpringDataRedis又对这两种做了抽象和封装，因此我们后期会直接以SpringDataRedis来学习。</li><li>Redisson：是在Redis基础上实现了分布式的可伸缩的java数据结构，例如Map、Queue等，而且支持跨进程的同步机制：Lock、Semaphore等待，比较适合用来实现特殊的功能需求。</li></ul><p><img src="p3.png" alt="Redis的Java客户端"></p><h2 id="3-1-Jedis客户端"><a href="#3-1-Jedis客户端" class="headerlink" title="3.1.Jedis客户端"></a>3.1.Jedis客户端</h2><p>Jedis的官网地址： <a href="https://github.com/redis/jedis">https://github.com/redis/jedis</a></p><h3 id="3-1-1-快速入门"><a href="#3-1-1-快速入门" class="headerlink" title="3.1.1.快速入门"></a>3.1.1.快速入门</h3><p>我们先来个快速入门：</p><p>1）引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jedis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--单元测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）建立连接</p><p>新建一个单元测试类，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Jedis jedis;<br><br><span class="hljs-meta">@BeforeEach</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.建立连接</span><br>    <span class="hljs-comment">// jedis = new Jedis(&quot;192.168.150.101&quot;, 6379);</span><br>    jedis = JedisConnectionFactory.getJedis();<br>    <span class="hljs-comment">// 2.设置密码</span><br>    jedis.auth(<span class="hljs-string">&quot;123321&quot;</span>);<br>    <span class="hljs-comment">// 3.选择库</span><br>    jedis.select(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>3）测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 存入数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;虎哥&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>    <span class="hljs-comment">// 获取数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 插入hash数据</span><br>    jedis.hset(<span class="hljs-string">&quot;user:1&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>);<br>    jedis.hset(<span class="hljs-string">&quot;user:1&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>);<br><br>    <span class="hljs-comment">// 获取</span><br>    Map&lt;String, String&gt; map = jedis.hgetAll(<span class="hljs-string">&quot;user:1&quot;</span>);<br>    System.out.println(map);<br>&#125;<br></code></pre></td></tr></table></figure><p>4）释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterEach</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (jedis != <span class="hljs-literal">null</span>) &#123;<br>        jedis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-2-连接池"><a href="#3-1-2-连接池" class="headerlink" title="3.1.2.连接池"></a>3.1.2.连接池</h3><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.jedis.util;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectionFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JedisPool jedisPool;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// 配置连接池</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        poolConfig.setMaxTotal(<span class="hljs-number">8</span>);<br>        poolConfig.setMaxIdle(<span class="hljs-number">8</span>);<br>        poolConfig.setMinIdle(<span class="hljs-number">0</span>);<br>        poolConfig.setMaxWaitMillis(<span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">// 创建连接池对象，参数：连接池配置、服务端ip、服务端端口、超时时间、密码</span><br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig, <span class="hljs-string">&quot;192.168.150.101&quot;</span>, <span class="hljs-number">6379</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;123321&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jedisPool.getResource();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-SpringDataRedis客户端"><a href="#3-2-SpringDataRedis客户端" class="headerlink" title="3.2.SpringDataRedis客户端"></a>3.2.SpringDataRedis客户端</h2><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p><p><img src="p4.png" alt="Redis的Java客户端"></p><h3 id="3-2-1-快速入门"><a href="#3-2-1-快速入门" class="headerlink" title="3.2.1.快速入门"></a>3.2.1.快速入门</h3><p>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单。</p><p>首先，新建一个maven项目，然后按照下面步骤执行：</p><h4 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.heima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redis-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>redis-demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--redis依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--common-pool--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Jackson依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2）配置Redis"><a href="#2）配置Redis" class="headerlink" title="2）配置Redis"></a>2）配置Redis</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">100ms</span><br></code></pre></td></tr></table></figure><h4 id="3）注入RedisTemplate"><a href="#3）注入RedisTemplate" class="headerlink" title="3）注入RedisTemplate"></a>3）注入RedisTemplate</h4><p>因为有了SpringBoot的自动装配，我们可以拿来就用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisStringTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4）编写测试"><a href="#4）编写测试" class="headerlink" title="4）编写测试"></a>4）编写测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisStringTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate edisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 写入一条String数据</span><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;虎哥&quot;</span>);<br>        <span class="hljs-comment">// 获取string数据</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-2-自定义序列化"><a href="#3-2-2-自定义序列化" class="headerlink" title="3.2.2.自定义序列化"></a>3.2.2.自定义序列化</h3><p>RedisTemplate可以接收任意Object作为值写入Redis：</p><p><img src="p5.png" alt="Redis的Java客户端"></p><p>只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的：</p><p><img src="p6.png" alt="Redis的Java客户端"></p><p>缺点：</p><ul><li>可读性差</li><li>内存占用较大</li></ul><p>我们可以自定义RedisTemplate的序列化方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span>&#123;<br>        <span class="hljs-comment">// 创建RedisTemplate对象</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置连接工厂</span><br>        template.setConnectionFactory(connectionFactory);<br>        <span class="hljs-comment">// 创建JSON序列化工具</span><br>        <span class="hljs-type">GenericJackson2JsonRedisSerializer</span> <span class="hljs-variable">jsonRedisSerializer</span> <span class="hljs-operator">=</span> <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br>        <span class="hljs-comment">// 设置Key的序列化</span><br>        template.setKeySerializer(RedisSerializer.string());<br>        template.setHashKeySerializer(RedisSerializer.string());<br>        <span class="hljs-comment">// 设置Value的序列化</span><br>        template.setValueSerializer(jsonRedisSerializer);<br>        template.setHashValueSerializer(jsonRedisSerializer);<br>        <span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里采用了JSON序列化来代替默认的JDK序列化方式。最终结果如图：</p><p><img src="p7.png" alt="Redis的Java客户端"></p><p>整体可读性有了很大提升，并且能将Java对象自动的序列化为JSON字符串，并且查询时能自动把JSON反序列化为Java对象。不过，其中记录了序列化时对应的class名称，目的是为了查询时实现自动反序列化。这会带来额外的内存开销。</p><h3 id="3-2-3-StringRedisTemplate"><a href="#3-2-3-StringRedisTemplate" class="headerlink" title="3.2.3.StringRedisTemplate"></a>3.2.3.StringRedisTemplate</h3><p>为了节省内存空间，我们可以不使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。</p><p><img src="p8.png" alt="Redis的Java客户端"></p><p>因为存入和读取时的序列化及反序列化都是我们自己实现的，SpringDataRedis就不会将class信息写入Redis了。</p><p>这种用法比较普遍，因此SpringDataRedis就提供了RedisTemplate的子类：StringRedisTemplate，它的key和value的序列化方式默认就是String方式。</p><p><img src="p9.png" alt="Redis的Java客户端"></p><p>省去了我们自定义RedisTemplate的序列化方式的步骤，而是直接使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><span class="hljs-comment">// JSON序列化工具，也可以采用fastjson，根据个人习惯</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testSaveUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-comment">// 创建对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;虎哥&quot;</span>, <span class="hljs-number">21</span>);<br>    <span class="hljs-comment">// 手动序列化</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br>    <span class="hljs-comment">// 写入数据</span><br>    stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:200&quot;</span>, json);<br><br>    <span class="hljs-comment">// 获取数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonUser</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:200&quot;</span>);<br>    <span class="hljs-comment">// 手动反序列化</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> mapper.readValue(jsonUser, User.class);<br>    System.out.println(<span class="hljs-string">&quot;user1 = &quot;</span> + user1);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nosql</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis常用命令</title>
    <link href="/2023/04/23/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/04/23/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis常见命令"><a href="#Redis常见命令" class="headerlink" title="Redis常见命令"></a>Redis常见命令</h1><p>Redis是典型的key-value数据库，key一般是字符串，而value包含很多不同的数据类型：</p><p><img src="p1.png" alt="Redis常用命令"></p><p>Redis为了方便我们学习，将操作不同数据类型的命令也做了分组，在<a href="https://redis.io/commands">官网</a> <a href="https://redis.io/commands"> </a>可以查看到不同的命令：</p><p><img src="p2.png" alt="Redis常用命令"></p><p>不同类型的命令称为一个group，我们也可以通过help命令来查看各种不同group的命令：</p><p><img src="p3.png" alt="Redis常用命令"></p><p>接下来，我们就学习常见value值的五种基本数据类型的相关命令。</p><h2 id="2-1-Redis通用命令"><a href="#2-1-Redis通用命令" class="headerlink" title="2.1.Redis通用命令"></a>2.1.Redis通用命令</h2><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul><li>KEYS：查看符合模板的所有key，不建议在生产环境设备上使用，会阻塞所有请求。</li><li>DEL：删除一个指定的key</li><li>EXISTS：判断key是否存在</li><li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li><li>TTL：查看一个KEY的剩余有效期</li><li>补充      看老师演示：select   库的索引号（0 –15）表示切换到对应索引的库。</li></ul><p>通过help [command] 可以查看一个命令的具体用法，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看keys命令的帮助信息：</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">help</span> keys<br><br>KEYS pattern<br>summary: Find all keys matching the given pattern<br>since: 1.0.0<br>group: generic<br></code></pre></td></tr></table></figure><h2 id="2-2-String类型"><a href="#2-2-String类型" class="headerlink" title="2.2.String类型"></a>2.2.String类型</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li>string：普通字符串</li><li>int：整数类型，可以做自增、自减操作</li><li>float：浮点类型，可以做自增、自减操作</li></ul><p>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过512m.</p><p><img src="p4.png" alt="Redis常用命令"></p><h3 id="2-2-1-String的常见命令"><a href="#2-2-1-String的常见命令" class="headerlink" title="2.2.1.String的常见命令"></a>2.2.1.String的常见命令</h3><p>String的常见命令有：</p><ul><li>SET：添加或者修改已经存在的一个String类型的键值对</li><li>GET：根据key获取String类型的value</li><li>MSET：批量添加多个String类型的键值对</li><li>MGET：根据多个key获取多个String类型的value</li><li>INCR：让一个整型的key自增1</li><li>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</li><li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li><li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li>SETEX：添加一个String类型的键值对，并且指定有效期</li></ul><h3 id="2-2-2-Key结构"><a href="#2-2-2-Key结构" class="headerlink" title="2.2.2.Key结构"></a>2.2.2.Key结构</h3><p>Redis没有类似MySQL中的Table的概念，我们该如何区分不同类型的key呢？</p><p>例如，需要存储用户、商品信息到redis，有一个用户id是1，有一个商品id恰好也是1，此时如果使用id作为key，那就会冲突了，该怎么办？</p><p>我们可以通过给key添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p><p>Redis的key允许有多个单词形成层级结构，多个单词之间用’:’隔开，格式如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">项目名:业务名:类型:<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。这样以来，我们就可以把不同类型的数据区分开了。从而避免了key的冲突问题。</p><p>例如我们的项目名称叫 heima，有user和product两种不同类型的数据，我们可以这样定义key：</p><ul><li><p>user相关的key：<strong>heima:user:1</strong></p></li><li><p>product相关的key：<strong>heima:product:1</strong></p></li></ul><p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：</p><table><thead><tr><th><strong>KEY</strong></th><th><strong>VALUE</strong></th></tr></thead><tbody><tr><td>heima:user:1</td><td>{“id”:1,  “name”: “Jack”, “age”: 21}</td></tr><tr><td>heima:product:1</td><td>{“id”:1,  “name”: “小米11”, “price”: 4999}</td></tr></tbody></table><p>并且，在Redis的桌面客户端中，还会以相同前缀作为层级结构，让数据看起来层次分明，关系清晰：</p><p><img src="p5.png" alt="Redis常用命令"></p><h2 id="2-3-Hash类型"><a href="#2-3-Hash类型" class="headerlink" title="2.3.Hash类型"></a>2.3.Hash类型</h2><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：</p><p><img src="p6.png" alt="Redis常用命令"></p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p><p><img src="p7.png" alt="Redis常用命令"></p><p>Hash的常见命令有：</p><ul><li><p>HSET key field value：添加或者修改hash类型key的field的值</p></li><li><p>HGET key field：获取一个hash类型key的field的值</p></li><li><p>HMSET：批量添加多个hash类型key的field的值</p></li><li><p>HMGET：批量获取多个hash类型key的field的值</p></li><li><p>HGETALL：获取一个hash类型的key中的所有的field和value</p></li><li><p>HKEYS：获取一个hash类型的key中的所有的field</p></li><li><p>HINCRBY:让一个hash类型key的字段值自增并指定步长</p></li><li><p>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</p></li></ul><h2 id="2-4-List类型"><a href="#2-4-List类型" class="headerlink" title="2.4.List类型"></a>2.4.List类型</h2><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p><p>特征也与LinkedList类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p>List的常见命令有：</p><ul><li>LPUSH key element … ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li><li>RPUSH key element … ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素（索引从0开始）</li><li>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li></ul><p><img src="p8.png" alt="Redis常用命令"></p><h2 id="2-5-Set类型"><a href="#2-5-Set类型" class="headerlink" title="2.5.Set类型"></a>2.5.Set类型</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p><ul><li><p>无序</p></li><li><p>元素不可重复</p></li><li><p>查找快</p></li><li><p>支持交集、并集、差集等功能</p></li></ul><p>Set的常见命令有：</p><ul><li>SADD key member … ：向set中添加一个或多个元素</li><li>SREM key member … : 移除set中的指定元素</li><li>SCARD key： 返回set中元素的个数</li><li>SISMEMBER key member：判断一个元素是否存在于set中</li><li>SMEMBERS：获取set中的所有元素</li><li>SINTER key1 key2 … ：求key1与key2的交集</li><li>SDIFF Key1 Key2…:求Key1与Key2的差集</li><li>SUNION key1 key2…：求key1和key2的并集</li></ul><p>例如两个集合：s1和s2:</p><p><img src="p9.png" alt="Redis常用命令"></p><p>求交集：SINTER s1 s2</p><p>求s1与s2的不同：SDIFF s1 s2</p><p><img src="p10.png" alt="Redis常用命令"></p><p>练习：</p><ol><li>将下列数据用Redis的Set集合来存储：</li></ol><ul><li>张三的好友有：李四、王五、赵六</li><li>李四的好友有：王五、麻子、二狗</li></ul><ol start="2"><li>利用Set的命令实现下列功能：</li></ol><ul><li>计算张三的好友有几人</li><li>计算张三和李四有哪些共同好友</li><li>查询哪些人是张三的好友却不是李四的好友</li><li>查询张三和李四的好友总共有哪些人</li><li>判断李四是否是张三的好友</li><li>判断张三是否是李四的好友</li><li>将李四从张三的好友列表中移除</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">- 张三的好友有：李四、王五、赵六<br>SADD zs lisi wangwu zhaaoliu<br>- 李四的好友有：王五、麻子、二狗<br>SADD <span class="hljs-built_in">ls</span> wangwu mazi ergou<br>- 计算张三的好友有几人<br>SCARD zs<br>- 计算张三和李四有哪些共同好友<br>SINTER　zs　<span class="hljs-built_in">ls</span><br>- 查询哪些人是张三的好友却不是李四的好友<br>SDIFF zs <span class="hljs-built_in">ls</span><br>- 查询张三和李四的好友总共有哪些人<br>SUNION zs <span class="hljs-built_in">ls</span><br>- 判断李四是否是张三的好友<br>SISMEMBER zs lisi<br>- 判断张三是否是李四的好友<br>SISMEMBER <span class="hljs-built_in">ls</span> zhangsan<br>- 将李四从张三的好友列表中移除<br>SREM zs lisi<br></code></pre></td></tr></table></figure><p>涨个小知识：全角和半角</p><p><img src="p11.png" alt="Redis常用命令"></p><h2 id="2-6-SortedSet类型"><a href="#2-6-SortedSet类型" class="headerlink" title="2.6.SortedSet类型"></a>2.6.SortedSet类型</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><p>SortedSet的常见命令有：</p><ul><li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li><li>ZREM key member：删除sorted set中的一个指定元素</li><li>ZSCORE key member : 获取sorted set中的指定元素的score值</li><li>ZRANK key member：获取sorted set 中的指定元素的排名</li><li>ZCARD key：获取sorted set中的元素个数</li><li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li><li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li><li>ZDIFF、ZINTER、ZUNION：求差集、交集、并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><ul><li><p><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</p></li><li><p><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</p></li></ul><p>练习题：</p><p>将班级的下列学生得分存入Redis的SortedSet中：</p><p>Jack 85, Lucy 89, Rose 82, Tom 95, Jerry 78, Amy 92, Miles 76</p><p>并实现下列功能：</p><ul><li>删除Tom同学</li><li>获取Amy同学的分数</li><li>获取Rose同学的排名</li><li>查询80分以下有几个学生</li><li>给Amy同学加2分</li><li>查出成绩前3名的同学</li><li>查出成绩80分以下的所有同学</li></ul><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tap">将班级的下列学生得分存入Redis的SortedSet中：<br>ZADD stus<span class="hljs-number"> 85 </span>Jack<span class="hljs-number"> 89 </span>Lucy<span class="hljs-number"> 82 </span>Rose<span class="hljs-number"> 95 </span>Tom<span class="hljs-number"> 78 </span>Jerry<span class="hljs-number"> 92 </span>Amy<span class="hljs-number"> 76 </span>Miles <br>- 删除Tom同学<br>ZREM stus Tom<br>- 获取Amy同学的分数<br>ZDCORE stus Amy<br>- 获取Rose同学的排名<br>ZREVRANK stus Rose<br>- 查询80分以下有几个学生<br>ZCOUNT stus<span class="hljs-number"> 0 </span>80<br>- 给Amy同学加2分<br>ZINCRBY stus<span class="hljs-number"> 2 </span>Amy<br>- 查出成绩前3名的同学<br>ZREVRANGE<span class="hljs-number"> 0 </span>2<br>- 查出成绩80分以下的所有同学<br>ZRANGEBYSCORE stus<span class="hljs-number"> 0 </span>80<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nosql</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Redis</title>
    <link href="/2023/04/23/%E5%88%9D%E8%AF%86Redis/"/>
    <url>/2023/04/23/%E5%88%9D%E8%AF%86Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="1-初识Redis"><a href="#1-初识Redis" class="headerlink" title="1.初识Redis"></a>1.初识Redis</h1><p>Redis是一种键值型的NoSql数据库，这里有两个关键字：</p><ul><li><p>键值型</p></li><li><p>NoSql</p></li></ul><p>其中<strong>键值型</strong>，是指Redis中存储的数据都是以key、value对的形式存储，而value的形式多种多样，可以是字符串、数值、甚至json：</p><p><img src="p1.png" alt="初识Redis"></p><p>而NoSql则是相对于传统关系型数据库而言，有很大差异的一种数据库。</p><h2 id="1-1-认识NoSQL"><a href="#1-1-认识NoSQL" class="headerlink" title="1.1.认识NoSQL"></a>1.1.认识NoSQL</h2><p><strong>NoSql</strong>可以翻译做Not Only Sql（不仅仅是SQL），或者是No Sql（非Sql的）数据库。是相对于传统关系型数据库而言，有很大差异的一种特殊的数据库，因此也称之为<strong>非关系型数据库</strong>。</p><h3 id="1-1-1-结构化与非结构化"><a href="#1-1-1-结构化与非结构化" class="headerlink" title="1.1.1.结构化与非结构化"></a>1.1.1.结构化与非结构化</h3><p>传统关系型数据库是结构化数据，每一张表都有严格的约束信息：字段名、字段数据类型、字段约束等等信息，插入的数据必须遵守这些约束：</p><p><img src="p2.png" alt="初识Redis"></p><p>而NoSql则对数据库格式没有严格约束，往往形式松散，自由。</p><p>可以是键值型：</p><p><img src="p3.png" alt="初识Redis"></p><p>也可以是文档型：</p><p><img src="p4.png" alt="初识Redis"></p><p>甚至可以是图格式：</p><p><img src="p5.png" alt="初识Redis"></p><h3 id="1-1-2-关联和非关联"><a href="#1-1-2-关联和非关联" class="headerlink" title="1.1.2.关联和非关联"></a>1.1.2.关联和非关联</h3><p>传统数据库的表与表之间往往存在关联，例如外键：</p><p><img src="p6.png" alt="初识Redis"></p><p>而非关系型数据库不存在关联关系，要维护关系要么靠代码中的业务逻辑，要么靠数据之间的耦合：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  id<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br>  orders<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>       id<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>       item<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br> id<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> title<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;荣耀6&quot;</span><span class="hljs-punctuation">,</span> price<span class="hljs-punctuation">:</span> <span class="hljs-number">4999</span><br>       <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>       id<span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>       item<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br> id<span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><span class="hljs-punctuation">,</span> title<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米11&quot;</span><span class="hljs-punctuation">,</span> price<span class="hljs-punctuation">:</span> <span class="hljs-number">3999</span><br>       <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>此处要维护“张三”的订单与商品“荣耀”和“小米11”的关系，不得不冗余的将这两个商品保存在张三的订单文档中，不够优雅。还是建议用业务来维护关联关系。</p><h3 id="1-1-3-查询方式"><a href="#1-1-3-查询方式" class="headerlink" title="1.1.3.查询方式"></a>1.1.3.查询方式</h3><p>传统关系型数据库会基于Sql语句做查询，语法有统一标准；</p><p>而不同的非关系数据库查询语法差异极大，五花八门各种各样。</p><p><img src="p7.png" alt="初识Redis"></p><h3 id="1-1-4-事务"><a href="#1-1-4-事务" class="headerlink" title="1.1.4.事务"></a>1.1.4.事务</h3><p>传统关系型数据库能满足事务ACID的原则。</p><p><img src="p8.png" alt="初识Redis"></p><p>而非关系型数据库往往不支持事务，或者不能严格保证ACID的特性，只能实现基本的一致性。</p><h3 id="1-1-5-总结"><a href="#1-1-5-总结" class="headerlink" title="1.1.5.总结"></a>1.1.5.总结</h3><p>除了上述四点以外，在存储方式、扩展性、查询性能上关系型与非关系型也都有着显著差异，总结如下：</p><p><img src="p9.png" alt="初识Redis"></p><ul><li>存储方式<ul><li>关系型数据库基于磁盘进行存储，会有大量的磁盘IO，对性能有一定影响</li><li>非关系型数据库，他们的操作更多的是依赖于内存来操作，内存的读写速度会非常快，性能自然会好一些</li></ul></li></ul><ul><li>扩展性<ul><li>关系型数据库集群模式一般是主从，主从数据一致，起到数据备份的作用，称为垂直扩展。</li><li>非关系型数据库可以将数据拆分，存储在不同机器上，可以保存海量数据，解决内存大小有限的问题。称为水平扩展。</li><li>关系型数据库因为表之间存在关联关系，如果做水平扩展会给数据查询带来很多麻烦</li></ul></li></ul><h2 id="1-2-认识Redis"><a href="#1-2-认识Redis" class="headerlink" title="1.2.认识Redis"></a>1.2.认识Redis</h2><p>Redis诞生于2009年全称是<strong>Re</strong>mote  <strong>D</strong>ictionary <strong>S</strong>erver 远程词典服务器，是一个基于内存的键值型NoSQL数据库。</p><p><strong>特征</strong>：</p><ul><li>键值（key-value）型，value支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存、IO多路复用、良好的编码）。</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li><li>支持多语言客户端</li></ul><p><strong>作者</strong>：Antirez</p><p>Redis的官方网站地址：<a href="https://redis.io/">Redis</a></p><h2 id="1-3-安装Redis"><a href="#1-3-安装Redis" class="headerlink" title="1.3.安装Redis"></a>1.3.安装Redis</h2><p>大多数企业都是基于Linux服务器来部署项目，而且Redis官方也没有提供Windows版本的安装包。因此我们会基于Linux系统来安装Redis.</p><p>此处选择的Linux版本为CentOS 7.</p><h3 id="1-3-1-依赖库"><a href="#1-3-1-依赖库" class="headerlink" title="1.3.1.依赖库"></a>1.3.1.依赖库</h3><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y gcc tcl<br></code></pre></td></tr></table></figure><h3 id="1-3-2-上传安装包并解压"><a href="#1-3-2-上传安装包并解压" class="headerlink" title="1.3.2.上传安装包并解压"></a>1.3.2.上传安装包并解压</h3><p>然后将Redis安装包上传到虚拟机的任意目录：</p><p><img src="p10.png" alt="初识Redis"></p><p>例如，我放到了/usr/local/src 目录：</p><p><img src="p11.png" alt="初识Redis"></p><p>解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xzf redis-6.2.6.tar.gz<br></code></pre></td></tr></table></figure><p>解压后：</p><p><img src="p12.png" alt="初识Redis"></p><p>进入redis目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> redis-6.2.6<br></code></pre></td></tr></table></figure><p>运行编译命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>默认的安装路径是在 <code>/usr/local/bin</code>目录下：</p><p><img src="p13.jpg" alt="初识Redis"></p><p>该目录已经默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h3 id="1-3-3-启动"><a href="#1-3-3-启动" class="headerlink" title="1.3.3.启动"></a>1.3.3.启动</h3><p>redis的启动方式有很多种，例如：</p><ul><li>默认启动</li><li>指定配置启动</li><li>开机自启</li></ul><h3 id="1-3-4-默认启动"><a href="#1-3-4-默认启动" class="headerlink" title="1.3.4.默认启动"></a>1.3.4.默认启动</h3><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">redis-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="p14.png" alt="初识Redis"></p><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h3 id="1-3-5-指定配置启动"><a href="#1-3-5-指定配置启动" class="headerlink" title="1.3.5.指定配置启动"></a>1.3.5.指定配置启动</h3><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫redis.conf：</p><p><img src="p15.png" alt="初识Redis"></p><p>我们先将这个配置文件备份一份：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cp</span> redis.<span class="hljs-keyword">conf</span> redis.<span class="hljs-keyword">conf</span>.bck<br></code></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">0.0.0.0</span><br><span class="hljs-comment"># 守护进程，修改为yes后即可后台运行</span><br><span class="hljs-attr">daemonize</span> <span class="hljs-string">yes </span><br><span class="hljs-comment"># 密码，设置后访问Redis必须输入密码</span><br><span class="hljs-attr">requirepass</span> <span class="hljs-string">123321</span><br></code></pre></td></tr></table></figure><p>Redis的其它常见配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 监听的端口</span><br><span class="hljs-attr">port</span> <span class="hljs-string">6379</span><br><span class="hljs-comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span><br><span class="hljs-attr">dir</span> <span class="hljs-string">.</span><br><span class="hljs-comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span><br><span class="hljs-attr">databases</span> <span class="hljs-string">1</span><br><span class="hljs-comment"># 设置redis能够使用的最大内存</span><br><span class="hljs-attr">maxmemory</span> <span class="hljs-string">512mb</span><br><span class="hljs-comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span><br><span class="hljs-attr">logfile</span> <span class="hljs-string">&quot;redis.log&quot;</span><br></code></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入redis安装目录 </span><br><span class="hljs-built_in">cd</span> /usr/local/src/redis-6.2.6<br><span class="hljs-comment"># 启动</span><br>redis-server redis.conf<br></code></pre></td></tr></table></figure><p>停止服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span><br><span class="hljs-comment"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span><br>redis-cli -u 123321 shutdown<br></code></pre></td></tr></table></figure><h3 id="1-3-6-开机自启"><a href="#1-3-6-开机自启" class="headerlink" title="1.3.6.开机自启"></a>1.3.6.开机自启</h3><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/systemd/system/redis.service<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs conf">[Unit]<br>Description=redis-server<br>After=network.target<br><br>[Service]<br>Type=forking<br>ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf<br>PrivateTmp=true<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后重载系统服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>现在，我们可以用下面这组命令来操作redis了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动</span><br>systemctl start redis<br><span class="hljs-comment"># 停止</span><br>systemctl stop redis<br><span class="hljs-comment"># 重启</span><br>systemctl restart redis<br><span class="hljs-comment"># 查看状态</span><br>systemctl status redis<br></code></pre></td></tr></table></figure><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> redis<br></code></pre></td></tr></table></figure><h2 id="1-4-Redis桌面客户端"><a href="#1-4-Redis桌面客户端" class="headerlink" title="1.4.Redis桌面客户端"></a>1.4.Redis桌面客户端</h2><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p><ul><li>命令行客户端</li><li>图形化桌面客户端</li><li>编程客户端</li></ul><h3 id="1-4-1-Redis命令行客户端"><a href="#1-4-1-Redis命令行客户端" class="headerlink" title="1.4.1.Redis命令行客户端"></a>1.4.1.Redis命令行客户端</h3><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli [options] [commonds]<br></code></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码 </li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p><img src="p16.png" alt="初识Redis"></p><h3 id="1-4-2-图形化桌面客户端"><a href="#1-4-2-图形化桌面客户端" class="headerlink" title="1.4.2.图形化桌面客户端"></a>1.4.2.图形化桌面客户端</h3><p>GitHub上的大神编写了Redis的图形化桌面客户端，地址：<a href="https://github.com/uglide/RedisDesktopManager">https://github.com/uglide/RedisDesktopManager</a></p><p>不过该仓库提供的是RedisDesktopManager的源码，并未提供windows安装包。</p><p>在下面这个仓库可以找到安装包：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a></p><h3 id="1-4-3-安装"><a href="#1-4-3-安装" class="headerlink" title="1.4.3.安装"></a>1.4.3.安装</h3><p>在课前资料中可以找到Redis的图形化桌面客户端：</p><p><img src="p17.png" alt="初识Redis"></p><p>解压缩后，运行安装程序即可安装：</p><p><img src="p18.png" alt="初识Redis"></p><p>安装完成后，在安装目录下找到rdm.exe文件：</p><p><img src="p19.png" alt="初识Redis"></p><p>双击即可运行：</p><p><img src="p20.png" alt="初识Redis"></p><h3 id="1-4-4-建立连接"><a href="#1-4-4-建立连接" class="headerlink" title="1.4.4.建立连接"></a>1.4.4.建立连接</h3><p>点击左上角的<code>连接到Redis服务器</code>按钮：</p><p><img src="p21.png" alt="初识Redis"></p><p>在弹出的窗口中填写Redis服务信息：</p><p><img src="p22.png" alt="初识Redis"></p><p>点击确定后，在左侧菜单会出现这个链接：</p><p><img src="p23.png" alt="初识Redis"></p><p>点击即可建立连接了。</p><p><img src="p24.png" alt="初识Redis"></p><p>Redis默认有16个仓库，编号从0至15.  通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。</p><p>如果是基于redis-cli连接Redis服务，可以通过select命令来选择数据库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 选择 0号库</span><br>select 0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nosql</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑商城01</title>
    <link href="/2023/04/23/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E01/"/>
    <url>/2023/04/23/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E01/</url>
    
    <content type="html"><![CDATA[<h3 id="项目环境搭建"><a href="#项目环境搭建" class="headerlink" title="项目环境搭建"></a>项目环境搭建</h3><h4 id="1-项目分析"><a href="#1-项目分析" class="headerlink" title="1.项目分析"></a>1.项目分析</h4><p>项目功能:登录,注册,热销商品,用户管理(密码,个人信息,头像,收货地址),购物车(展示,增加,删除),订单模块</p><p>开发顺序:注册,登录,用户管理,购物车,商品,订单模块</p><p>某一个模块的开发顺序:</p><p>持久层开发:依据前端页面的设置规划相关的SQL语句,以及进行配置</p><p>业务层开发:核心功能控制,业务操作以及异常的处理</p><p>控制层开发:接收请求,处理响应</p><p>前端开发:JS,Query,AJAX这些技术来连接后台</p><h4 id="2-项目基本环境"><a href="#2-项目基本环境" class="headerlink" title="2.项目基本环境"></a>2.项目基本环境</h4><p>JDK:1.8版本及以上<br>maven:需要配置到idea,3.6.1版本及以上<br>数据库:MySQL,要求是5.1版本及以上<br>开发的平台:Idea</p><p>项目名称:store,表示商城<br>结构:com.cy.store<br>资源文件:resources文件夹下(static,templates)<br>单元测试:test.com.cy.store</p><h4 id="3-项目创建"><a href="#3-项目创建" class="headerlink" title="3.项目创建"></a>3.项目创建</h4><p>1.Create New Project-&gt;</p><p>2.选择Spring Initializr,点击next</p><p>3.跳转到Project Metadata页面,该页面的Group填写域com和自己起的域名cy(即com.cy)==;Artifact填写项目名store;==Java Version版本选择自己安装的版本,点击next</p><p>4.选择需要导入的jar包:<br>    前后端的连接jar包:Web目录下的Spring web<br>    mybatis的jar包:SQL目录下的Mybatis Framework<br>    mysql数据库的驱动:SQL目录下的MySQL Driver</p><p>5.创建一个数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database store <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8;<br></code></pre></td></tr></table></figure><p>6.在application.properties文件中配置数据库的连接源信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/store?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/shanghai</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><h4 id="4-项目测试"><a href="#4-项目测试" class="headerlink" title="4.项目测试"></a>4.项目测试</h4><h5 id="4-1测试能否成功连接数据库"><a href="#4-1测试能否成功连接数据库" class="headerlink" title="4.1测试能否成功连接数据库"></a>4.1测试能否成功连接数据库</h5><p>启动Springboot主类,看idea中是否有对应的spring图形输出</p><p>若idea有对应的spring图形输出开始第二步测试:在单元测试中测试数据库的连接是否可以加载:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StoreApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//自动装配</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        System.out.println(dataSource.getConnection());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行getConnection方法,若成功返回HikariProxyConnection@189194499 wrapping com.mysql.cj.jdbc.ConnectionImpl@2b0e9f30则说明成功连接数据库,其中Hikari是一个连接池,用来管理数据库的连接对象,是springboot默认内部整合的连接池,该连接池号称世界上最快的连接池,底层仍然采用c3p0来管理数据库的连接对象。</p><h5 id="4-2测试静态资源能否正常加载"><a href="#4-2测试静态资源能否正常加载" class="headerlink" title="4.2测试静态资源能否正常加载"></a>4.2测试静态资源能否正常加载</h5><p>将静态资源(SpringBoot电脑商城项目-V1.0\tools\pages_src\pages*)复制到static目录下重启项目并尝试访问localhost:8080/web/login.html(因为static是默认根目录,所以不是localhost:8080/static/web/login.html)</p><p>如果这个过程访问失败,原因是idea对于JS代码的兼容性较差,编写了js代码但是有的时候不能正常去加载,解决办法有以下四种:</p><p>1.clear-install:依次点击MavenProject-&gt;store-&gt;Lifecycle-&gt;clean,等待清哩项目完毕后点击同目录下的install重新部署</p><p>2.idea缓存清理:点击File下的Invalidate Caches/Restart…然后在弹出的窗口中选择Invalidate and Restart,此时就会自动清除缓存并重新启动idea</p><p>3.rebuild重新构建:点击工具栏的Build下的Rebuild Project</p><p>4.重启电脑</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>电脑商城</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>项目练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客文章操作</title>
    <link href="/2023/04/23/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/04/23/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>在上一篇博客中记录了个人博客从无到有的搭建，这篇博客就来记录一下一些关于博客文章相关的操作。</p><p>首先找到自己博客所在的文件在，我的是在D:\Workspace\Myblog\hexo-blog，接着在地址框里输入cmd进入命令行窗口（或者是在该目录下右键git bash here）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在/source/_posts目录下新建一个 文件名.md 文件，该文件就是我们用来写博客的文件。</span><br>hexo new &quot;文件名&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除博客的话直接在对应目录下删除对应的markdown文件即可。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">拓展：markdown文件中引入图片和超链接：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">![描述信息](图片名称带后缀)    图片放在和markdown文件同级目录下的同名文件夹中。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[描述信息](超链接地址)  注意英文状态</span><br></code></pre></td></tr></table></figure><p>当在本地文件夹下进行修改以后，进行如下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br>hexo clean  <br><span class="hljs-meta prompt_">#</span><span class="language-bash">是hexo generate命令的简写，生成静态文件。</span><br>hexo g     <br><span class="hljs-meta prompt_">#</span><span class="language-bash">是hexo server的简写，启动服务器。默认情况下，访问网址为：http://localhost:4000/。</span><br>hexo s     <br><span class="hljs-meta prompt_">#</span><span class="language-bash">是hexo deploy命令的简写，部署网站，同步到你的个人网站中了(博客在本机访问时不可以进行此操作，否则会报错)</span><br>hexo d      <br></code></pre></td></tr></table></figure><p>目前先总结这些常用的操作，后续会不断补充。了解更多可以参考官网：<a href="https://hexo.io/zh-cn/docs/commands.html">hexo官网</a></p>]]></content>
    
    
    <categories>
      
      <category>我的博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Idea中的快捷键</title>
    <link href="/2023/04/22/Idea%E4%B8%AD%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2023/04/22/Idea%E4%B8%AD%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-IDEA的日常快捷键"><a href="#1-IDEA的日常快捷键" class="headerlink" title="1-IDEA的日常快捷键"></a>1-IDEA的日常快捷键</h2><h3 id="第1组：通用型"><a href="#第1组：通用型" class="headerlink" title="第1组：通用型"></a>第1组：通用型</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>复制代码-copy</td><td>ctrl + c</td></tr><tr><td>粘贴-paste</td><td>ctrl + v</td></tr><tr><td>剪切-cut</td><td>ctrl + x</td></tr><tr><td>撤销-undo</td><td>ctrl + z</td></tr><tr><td>反撤销-redo</td><td>ctrl + shift + z</td></tr><tr><td>保存-save all</td><td>ctrl + s</td></tr><tr><td>全选-select all</td><td>ctrl + a</td></tr></tbody></table><h3 id="第2组：提高编写速度（上）"><a href="#第2组：提高编写速度（上）" class="headerlink" title="第2组：提高编写速度（上）"></a>第2组：提高编写速度（上）</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>智能提示-edit</td><td>alt + enter</td></tr><tr><td>提示代码模板-insert live template</td><td>ctrl+j</td></tr><tr><td>使用xx块环绕-surround with …</td><td>ctrl+alt+t</td></tr><tr><td>调出生成getter/setter/构造器等结构-generate …</td><td>alt+insert</td></tr><tr><td>自动生成返回值变量-introduce variable …</td><td>ctrl+alt+v</td></tr><tr><td>复制指定行的代码-duplicate line or selection</td><td>ctrl+d</td></tr><tr><td>删除指定行的代码-delete line</td><td>ctrl+y</td></tr><tr><td>切换到下一行代码空位-start new line</td><td>shift + enter</td></tr><tr><td>切换到上一行代码空位-start new line before current</td><td>ctrl +alt+ enter</td></tr><tr><td>向上移动代码-move statement up</td><td>ctrl+shift+↑</td></tr><tr><td>向下移动代码-move statement down</td><td>ctrl+shift+↓</td></tr><tr><td>向上移动一行-move line up</td><td>alt+shift+↑</td></tr><tr><td>向下移动一行-move line down</td><td>alt+shift+↓</td></tr><tr><td>方法的形参列表提醒-parameter info</td><td>ctrl+p</td></tr></tbody></table><h3 id="第3组：提高编写速度（下）"><a href="#第3组：提高编写速度（下）" class="headerlink" title="第3组：提高编写速度（下）"></a>第3组：提高编写速度（下）</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>批量修改指定的变量名、方法名、类名等-rename</td><td>shift+f6</td></tr><tr><td>抽取代码重构方法-extract method …</td><td>ctrl+alt+m</td></tr><tr><td>重写父类的方法-override methods …</td><td>ctrl+o</td></tr><tr><td>实现接口的方法-implements methods …</td><td>ctrl+i</td></tr><tr><td>选中的结构的大小写的切换-toggle case</td><td>ctrl+shift+u</td></tr><tr><td>批量导包-optimize imports</td><td>ctrl+alt+o</td></tr></tbody></table><h3 id="第4组：类结构、查找和查看源码"><a href="#第4组：类结构、查找和查看源码" class="headerlink" title="第4组：类结构、查找和查看源码"></a>第4组：类结构、查找和查看源码</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>如何查看源码-go to class…</td><td>ctrl + 选中指定的结构 或 ctrl+n</td></tr><tr><td>显示当前类结构，支持搜索指定的方法、属性等-file structure</td><td>ctrl+f12</td></tr><tr><td>退回到前一个编辑的页面-back</td><td>ctrl+alt+←</td></tr><tr><td>进入到下一个编辑的页面-forward</td><td>ctrl+alt+→</td></tr><tr><td>打开的类文件之间切换-select previous/next tab</td><td>alt+←/→</td></tr><tr><td>光标选中指定的类，查看继承树结构-Type Hierarchy</td><td>ctrl+h</td></tr><tr><td>查看方法文档-quick documentation</td><td>ctrl+q</td></tr><tr><td>类的UML关系图-show uml popup</td><td>ctrl+alt+u</td></tr><tr><td>定位某行-go to line/column</td><td>ctrl+g</td></tr><tr><td>回溯变量或方法的来源-go to implementation(s)</td><td>ctrl+alt+b</td></tr><tr><td>折叠方法实现-collapse all</td><td>ctrl+shift+ -</td></tr><tr><td>展开方法实现-expand all</td><td>ctrl+shift+ +</td></tr><tr><td>查看当前类结构</td><td>alt+7</td></tr></tbody></table><h3 id="第5组：查找、替换与关闭"><a href="#第5组：查找、替换与关闭" class="headerlink" title="第5组：查找、替换与关闭"></a>第5组：查找、替换与关闭</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>查找指定的结构</td><td>ctlr+f</td></tr><tr><td>快速查找：选中的Word快速定位到下一个-find next</td><td>ctrl+l</td></tr><tr><td>查找与替换-replace</td><td>ctrl+r</td></tr><tr><td>直接定位到当前行的首位-move caret to line start</td><td>home</td></tr><tr><td>直接定位到当前行的末位 -move caret to line end</td><td>end</td></tr><tr><td>查询当前元素在当前文件中的引用，然后按 F3 可以选择</td><td>ctrl+f7</td></tr><tr><td>全项目搜索文本-find in path …</td><td>ctrl+shift+f</td></tr><tr><td>关闭当前窗口-close</td><td>ctrl+f4</td></tr></tbody></table><h3 id="第6组：调整格式"><a href="#第6组：调整格式" class="headerlink" title="第6组：调整格式"></a>第6组：调整格式</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>格式化代码-reformat code</td><td>ctrl+alt+l</td></tr><tr><td>使用单行注释-comment with line comment</td><td>ctrl + /</td></tr><tr><td>使用/取消多行注释-comment with block comment</td><td>ctrl + shift + /</td></tr><tr><td>选中数行，整体往后移动-tab</td><td>tab</td></tr><tr><td>选中数行，整体往前移动-prev tab</td><td>shift + tab</td></tr></tbody></table><h2 id="2-Debug快捷键"><a href="#2-Debug快捷键" class="headerlink" title="2-Debug快捷键"></a>2-Debug快捷键</h2><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>单步调试（不进入函数内部）- step over</td><td>F8</td></tr><tr><td>单步调试（进入函数内部）- step into</td><td>F7</td></tr><tr><td>强制单步调试（进入函数内部） - force step into</td><td>alt+shift+f7</td></tr><tr><td>选择要进入的函数 - smart step into</td><td>shift + F7</td></tr><tr><td>跳出函数 - step out</td><td>shift + F8</td></tr><tr><td>运行到断点 - run to cursor</td><td>alt + F9</td></tr><tr><td>继续执行，进入下一个断点或执行完程序 - resume program</td><td>F9</td></tr><tr><td>停止 - stop</td><td>Ctrl+F2</td></tr><tr><td>查看断点 - view breakpoints</td><td>Ctrl+Shift+F8</td></tr><tr><td>关闭 - close</td><td>Ctrl+F4</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 编程工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2023/04/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/04/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="GitHub-Pages-Hexo搭建个人博客"><a href="#GitHub-Pages-Hexo搭建个人博客" class="headerlink" title="GitHub Pages + Hexo搭建个人博客"></a>GitHub Pages + Hexo搭建个人博客</h3><h4 id="第一步：准备工作"><a href="#第一步：准备工作" class="headerlink" title="第一步：准备工作"></a>第一步：准备工作</h4><h5 id="1-GitHub账号"><a href="#1-GitHub账号" class="headerlink" title="1.GitHub账号"></a>1.GitHub账号</h5><p>需要有一个GitHub账号，没有的话到官网申请一个。</p><h5 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h5><p>在自己电脑上安装好Git，hexo部署到GitHub时要用。</p><h5 id="3-安装NodeJS"><a href="#3-安装NodeJS" class="headerlink" title="3.安装NodeJS"></a>3.安装NodeJS</h5><p>在自己电脑上安装好NodeJS，Hexo是基于NodeJS编写的，所以需要安装NodeJS和npm工具。</p><h4 id="第二步：创建仓库"><a href="#第二步：创建仓库" class="headerlink" title="第二步：创建仓库"></a>第二步：创建仓库</h4><p>在<code>GitHub</code>上创建一个新的代码仓库用于保存我们的网页。</p><p>首先登录我们自己的GitHub账号。进行如下操作：</p><p><img src="p1.png" alt="创建仓库第1步"></p><p>点击<code>New</code>按钮，进入仓库创建页面。</p><p><img src="p2.png" alt="创建仓库第2步"></p><p>填写仓库名，格式必须为<code>&lt;用户名&gt;.github.io</code>，然后点击<code>Create repository</code>。</p><p><img src="p3.png" alt="创建仓库第3步"></p><p>点击<code>creating a new file</code>创建一个新文件，作为我们网站的主页。</p><p><img src="p4.png" alt="创建仓库第4步"></p><p>新文件的名字必须为<code>index.html</code>，内容先随便写一个简单的，内容示例如下，填写之后点击<code>Commit new file</code>提交。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>yaorongke<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>yaorongke的个人主页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello ~<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="p5.png" alt="创建仓库第5步"></p><p>GitHub Pages中找到我们主页的地址</p><p><img src="p6.png" alt="创建仓库第6步"></p><p>浏览器中访问上述地址，成功即可。当然这里创建的网页是非常简陋的，只是为了演示下<code>GitHub Pages</code>的使用方式。</p><h4 id="第三步：安装hexo"><a href="#第三步：安装hexo" class="headerlink" title="第三步：安装hexo"></a>第三步：安装hexo</h4><p>我们采用<code>Hexo</code>来创建我们的博客网站，<code>Hexo</code> 是一个基于<code>NodeJS</code>的静态博客网站生成器，使用<code>Hexo</code>不需开发，只要进行一些必要的配置即可生成一个个性化的博客网站，非常方便。点击进入<a href="https://hexo.io/zh-cn/">官网</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">安装hexo<br>npm install -g hexo-cli<br>查看版本<br>hexo -v<br>创建一个项目 hexo-blog 并初始化<br>hexo init hexo-blog<br>cd hexo-blog<br>npm install<br>本地启动<br>hexo g<br>hexo server<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000，页面默认主图风格如下">http://localhost:4000，页面默认主图风格如下</a></p><p><img src="p7.png" alt="默认风格"></p><h4 id="第四步：更换主题"><a href="#第四步：更换主题" class="headerlink" title="第四步：更换主题"></a>第四步：更换主题</h4><p><code>Hexo</code> 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点 <a href="https://hexo.io/themes/">这里</a> 查看。这里以 <code>Fluid</code>为基础进行讲解的。</p><p>以下安装步骤摘自 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid官网</a></p><h5 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a><strong>安装主题</strong></h5><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a> 解压到 <code>themes</code> 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><h5 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a><strong>指定主题</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">如下修改 Hexo 博客目录中的 _config.yml：<br>theme: fluid  # 指定主题<br>language: zh-CN  # 指定语言，会影响主题显示的语言，按需修改<br>创建「关于页」<br>首次使用主题的「关于页」需要手动创建：<br>hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-02-23 19:20:33</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br><br></code></pre></td></tr></table></figure><p><strong>本地启动</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g -d</span><br><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000，`Fluid`主题风格页面如下">http://localhost:4000，`Fluid`主题风格页面如下</a></p><p><img src="p8.png" alt="fluid主题风格"></p><h4 id="第五步：创建文章"><a href="#第五步：创建文章" class="headerlink" title="第五步：创建文章"></a>第五步：创建文章</h4><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">post_asset_folder: true<br>执行如下命令创建一篇新文章，名为《测试文章》<br>hexo new post 测试文章<br><br></code></pre></td></tr></table></figure><p>执行完成后在<code>source\_posts</code>目录下生成了一个md文件和一个同名的资源目录(用于存放图片)</p><p><img src="p9.png" alt="`source\_posts`目录下生成了一个md文件和一个同名的资源目录"></p><p>图片的引入方式可参考官方文档 <a href="https://hexo.io/zh-cn/docs/asset-folders.html%EF%BC%8C%E6%9C%89%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E3%80%82%E8%BF%99%E9%87%8C%E5%B0%B1%E4%B8%8D%E5%86%8D%E6%BC%94%E7%A4%BA%E3%80%82">https://hexo.io/zh-cn/docs/asset-folders.html，有详细介绍。这里就不再演示。</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">测试文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2021-06-10 16:35:20</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">原创</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Java</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这是一篇测试文章</span><br><br>&#123;<span class="hljs-string">%</span> <span class="hljs-string">asset_img</span> <span class="hljs-string">test.png</span> <span class="hljs-string">图片引用方法一</span> <span class="hljs-string">%</span>&#125;<br><br><span class="hljs-type">![</span><span class="hljs-string">图片引用方法二](test.png)</span><br><br><span class="hljs-type">![</span><span class="hljs-string">图片引用方法三](/images/test.png)</span><br><br></code></pre></td></tr></table></figure><h4 id="第六步：个性化页面展示"><a href="#第六步：个性化页面展示" class="headerlink" title="第六步：个性化页面展示"></a>第六步：个性化页面展示</h4><p>该部分因个人喜好而定，因为我本人也是参照的官方用户手册，就不再赘述。<a href="https://fluid-dev.github.io/hexo-fluid-docs/start/">文档地址</a></p><h4 id="第七步：发布到githu-Pages"><a href="#第七步：发布到githu-Pages" class="headerlink" title="第七步：发布到githu Pages"></a>第七步：发布到githu Pages</h4><p>安装hexo-deployer-git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改根目录下的 <code>_config.yml</code>，配置 <code>GitHub</code> 相关信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repo: https://github.com/yaorongke/yaorongke.github.io.git<br>  branch: main<br>  token: ghp_3KakcaPHerunNRyMerofcFd9pblU282FSbsY<br></code></pre></td></tr></table></figure><p>其中 <code>token</code> 为 <code>GitHub</code> 的 <code>Personal access tokens</code>，获取方式如下图</p><p><img src="p10.png" alt="获取token"></p><p>部署到Github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br></code></pre></td></tr></table></figure><p>浏览器访问 https://用户名.github.io/，部署成功</p><h4 id="个人博客的搭建及本片博客的编写参照了csdn“淡淡的说非”的博客《GitHub-Pages-Hexo搭建个人博客网站，史上最全教程》地址"><a href="#个人博客的搭建及本片博客的编写参照了csdn“淡淡的说非”的博客《GitHub-Pages-Hexo搭建个人博客网站，史上最全教程》地址" class="headerlink" title="个人博客的搭建及本片博客的编写参照了csdn“淡淡的说非”的博客《GitHub Pages + Hexo搭建个人博客网站，史上最全教程》地址"></a>个人博客的搭建及本片博客的编写参照了csdn“淡淡的说非”的博客《GitHub Pages + Hexo搭建个人博客网站，史上最全教程》<a href="https://blog.csdn.net/yaorongke/article/details/119089190">地址</a></h4>]]></content>
    
    
    <categories>
      
      <category>我的博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/04/20/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/04/20/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2023/04/20/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" class="" title="图片引用方法一"><p><img src="test.png" alt="图片引用方法二"></p><p><img src="/images/test.png" alt="图片引用方法三"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
